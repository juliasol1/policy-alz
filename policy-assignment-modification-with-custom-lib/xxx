[0m[1mdata.azurerm_client_config.current: Reading...[0m[0m
[0m[1mdata.azurerm_client_config.current: Read complete after 0s [id=Y2xpZW50Q29uZmlncy9jbGllbnRJZD0wNGIwNzc5NS04ZGRiLTQ2MWEtYmJlZS0wMmY5ZTFiZjdiNDY7b2JqZWN0SWQ9NDRjMDdhZmEtZmFiMC00ZGJjLTllOTMtNjVmZDZiYjIyZWFmO3N1YnNjcmlwdGlvbklkPWE4ZmQ3NDZmLTg1YmUtNDczNC1hN2I2LTNlNTMyYTliZmE3Nzt0ZW5hbnRJZD02MDQ4NGQ0MS1mNGM0LTRhNjItYTc2Zi1iMDU2ODg1YWVkZDA=][0m
[0m[1mmodule.alz.data.alz_architecture.this: Reading...[0m[0m
[0m[1mmodule.alz.data.alz_architecture.this: Still reading... [10s elapsed][0m[0m
[0m[1mmodule.alz.data.alz_architecture.this: Still reading... [20s elapsed][0m[0m
[0m[1mmodule.alz.data.alz_architecture.this: Still reading... [30s elapsed][0m[0m
[0m[1mmodule.alz.data.alz_architecture.this: Read complete after 31s [id=custom][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # azurerm_maintenance_configuration.this[0m will be created
[0m  [32m+[0m[0m resource "azurerm_maintenance_configuration" "this" {
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m in_guest_user_patch_mode = "User"
      [32m+[0m[0m location                 = "swedencentral"
      [32m+[0m[0m name                     = "ring1"
      [32m+[0m[0m resource_group_name      = "rg-update-manager"
      [32m+[0m[0m scope                    = "InGuestPatch"
      [32m+[0m[0m visibility               = "Custom"

      [32m+[0m[0m install_patches {
          [32m+[0m[0m reboot = "IfRequired"

          [32m+[0m[0m windows {
              [32m+[0m[0m classifications_to_include = [
                  [32m+[0m[0m "Critical",
                  [32m+[0m[0m "Security",
                  [32m+[0m[0m "Definition",
                ]
            }
        }

      [32m+[0m[0m window {
          [32m+[0m[0m duration        = "03:55"
          [32m+[0m[0m recur_every     = "Week"
          [32m+[0m[0m start_date_time = "2024-01-03 00:00"
          [32m+[0m[0m time_zone       = "GMT Standard Time"
        }
    }

[1m  # azurerm_resource_group.update_manager[0m will be created
[0m  [32m+[0m[0m resource "azurerm_resource_group" "update_manager" {
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m location = "swedencentral"
      [32m+[0m[0m name     = "rg-update-manager"
    }

[1m  # module.alz.azapi_resource.policy_assignments["mycorp/Audit-PeDnsZones"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_assignments" {
      [32m+[0m[0m body                             = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description           = "Audits the deployment of Private Link Private DNS Zone resources in the Corp landing zone."
              [32m+[0m[0m displayName           = "Audit Private Link Private DNS Zone resources"
              [32m+[0m[0m enforcementMode       = "Default"
              [32m+[0m[0m metadata              = {
                  [32m+[0m[0m createdBy = ""
                  [32m+[0m[0m createdOn = ""
                  [32m+[0m[0m updatedBy = ""
                  [32m+[0m[0m updatedOn = ""
                }
              [32m+[0m[0m nonComplianceMessages = [
                  [32m+[0m[0m {
                      [32m+[0m[0m message = "Private Link Private DNS Zone resources {enforcementMode} be deployed in the Corp landing zone."
                    },
                ]
              [32m+[0m[0m notScopes             = []
              [32m+[0m[0m overrides             = [90mnull[0m[0m
              [32m+[0m[0m parameters            = {
                  [32m+[0m[0m effect              = {
                      [32m+[0m[0m value = "Audit"
                    }
                  [32m+[0m[0m privateLinkDnsZones = {
                      [32m+[0m[0m value = [
                          [32m+[0m[0m "privatelink.adf.azure.com",
                          [32m+[0m[0m "privatelink.afs.azure.net",
                          [32m+[0m[0m "privatelink.agentsvc.azure-automation.net",
                          [32m+[0m[0m "privatelink.analysis.windows.net",
                          [32m+[0m[0m "privatelink.api.azureml.ms",
                          [32m+[0m[0m "privatelink.azconfig.io",
                          [32m+[0m[0m "privatelink.azure-api.net",
                          [32m+[0m[0m "privatelink.azure-automation.net",
                          [32m+[0m[0m "privatelink.azurecr.io",
                          [32m+[0m[0m "privatelink.azure-devices.net",
                          [32m+[0m[0m "privatelink.azure-devices-provisioning.net",
                          [32m+[0m[0m "privatelink.azuredatabricks.net",
                          [32m+[0m[0m "privatelink.azurehdinsight.net",
                          [32m+[0m[0m "privatelink.azurehealthcareapis.com",
                          [32m+[0m[0m "privatelink.azurestaticapps.net",
                          [32m+[0m[0m "privatelink.azuresynapse.net",
                          [32m+[0m[0m "privatelink.azurewebsites.net",
                          [32m+[0m[0m "privatelink.batch.azure.com",
                          [32m+[0m[0m "privatelink.blob.core.windows.net",
                          [32m+[0m[0m "privatelink.cassandra.cosmos.azure.com",
                          [32m+[0m[0m "privatelink.cognitiveservices.azure.com",
                          [32m+[0m[0m "privatelink.database.windows.net",
                          [32m+[0m[0m "privatelink.datafactory.azure.net",
                          [32m+[0m[0m "privatelink.dev.azuresynapse.net",
                          [32m+[0m[0m "privatelink.dfs.core.windows.net",
                          [32m+[0m[0m "privatelink.dicom.azurehealthcareapis.com",
                          [32m+[0m[0m "privatelink.digitaltwins.azure.net",
                          [32m+[0m[0m "privatelink.directline.botframework.com",
                          [32m+[0m[0m "privatelink.documents.azure.com",
                          [32m+[0m[0m "privatelink.eventgrid.azure.net",
                          [32m+[0m[0m "privatelink.file.core.windows.net",
                          [32m+[0m[0m "privatelink.gremlin.cosmos.azure.com",
                          [32m+[0m[0m "privatelink.guestconfiguration.azure.com",
                          [32m+[0m[0m "privatelink.his.arc.azure.com",
                          [32m+[0m[0m "privatelink.kubernetesconfiguration.azure.com",
                          [32m+[0m[0m "privatelink.managedhsm.azure.net",
                          [32m+[0m[0m "privatelink.mariadb.database.azure.com",
                          [32m+[0m[0m "privatelink.media.azure.net",
                          [32m+[0m[0m "privatelink.mongo.cosmos.azure.com",
                          [32m+[0m[0m "privatelink.monitor.azure.com",
                          [32m+[0m[0m "privatelink.mysql.database.azure.com",
                          [32m+[0m[0m "privatelink.notebooks.azure.net",
                          [32m+[0m[0m "privatelink.ods.opinsights.azure.com",
                          [32m+[0m[0m "privatelink.oms.opinsights.azure.com",
                          [32m+[0m[0m "privatelink.pbidedicated.windows.net",
                          [32m+[0m[0m "privatelink.postgres.database.azure.com",
                          [32m+[0m[0m "privatelink.prod.migration.windowsazure.com",
                          [32m+[0m[0m "privatelink.purview.azure.com",
                          [32m+[0m[0m "privatelink.purviewstudio.azure.com",
                          [32m+[0m[0m "privatelink.queue.core.windows.net",
                          [32m+[0m[0m "privatelink.redis.cache.windows.net",
                          [32m+[0m[0m "privatelink.redisenterprise.cache.azure.net",
                          [32m+[0m[0m "privatelink.search.windows.net",
                          [32m+[0m[0m "privatelink.service.signalr.net",
                          [32m+[0m[0m "privatelink.servicebus.windows.net",
                          [32m+[0m[0m "privatelink.siterecovery.windowsazure.com",
                          [32m+[0m[0m "privatelink.sql.azuresynapse.net",
                          [32m+[0m[0m "privatelink.table.core.windows.net",
                          [32m+[0m[0m "privatelink.table.cosmos.azure.com",
                          [32m+[0m[0m "privatelink.tip1.powerquery.microsoft.com",
                          [32m+[0m[0m "privatelink.token.botframework.com",
                          [32m+[0m[0m "privatelink.vaultcore.azure.net",
                          [32m+[0m[0m "privatelink.web.core.windows.net",
                          [32m+[0m[0m "privatelink.webpubsub.azure.com",
                        ]
                    }
                }
              [32m+[0m[0m policyDefinitionId    = "/providers/Microsoft.Management/managementGroups/placeholder/providers/Microsoft.Authorization/policyDefinitions/Audit-PrivateLinkDnsZones"
              [32m+[0m[0m resourceSelectors     = [90mnull[0m[0m
            }
        }
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m ignore_casing                    = false
      [32m+[0m[0m ignore_missing_property          = true
      [32m+[0m[0m location                         = "swedencentral"
      [32m+[0m[0m name                             = "Audit-PeDnsZones"
      [32m+[0m[0m output                           = (known after apply)
      [32m+[0m[0m parent_id                        = "/providers/Microsoft.Management/managementGroups/mycorp"
      [32m+[0m[0m replace_triggers_external_values = [
          [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/placeholder/providers/Microsoft.Authorization/policyDefinitions/Audit-PrivateLinkDnsZones",
          [32m+[0m[0m "swedencentral",
        ]
      [32m+[0m[0m retry                            = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
              [32m+[0m[0m "The policy definition specified in policy assignment '.+' is out of scope",
            ]
          [32m+[0m[0m interval_seconds     = 5
          [32m+[0m[0m max_interval_seconds = 30
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled        = true
      [32m+[0m[0m type                             = "Microsoft.Authorization/policyAssignments@2024-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "15m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_assignments["mycorp/Enable-DDoS-VNET"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_assignments" {
      [32m+[0m[0m body                             = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description           = "Protect your virtual networks against volumetric and protocol attacks with Azure DDoS Network Protection. For more information, visit https://aka.ms/ddosprotectiondocs."
              [32m+[0m[0m displayName           = "Virtual networks should be protected by Azure DDoS Network Protection"
              [32m+[0m[0m enforcementMode       = "Default"
              [32m+[0m[0m metadata              = {
                  [32m+[0m[0m createdBy = ""
                  [32m+[0m[0m createdOn = ""
                  [32m+[0m[0m updatedBy = ""
                  [32m+[0m[0m updatedOn = ""
                }
              [32m+[0m[0m nonComplianceMessages = [90mnull[0m[0m
              [32m+[0m[0m notScopes             = []
              [32m+[0m[0m overrides             = [90mnull[0m[0m
              [32m+[0m[0m parameters            = {
                  [32m+[0m[0m ddosPlan = {
                      [32m+[0m[0m value = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/placeholder/providers/Microsoft.Network/ddosProtectionPlans/placeholder"
                    }
                  [32m+[0m[0m effect   = {
                      [32m+[0m[0m value = "Modify"
                    }
                }
              [32m+[0m[0m policyDefinitionId    = "/providers/Microsoft.Authorization/policyDefinitions/94de2ad3-e0c1-4caf-ad78-5d47bbc83d3d"
              [32m+[0m[0m resourceSelectors     = [90mnull[0m[0m
            }
        }
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m ignore_casing                    = false
      [32m+[0m[0m ignore_missing_property          = true
      [32m+[0m[0m location                         = "swedencentral"
      [32m+[0m[0m name                             = "Enable-DDoS-VNET"
      [32m+[0m[0m output                           = (known after apply)
      [32m+[0m[0m parent_id                        = "/providers/Microsoft.Management/managementGroups/mycorp"
      [32m+[0m[0m replace_triggers_external_values = [
          [32m+[0m[0m "/providers/Microsoft.Authorization/policyDefinitions/94de2ad3-e0c1-4caf-ad78-5d47bbc83d3d",
          [32m+[0m[0m "swedencentral",
        ]
      [32m+[0m[0m retry                            = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
              [32m+[0m[0m "The policy definition specified in policy assignment '.+' is out of scope",
            ]
          [32m+[0m[0m interval_seconds     = 5
          [32m+[0m[0m max_interval_seconds = 30
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled        = true
      [32m+[0m[0m type                             = "Microsoft.Authorization/policyAssignments@2024-04-01"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "15m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_assignments["mycorp/SQL"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_assignments" {
      [32m+[0m[0m body                             = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description           = "Require Microsoft Entra-only authentication for Azure SQL Database, disabling local authentication methods. This allows access exclusively via Microsoft Entra identities, enhancing security with modern authentication enhancements including MFA, SSO, and secret-less programmatic access with managed identities."
              [32m+[0m[0m displayName           = "Azure SQL Database should have Microsoft Entra-only authentication"
              [32m+[0m[0m enforcementMode       = "Default"
              [32m+[0m[0m metadata              = {
                  [32m+[0m[0m createdBy = ""
                  [32m+[0m[0m createdOn = ""
                  [32m+[0m[0m updatedBy = ""
                  [32m+[0m[0m updatedOn = ""
                }
              [32m+[0m[0m nonComplianceMessages = [
                  [32m+[0m[0m {
                      [32m+[0m[0m message = "This is not compliant"
                    },
                ]
              [32m+[0m[0m notScopes             = []
              [32m+[0m[0m overrides             = [90mnull[0m[0m
              [32m+[0m[0m parameters            = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "Audit"
                    }
                }
              [32m+[0m[0m policyDefinitionId    = "/providers/Microsoft.Authorization/policyDefinitions/b3a22bc9-66de-45fb-98fa-00f5df42f41a"
              [32m+[0m[0m resourceSelectors     = [90mnull[0m[0m
            }
        }
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m ignore_casing                    = false
      [32m+[0m[0m ignore_missing_property          = true
      [32m+[0m[0m location                         = "swedencentral"
      [32m+[0m[0m name                             = "SQL"
      [32m+[0m[0m output                           = (known after apply)
      [32m+[0m[0m parent_id                        = "/providers/Microsoft.Management/managementGroups/mycorp"
      [32m+[0m[0m replace_triggers_external_values = [
          [32m+[0m[0m "/providers/Microsoft.Authorization/policyDefinitions/b3a22bc9-66de-45fb-98fa-00f5df42f41a",
          [32m+[0m[0m "swedencentral",
        ]
      [32m+[0m[0m retry                            = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
              [32m+[0m[0m "The policy definition specified in policy assignment '.+' is out of scope",
            ]
          [32m+[0m[0m interval_seconds     = 5
          [32m+[0m[0m max_interval_seconds = 30
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled        = true
      [32m+[0m[0m type                             = "Microsoft.Authorization/policyAssignments@2024-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "15m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_assignments["mycorp/Update-Ring1"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_assignments" {
      [32m+[0m[0m body                             = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description           = "You can use Azure Update Manager in Azure to save recurring deployment schedules to install operating system updates for your Windows Server and Linux machines in Azure, in on-premises environments, and in other cloud environments connected using Azure Arc-enabled servers. This policy will also change the patch mode for the Azure Virtual Machine to 'AutomaticByPlatform'. See more: https://aka.ms/umc-scheduled-patching"
              [32m+[0m[0m displayName           = "Schedule recurring updates using Azure Update Manager - Ring 1 (Tuesday Midnight)"
              [32m+[0m[0m enforcementMode       = "Default"
              [32m+[0m[0m metadata              = {
                  [32m+[0m[0m createdBy = ""
                  [32m+[0m[0m createdOn = ""
                  [32m+[0m[0m updatedBy = ""
                  [32m+[0m[0m updatedOn = ""
                }
              [32m+[0m[0m nonComplianceMessages = [
                  [32m+[0m[0m {
                      [32m+[0m[0m message = "Azure Update Manager Update not applied"
                    },
                ]
              [32m+[0m[0m notScopes             = []
              [32m+[0m[0m overrides             = [90mnull[0m[0m
              [32m+[0m[0m parameters            = {
                  [32m+[0m[0m maintenanceConfigurationResourceId = {
                      [32m+[0m[0m value = ""
                    }
                  [32m+[0m[0m tagValues                          = {
                      [32m+[0m[0m value = [
                          [32m+[0m[0m {
                              [32m+[0m[0m key   = "Update Manager Policy"
                              [32m+[0m[0m value = "Ring1"
                            },
                        ]
                    }
                }
              [32m+[0m[0m policyDefinitionId    = "/providers/Microsoft.Authorization/policyDefinitions/ba0df93e-e4ac-479a-aac2-134bbae39a1a"
              [32m+[0m[0m resourceSelectors     = [90mnull[0m[0m
            }
        }
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m ignore_casing                    = false
      [32m+[0m[0m ignore_missing_property          = true
      [32m+[0m[0m location                         = "swedencentral"
      [32m+[0m[0m name                             = "Update-Ring1"
      [32m+[0m[0m output                           = (known after apply)
      [32m+[0m[0m parent_id                        = "/providers/Microsoft.Management/managementGroups/mycorp"
      [32m+[0m[0m replace_triggers_external_values = [
          [32m+[0m[0m "/providers/Microsoft.Authorization/policyDefinitions/ba0df93e-e4ac-479a-aac2-134bbae39a1a",
          [32m+[0m[0m "swedencentral",
        ]
      [32m+[0m[0m retry                            = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
              [32m+[0m[0m "The policy definition specified in policy assignment '.+' is out of scope",
            ]
          [32m+[0m[0m interval_seconds     = 5
          [32m+[0m[0m max_interval_seconds = 30
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled        = true
      [32m+[0m[0m type                             = "Microsoft.Authorization/policyAssignments@2024-04-01"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "15m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_assignments["myroot2/Audit-ResourceRGLocation"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_assignments" {
      [32m+[0m[0m body                             = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description           = "Resource Group and Resource locations should match."
              [32m+[0m[0m displayName           = "Resource Group and Resource locations should match"
              [32m+[0m[0m enforcementMode       = "Default"
              [32m+[0m[0m metadata              = {
                  [32m+[0m[0m createdBy = ""
                  [32m+[0m[0m createdOn = ""
                  [32m+[0m[0m updatedBy = ""
                  [32m+[0m[0m updatedOn = ""
                }
              [32m+[0m[0m nonComplianceMessages = [
                  [32m+[0m[0m {
                      [32m+[0m[0m message = "Resources {enforcementMode} be deployed in the same region as the Resource Group."
                    },
                ]
              [32m+[0m[0m notScopes             = []
              [32m+[0m[0m overrides             = [90mnull[0m[0m
              [32m+[0m[0m parameters            = {}
              [32m+[0m[0m policyDefinitionId    = "/providers/Microsoft.Authorization/policyDefinitions/0a914e76-4921-4c19-b460-a2d36003525a"
              [32m+[0m[0m resourceSelectors     = [90mnull[0m[0m
            }
        }
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m ignore_casing                    = false
      [32m+[0m[0m ignore_missing_property          = true
      [32m+[0m[0m location                         = "swedencentral"
      [32m+[0m[0m name                             = "Audit-ResourceRGLocation"
      [32m+[0m[0m output                           = (known after apply)
      [32m+[0m[0m parent_id                        = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m replace_triggers_external_values = [
          [32m+[0m[0m "/providers/Microsoft.Authorization/policyDefinitions/0a914e76-4921-4c19-b460-a2d36003525a",
          [32m+[0m[0m "swedencentral",
        ]
      [32m+[0m[0m retry                            = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
              [32m+[0m[0m "The policy definition specified in policy assignment '.+' is out of scope",
            ]
          [32m+[0m[0m interval_seconds     = 5
          [32m+[0m[0m max_interval_seconds = 30
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled        = true
      [32m+[0m[0m type                             = "Microsoft.Authorization/policyAssignments@2024-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "15m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_assignments["myroot2/Audit-TrustedLaunch"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_assignments" {
      [32m+[0m[0m body                             = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description           = "Trusted Launch improves security of a Virtual Machine which requires VM SKU, OS Disk & OS Image to support it (Gen 2). To learn more about Trusted Launch, visit https://aka.ms/trustedlaunch."
              [32m+[0m[0m displayName           = "Audit virtual machines for Trusted Launch support"
              [32m+[0m[0m enforcementMode       = "Default"
              [32m+[0m[0m metadata              = {
                  [32m+[0m[0m createdBy = ""
                  [32m+[0m[0m createdOn = ""
                  [32m+[0m[0m updatedBy = ""
                  [32m+[0m[0m updatedOn = ""
                }
              [32m+[0m[0m nonComplianceMessages = [
                  [32m+[0m[0m {
                      [32m+[0m[0m message = "Trusted Launch {enforcementMode} be used on supported virtual machines for enhanced security."
                    },
                ]
              [32m+[0m[0m notScopes             = []
              [32m+[0m[0m overrides             = [90mnull[0m[0m
              [32m+[0m[0m parameters            = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "Audit"
                    }
                }
              [32m+[0m[0m policyDefinitionId    = "/providers/Microsoft.Management/managementGroups/myroot2/providers/Microsoft.Authorization/policySetDefinitions/Audit-TrustedLaunch"
              [32m+[0m[0m resourceSelectors     = [90mnull[0m[0m
            }
        }
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m ignore_casing                    = false
      [32m+[0m[0m ignore_missing_property          = true
      [32m+[0m[0m location                         = "swedencentral"
      [32m+[0m[0m name                             = "Audit-TrustedLaunch"
      [32m+[0m[0m output                           = (known after apply)
      [32m+[0m[0m parent_id                        = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m replace_triggers_external_values = [
          [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/myroot2/providers/Microsoft.Authorization/policySetDefinitions/Audit-TrustedLaunch",
          [32m+[0m[0m "swedencentral",
        ]
      [32m+[0m[0m retry                            = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
              [32m+[0m[0m "The policy definition specified in policy assignment '.+' is out of scope",
            ]
          [32m+[0m[0m interval_seconds     = 5
          [32m+[0m[0m max_interval_seconds = 30
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled        = true
      [32m+[0m[0m type                             = "Microsoft.Authorization/policyAssignments@2024-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "15m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_assignments["myroot2/Audit-UnusedResources"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_assignments" {
      [32m+[0m[0m body                             = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description           = "This Policy initiative is a group of Policy definitions that help optimize cost by detecting unused but chargeable resources. Leverage this Policy initiative as a cost control to reveal orphaned resources that are driving cost."
              [32m+[0m[0m displayName           = "Unused resources driving cost should be avoided"
              [32m+[0m[0m enforcementMode       = "Default"
              [32m+[0m[0m metadata              = {
                  [32m+[0m[0m createdBy = ""
                  [32m+[0m[0m createdOn = ""
                  [32m+[0m[0m updatedBy = ""
                  [32m+[0m[0m updatedOn = ""
                }
              [32m+[0m[0m nonComplianceMessages = [
                  [32m+[0m[0m {
                      [32m+[0m[0m message = "Unused resources driving cost {enforcementMode} be avoided."
                    },
                ]
              [32m+[0m[0m notScopes             = []
              [32m+[0m[0m overrides             = [90mnull[0m[0m
              [32m+[0m[0m parameters            = {
                  [32m+[0m[0m EffectDisks             = {
                      [32m+[0m[0m value = "Audit"
                    }
                  [32m+[0m[0m EffectPublicIpAddresses = {
                      [32m+[0m[0m value = "Audit"
                    }
                  [32m+[0m[0m EffectServerFarms       = {
                      [32m+[0m[0m value = "Audit"
                    }
                }
              [32m+[0m[0m policyDefinitionId    = "/providers/Microsoft.Management/managementGroups/myroot2/providers/Microsoft.Authorization/policySetDefinitions/Audit-UnusedResourcesCostOptimization"
              [32m+[0m[0m resourceSelectors     = [90mnull[0m[0m
            }
        }
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m ignore_casing                    = false
      [32m+[0m[0m ignore_missing_property          = true
      [32m+[0m[0m location                         = "swedencentral"
      [32m+[0m[0m name                             = "Audit-UnusedResources"
      [32m+[0m[0m output                           = (known after apply)
      [32m+[0m[0m parent_id                        = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m replace_triggers_external_values = [
          [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/myroot2/providers/Microsoft.Authorization/policySetDefinitions/Audit-UnusedResourcesCostOptimization",
          [32m+[0m[0m "swedencentral",
        ]
      [32m+[0m[0m retry                            = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
              [32m+[0m[0m "The policy definition specified in policy assignment '.+' is out of scope",
            ]
          [32m+[0m[0m interval_seconds     = 5
          [32m+[0m[0m max_interval_seconds = 30
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled        = true
      [32m+[0m[0m type                             = "Microsoft.Authorization/policyAssignments@2024-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "15m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_assignments["myroot2/Audit-ZoneResiliency"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_assignments" {
      [32m+[0m[0m body                             = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description           = "Resources should be Zone Resilient."
              [32m+[0m[0m displayName           = "Resources should be Zone Resilient"
              [32m+[0m[0m enforcementMode       = "Default"
              [32m+[0m[0m metadata              = {
                  [32m+[0m[0m createdBy = ""
                  [32m+[0m[0m createdOn = ""
                  [32m+[0m[0m updatedBy = ""
                  [32m+[0m[0m updatedOn = ""
                }
              [32m+[0m[0m nonComplianceMessages = [
                  [32m+[0m[0m {
                      [32m+[0m[0m message = "Resources {enforcementMode} be Zone Resilient."
                    },
                ]
              [32m+[0m[0m notScopes             = []
              [32m+[0m[0m overrides             = [90mnull[0m[0m
              [32m+[0m[0m parameters            = {
                  [32m+[0m[0m allow  = {
                      [32m+[0m[0m value = "Both"
                    }
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "Audit"
                    }
                }
              [32m+[0m[0m policyDefinitionId    = "/providers/Microsoft.Authorization/policySetDefinitions/130fb88f-0fc9-4678-bfe1-31022d71c7d5"
              [32m+[0m[0m resourceSelectors     = [90mnull[0m[0m
            }
        }
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m ignore_casing                    = false
      [32m+[0m[0m ignore_missing_property          = true
      [32m+[0m[0m location                         = "swedencentral"
      [32m+[0m[0m name                             = "Audit-ZoneResiliency"
      [32m+[0m[0m output                           = (known after apply)
      [32m+[0m[0m parent_id                        = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m replace_triggers_external_values = [
          [32m+[0m[0m "/providers/Microsoft.Authorization/policySetDefinitions/130fb88f-0fc9-4678-bfe1-31022d71c7d5",
          [32m+[0m[0m "swedencentral",
        ]
      [32m+[0m[0m retry                            = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
              [32m+[0m[0m "The policy definition specified in policy assignment '.+' is out of scope",
            ]
          [32m+[0m[0m interval_seconds     = 5
          [32m+[0m[0m max_interval_seconds = 30
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled        = true
      [32m+[0m[0m type                             = "Microsoft.Authorization/policyAssignments@2024-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "15m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_assignments["myroot2/Deny-Classic-Resources"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_assignments" {
      [32m+[0m[0m body                             = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description           = "Denies deployment of classic resource types under the assigned scope."
              [32m+[0m[0m displayName           = "Deny the deployment of classic resources"
              [32m+[0m[0m enforcementMode       = "Default"
              [32m+[0m[0m metadata              = {
                  [32m+[0m[0m createdBy = ""
                  [32m+[0m[0m createdOn = ""
                  [32m+[0m[0m updatedBy = ""
                  [32m+[0m[0m updatedOn = ""
                }
              [32m+[0m[0m nonComplianceMessages = [
                  [32m+[0m[0m {
                      [32m+[0m[0m message = "Classic resources {enforcementMode} not be deployed."
                    },
                ]
              [32m+[0m[0m notScopes             = []
              [32m+[0m[0m overrides             = [90mnull[0m[0m
              [32m+[0m[0m parameters            = {
                  [32m+[0m[0m effect                        = {
                      [32m+[0m[0m value = "Deny"
                    }
                  [32m+[0m[0m listOfResourceTypesNotAllowed = {
                      [32m+[0m[0m value = [
                          [32m+[0m[0m "Microsoft.ClassicCompute/capabilities",
                          [32m+[0m[0m "Microsoft.ClassicCompute/checkDomainNameAvailability",
                          [32m+[0m[0m "Microsoft.ClassicCompute/domainNames",
                          [32m+[0m[0m "Microsoft.ClassicCompute/domainNames/capabilities",
                          [32m+[0m[0m "Microsoft.ClassicCompute/domainNames/internalLoadBalancers",
                          [32m+[0m[0m "Microsoft.ClassicCompute/domainNames/serviceCertificates",
                          [32m+[0m[0m "Microsoft.ClassicCompute/domainNames/slots",
                          [32m+[0m[0m "Microsoft.ClassicCompute/domainNames/slots/roles",
                          [32m+[0m[0m "Microsoft.ClassicCompute/domainNames/slots/roles/metricDefinitions",
                          [32m+[0m[0m "Microsoft.ClassicCompute/domainNames/slots/roles/metrics",
                          [32m+[0m[0m "Microsoft.ClassicCompute/moveSubscriptionResources",
                          [32m+[0m[0m "Microsoft.ClassicCompute/operatingSystemFamilies",
                          [32m+[0m[0m "Microsoft.ClassicCompute/operatingSystems",
                          [32m+[0m[0m "Microsoft.ClassicCompute/operations",
                          [32m+[0m[0m "Microsoft.ClassicCompute/operationStatuses",
                          [32m+[0m[0m "Microsoft.ClassicCompute/quotas",
                          [32m+[0m[0m "Microsoft.ClassicCompute/resourceTypes",
                          [32m+[0m[0m "Microsoft.ClassicCompute/validateSubscriptionMoveAvailability",
                          [32m+[0m[0m "Microsoft.ClassicCompute/virtualMachines",
                          [32m+[0m[0m "Microsoft.ClassicCompute/virtualMachines/diagnosticSettings",
                          [32m+[0m[0m "Microsoft.ClassicCompute/virtualMachines/metricDefinitions",
                          [32m+[0m[0m "Microsoft.ClassicCompute/virtualMachines/metrics",
                          [32m+[0m[0m "Microsoft.ClassicInfrastructureMigrate/classicInfrastructureResources",
                          [32m+[0m[0m "Microsoft.ClassicNetwork/capabilities",
                          [32m+[0m[0m "Microsoft.ClassicNetwork/expressRouteCrossConnections",
                          [32m+[0m[0m "Microsoft.ClassicNetwork/expressRouteCrossConnections/peerings",
                          [32m+[0m[0m "Microsoft.ClassicNetwork/gatewaySupportedDevices",
                          [32m+[0m[0m "Microsoft.ClassicNetwork/networkSecurityGroups",
                          [32m+[0m[0m "Microsoft.ClassicNetwork/operations",
                          [32m+[0m[0m "Microsoft.ClassicNetwork/quotas",
                          [32m+[0m[0m "Microsoft.ClassicNetwork/reservedIps",
                          [32m+[0m[0m "Microsoft.ClassicNetwork/virtualNetworks",
                          [32m+[0m[0m "Microsoft.ClassicNetwork/virtualNetworks/remoteVirtualNetworkPeeringProxies",
                          [32m+[0m[0m "Microsoft.ClassicNetwork/virtualNetworks/virtualNetworkPeerings",
                          [32m+[0m[0m "Microsoft.ClassicStorage/capabilities",
                          [32m+[0m[0m "Microsoft.ClassicStorage/checkStorageAccountAvailability",
                          [32m+[0m[0m "Microsoft.ClassicStorage/disks",
                          [32m+[0m[0m "Microsoft.ClassicStorage/images",
                          [32m+[0m[0m "Microsoft.ClassicStorage/operations",
                          [32m+[0m[0m "Microsoft.ClassicStorage/osImages",
                          [32m+[0m[0m "Microsoft.ClassicStorage/osPlatformImages",
                          [32m+[0m[0m "Microsoft.ClassicStorage/publicImages",
                          [32m+[0m[0m "Microsoft.ClassicStorage/quotas",
                          [32m+[0m[0m "Microsoft.ClassicStorage/storageAccounts",
                          [32m+[0m[0m "Microsoft.ClassicStorage/storageAccounts/blobServices",
                          [32m+[0m[0m "Microsoft.ClassicStorage/storageAccounts/fileServices",
                          [32m+[0m[0m "Microsoft.ClassicStorage/storageAccounts/metricDefinitions",
                          [32m+[0m[0m "Microsoft.ClassicStorage/storageAccounts/metrics",
                          [32m+[0m[0m "Microsoft.ClassicStorage/storageAccounts/queueServices",
                          [32m+[0m[0m "Microsoft.ClassicStorage/storageAccounts/services",
                          [32m+[0m[0m "Microsoft.ClassicStorage/storageAccounts/services/diagnosticSettings",
                          [32m+[0m[0m "Microsoft.ClassicStorage/storageAccounts/services/metricDefinitions",
                          [32m+[0m[0m "Microsoft.ClassicStorage/storageAccounts/services/metrics",
                          [32m+[0m[0m "Microsoft.ClassicStorage/storageAccounts/tableServices",
                          [32m+[0m[0m "Microsoft.ClassicStorage/storageAccounts/vmImages",
                          [32m+[0m[0m "Microsoft.ClassicStorage/vmImages",
                          [32m+[0m[0m "Microsoft.ClassicSubscription/operations",
                        ]
                    }
                }
              [32m+[0m[0m policyDefinitionId    = "/providers/Microsoft.Authorization/policyDefinitions/6c112d4e-5bc7-47ae-a041-ea2d9dccd749"
              [32m+[0m[0m resourceSelectors     = [90mnull[0m[0m
            }
        }
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m ignore_casing                    = false
      [32m+[0m[0m ignore_missing_property          = true
      [32m+[0m[0m location                         = "swedencentral"
      [32m+[0m[0m name                             = "Deny-Classic-Resources"
      [32m+[0m[0m output                           = (known after apply)
      [32m+[0m[0m parent_id                        = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m replace_triggers_external_values = [
          [32m+[0m[0m "/providers/Microsoft.Authorization/policyDefinitions/6c112d4e-5bc7-47ae-a041-ea2d9dccd749",
          [32m+[0m[0m "swedencentral",
        ]
      [32m+[0m[0m retry                            = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
              [32m+[0m[0m "The policy definition specified in policy assignment '.+' is out of scope",
            ]
          [32m+[0m[0m interval_seconds     = 5
          [32m+[0m[0m max_interval_seconds = 30
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled        = true
      [32m+[0m[0m type                             = "Microsoft.Authorization/policyAssignments@2024-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "15m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_assignments["myroot2/Deny-UnmanagedDisk"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_assignments" {
      [32m+[0m[0m body                             = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description           = "Deny virtual machines that do not use managed disk. It checks the managed disk property on virtual machine OS Disk fields."
              [32m+[0m[0m displayName           = "Deny virtual machines and virtual machine scale sets that do not use managed disk"
              [32m+[0m[0m enforcementMode       = "Default"
              [32m+[0m[0m metadata              = {
                  [32m+[0m[0m createdBy = ""
                  [32m+[0m[0m createdOn = ""
                  [32m+[0m[0m updatedBy = ""
                  [32m+[0m[0m updatedOn = ""
                }
              [32m+[0m[0m nonComplianceMessages = [
                  [32m+[0m[0m {
                      [32m+[0m[0m message = "Virtual machines and virtual machine scales sets {enforcementMode} use a managed disk."
                    },
                ]
              [32m+[0m[0m notScopes             = []
              [32m+[0m[0m overrides             = [
                  [32m+[0m[0m {
                      [32m+[0m[0m kind  = "policyEffect"
                      [32m+[0m[0m value = "Deny"
                    },
                ]
              [32m+[0m[0m parameters            = {}
              [32m+[0m[0m policyDefinitionId    = "/providers/Microsoft.Authorization/policyDefinitions/06a78e20-9358-41c9-923c-fb736d382a4d"
              [32m+[0m[0m resourceSelectors     = [90mnull[0m[0m
            }
        }
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m ignore_casing                    = false
      [32m+[0m[0m ignore_missing_property          = true
      [32m+[0m[0m location                         = "swedencentral"
      [32m+[0m[0m name                             = "Deny-UnmanagedDisk"
      [32m+[0m[0m output                           = (known after apply)
      [32m+[0m[0m parent_id                        = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m replace_triggers_external_values = [
          [32m+[0m[0m "/providers/Microsoft.Authorization/policyDefinitions/06a78e20-9358-41c9-923c-fb736d382a4d",
          [32m+[0m[0m "swedencentral",
        ]
      [32m+[0m[0m retry                            = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
              [32m+[0m[0m "The policy definition specified in policy assignment '.+' is out of scope",
            ]
          [32m+[0m[0m interval_seconds     = 5
          [32m+[0m[0m max_interval_seconds = 30
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled        = true
      [32m+[0m[0m type                             = "Microsoft.Authorization/policyAssignments@2024-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "15m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_assignments["myroot2/Deploy-ASC-Monitoring"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_assignments" {
      [32m+[0m[0m body                             = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description           = "Microsoft Cloud Security Benchmark policy initiative."
              [32m+[0m[0m displayName           = "Microsoft Cloud Security Benchmark"
              [32m+[0m[0m enforcementMode       = "Default"
              [32m+[0m[0m metadata              = {
                  [32m+[0m[0m createdBy = ""
                  [32m+[0m[0m createdOn = ""
                  [32m+[0m[0m updatedBy = ""
                  [32m+[0m[0m updatedOn = ""
                }
              [32m+[0m[0m nonComplianceMessages = [
                  [32m+[0m[0m {
                      [32m+[0m[0m message = "Microsoft Cloud Security Benchmark {enforcementMode} be met."
                    },
                ]
              [32m+[0m[0m notScopes             = []
              [32m+[0m[0m overrides             = [90mnull[0m[0m
              [32m+[0m[0m parameters            = {}
              [32m+[0m[0m policyDefinitionId    = "/providers/Microsoft.Authorization/policySetDefinitions/1f3afdf9-d0c9-4c3d-847f-89da613e70a8"
              [32m+[0m[0m resourceSelectors     = [90mnull[0m[0m
            }
        }
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m ignore_casing                    = false
      [32m+[0m[0m ignore_missing_property          = true
      [32m+[0m[0m location                         = "swedencentral"
      [32m+[0m[0m name                             = "Deploy-ASC-Monitoring"
      [32m+[0m[0m output                           = (known after apply)
      [32m+[0m[0m parent_id                        = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m replace_triggers_external_values = [
          [32m+[0m[0m "/providers/Microsoft.Authorization/policySetDefinitions/1f3afdf9-d0c9-4c3d-847f-89da613e70a8",
          [32m+[0m[0m "swedencentral",
        ]
      [32m+[0m[0m retry                            = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
              [32m+[0m[0m "The policy definition specified in policy assignment '.+' is out of scope",
            ]
          [32m+[0m[0m interval_seconds     = 5
          [32m+[0m[0m max_interval_seconds = 30
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled        = true
      [32m+[0m[0m type                             = "Microsoft.Authorization/policyAssignments@2024-04-01"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "15m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_assignments["myroot2/Deploy-AzActivity-Log"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_assignments" {
      [32m+[0m[0m body                             = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description           = "Deploys the diagnostic settings for Azure Activity to stream subscriptions audit logs to a Log Analytics workspace to monitor subscription-level events"
              [32m+[0m[0m displayName           = "Configure Azure Activity logs to stream to specified Log Analytics workspace"
              [32m+[0m[0m enforcementMode       = "Default"
              [32m+[0m[0m metadata              = {
                  [32m+[0m[0m createdBy = ""
                  [32m+[0m[0m createdOn = ""
                  [32m+[0m[0m updatedBy = ""
                  [32m+[0m[0m updatedOn = ""
                }
              [32m+[0m[0m nonComplianceMessages = [
                  [32m+[0m[0m {
                      [32m+[0m[0m message = "Azure Activity logs {enforcementMode} be configured to stream to specified Log Analytics workspace."
                    },
                ]
              [32m+[0m[0m notScopes             = []
              [32m+[0m[0m overrides             = [90mnull[0m[0m
              [32m+[0m[0m parameters            = {
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/placeholder/providers/Microsoft.OperationalInsights/workspaces/placeholder-la"
                    }
                  [32m+[0m[0m logsEnabled  = {
                      [32m+[0m[0m value = "True"
                    }
                }
              [32m+[0m[0m policyDefinitionId    = "/providers/Microsoft.Authorization/policyDefinitions/2465583e-4e78-4c15-b6be-a36cbc7c8b0f"
              [32m+[0m[0m resourceSelectors     = [90mnull[0m[0m
            }
        }
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m ignore_casing                    = false
      [32m+[0m[0m ignore_missing_property          = true
      [32m+[0m[0m location                         = "swedencentral"
      [32m+[0m[0m name                             = "Deploy-AzActivity-Log"
      [32m+[0m[0m output                           = (known after apply)
      [32m+[0m[0m parent_id                        = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m replace_triggers_external_values = [
          [32m+[0m[0m "/providers/Microsoft.Authorization/policyDefinitions/2465583e-4e78-4c15-b6be-a36cbc7c8b0f",
          [32m+[0m[0m "swedencentral",
        ]
      [32m+[0m[0m retry                            = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
              [32m+[0m[0m "The policy definition specified in policy assignment '.+' is out of scope",
            ]
          [32m+[0m[0m interval_seconds     = 5
          [32m+[0m[0m max_interval_seconds = 30
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled        = true
      [32m+[0m[0m type                             = "Microsoft.Authorization/policyAssignments@2024-04-01"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "15m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_assignments["myroot2/Deploy-Diag-LogsCat"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_assignments" {
      [32m+[0m[0m body                             = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description           = "Resource logs should be enabled to track activities and events that take place on your resources and give you visibility and insights into any changes that occur. This initiative deploys diagnostic setting using the allLogs category group to route logs to an Event Hub for all supported resources."
              [32m+[0m[0m displayName           = "Enable category group resource logging for supported resources to Log Analytics"
              [32m+[0m[0m enforcementMode       = "Default"
              [32m+[0m[0m metadata              = {
                  [32m+[0m[0m createdBy = ""
                  [32m+[0m[0m createdOn = ""
                  [32m+[0m[0m updatedBy = ""
                  [32m+[0m[0m updatedOn = ""
                }
              [32m+[0m[0m nonComplianceMessages = [
                  [32m+[0m[0m {
                      [32m+[0m[0m message = "Diagnostic settings {enforcementMode} be deployed to Azure services to forward logs to Log Analytics."
                    },
                ]
              [32m+[0m[0m notScopes             = []
              [32m+[0m[0m overrides             = [90mnull[0m[0m
              [32m+[0m[0m parameters            = {
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m value = "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/placeholder/providers/Microsoft.OperationalInsights/workspaces/placeholder-la"
                    }
                }
              [32m+[0m[0m policyDefinitionId    = "/providers/Microsoft.Authorization/policySetDefinitions/f5b29bc4-feca-4cc6-a58a-772dd5e290a5"
              [32m+[0m[0m resourceSelectors     = [90mnull[0m[0m
            }
        }
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m ignore_casing                    = false
      [32m+[0m[0m ignore_missing_property          = true
      [32m+[0m[0m location                         = "swedencentral"
      [32m+[0m[0m name                             = "Deploy-Diag-LogsCat"
      [32m+[0m[0m output                           = (known after apply)
      [32m+[0m[0m parent_id                        = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m replace_triggers_external_values = [
          [32m+[0m[0m "/providers/Microsoft.Authorization/policySetDefinitions/f5b29bc4-feca-4cc6-a58a-772dd5e290a5",
          [32m+[0m[0m "swedencentral",
        ]
      [32m+[0m[0m retry                            = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
              [32m+[0m[0m "The policy definition specified in policy assignment '.+' is out of scope",
            ]
          [32m+[0m[0m interval_seconds     = 5
          [32m+[0m[0m max_interval_seconds = 30
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled        = true
      [32m+[0m[0m type                             = "Microsoft.Authorization/policyAssignments@2024-04-01"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "15m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_assignments["myroot2/Deploy-MDEndpoints"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_assignments" {
      [32m+[0m[0m body                             = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description           = "Deploy Microsoft Defender for Endpoint agent on applicable images."
              [32m+[0m[0m displayName           = "[Preview]: Deploy Microsoft Defender for Endpoint agent"
              [32m+[0m[0m enforcementMode       = "Default"
              [32m+[0m[0m metadata              = {
                  [32m+[0m[0m createdBy = ""
                  [32m+[0m[0m createdOn = ""
                  [32m+[0m[0m updatedBy = ""
                  [32m+[0m[0m updatedOn = ""
                }
              [32m+[0m[0m nonComplianceMessages = [
                  [32m+[0m[0m {
                      [32m+[0m[0m message = "Microsoft Defender for Endpoint agent {enforcementMode} be deployed on applicable images."
                    },
                ]
              [32m+[0m[0m notScopes             = []
              [32m+[0m[0m overrides             = [90mnull[0m[0m
              [32m+[0m[0m parameters            = {
                  [32m+[0m[0m microsoftDefenderForEndpointLinuxArcAgentDeployEffect   = {
                      [32m+[0m[0m value = "DeployIfNotExists"
                    }
                  [32m+[0m[0m microsoftDefenderForEndpointLinuxVmAgentDeployEffect    = {
                      [32m+[0m[0m value = "DeployIfNotExists"
                    }
                  [32m+[0m[0m microsoftDefenderForEndpointWindowsArcAgentDeployEffect = {
                      [32m+[0m[0m value = "DeployIfNotExists"
                    }
                  [32m+[0m[0m microsoftDefenderForEndpointWindowsVmAgentDeployEffect  = {
                      [32m+[0m[0m value = "DeployIfNotExists"
                    }
                }
              [32m+[0m[0m policyDefinitionId    = "/providers/Microsoft.Authorization/policySetDefinitions/e20d08c5-6d64-656d-6465-ce9e37fd0ebc"
              [32m+[0m[0m resourceSelectors     = [90mnull[0m[0m
            }
        }
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m ignore_casing                    = false
      [32m+[0m[0m ignore_missing_property          = true
      [32m+[0m[0m location                         = "swedencentral"
      [32m+[0m[0m name                             = "Deploy-MDEndpoints"
      [32m+[0m[0m output                           = (known after apply)
      [32m+[0m[0m parent_id                        = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m replace_triggers_external_values = [
          [32m+[0m[0m "/providers/Microsoft.Authorization/policySetDefinitions/e20d08c5-6d64-656d-6465-ce9e37fd0ebc",
          [32m+[0m[0m "swedencentral",
        ]
      [32m+[0m[0m retry                            = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
              [32m+[0m[0m "The policy definition specified in policy assignment '.+' is out of scope",
            ]
          [32m+[0m[0m interval_seconds     = 5
          [32m+[0m[0m max_interval_seconds = 30
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled        = true
      [32m+[0m[0m type                             = "Microsoft.Authorization/policyAssignments@2024-04-01"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "15m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_assignments["myroot2/Deploy-MDEndpointsAMA"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_assignments" {
      [32m+[0m[0m body                             = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description           = "Configure the multiple Microsoft Defender for Endpoint integration settings with Microsoft Defender for Cloud (WDATP, WDATP_EXCLUDE_LINUX_PUBLIC_PREVIEW, WDATP_UNIFIED_SOLUTION etc.). See: https://learn.microsoft.com/azure/defender-for-cloud/integration-defender-for-endpoint for more information."
              [32m+[0m[0m displayName           = "Configure multiple Microsoft Defender for Endpoint integration settings with Microsoft Defender for Cloud"
              [32m+[0m[0m enforcementMode       = "Default"
              [32m+[0m[0m metadata              = {
                  [32m+[0m[0m createdBy = ""
                  [32m+[0m[0m createdOn = ""
                  [32m+[0m[0m updatedBy = ""
                  [32m+[0m[0m updatedOn = ""
                }
              [32m+[0m[0m nonComplianceMessages = [
                  [32m+[0m[0m {
                      [32m+[0m[0m message = "Microsoft Defender for Endpoint {enforcementMode} be deployed."
                    },
                ]
              [32m+[0m[0m notScopes             = []
              [32m+[0m[0m overrides             = [90mnull[0m[0m
              [32m+[0m[0m parameters            = {}
              [32m+[0m[0m policyDefinitionId    = "/providers/Microsoft.Authorization/policySetDefinitions/77b391e3-2d5d-40c3-83bf-65c846b3c6a3"
              [32m+[0m[0m resourceSelectors     = [90mnull[0m[0m
            }
        }
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m ignore_casing                    = false
      [32m+[0m[0m ignore_missing_property          = true
      [32m+[0m[0m location                         = "swedencentral"
      [32m+[0m[0m name                             = "Deploy-MDEndpointsAMA"
      [32m+[0m[0m output                           = (known after apply)
      [32m+[0m[0m parent_id                        = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m replace_triggers_external_values = [
          [32m+[0m[0m "/providers/Microsoft.Authorization/policySetDefinitions/77b391e3-2d5d-40c3-83bf-65c846b3c6a3",
          [32m+[0m[0m "swedencentral",
        ]
      [32m+[0m[0m retry                            = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
              [32m+[0m[0m "The policy definition specified in policy assignment '.+' is out of scope",
            ]
          [32m+[0m[0m interval_seconds     = 5
          [32m+[0m[0m max_interval_seconds = 30
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled        = true
      [32m+[0m[0m type                             = "Microsoft.Authorization/policyAssignments@2024-04-01"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "15m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_assignments["myroot2/Deploy-MDFC-Config-H224"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_assignments" {
      [32m+[0m[0m body                             = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description           = "Deploy Microsoft Defender for Cloud and Security Contacts"
              [32m+[0m[0m displayName           = "Deploy Microsoft Defender for Cloud configuration"
              [32m+[0m[0m enforcementMode       = "Default"
              [32m+[0m[0m metadata              = {
                  [32m+[0m[0m createdBy = ""
                  [32m+[0m[0m createdOn = ""
                  [32m+[0m[0m updatedBy = ""
                  [32m+[0m[0m updatedOn = ""
                }
              [32m+[0m[0m nonComplianceMessages = [
                  [32m+[0m[0m {
                      [32m+[0m[0m message = "Microsoft Defender for Cloud and Security Contacts {enforcementMode} be deployed."
                    },
                ]
              [32m+[0m[0m notScopes             = []
              [32m+[0m[0m overrides             = [90mnull[0m[0m
              [32m+[0m[0m parameters            = {
                  [32m+[0m[0m ascExportResourceGroupLocation              = {
                      [32m+[0m[0m value = "${default_location}"
                    }
                  [32m+[0m[0m ascExportResourceGroupName                  = {
                      [32m+[0m[0m value = "/providers/Microsoft.Management/managementGroups/placeholder-asc-export"
                    }
                  [32m+[0m[0m emailSecurityContact                        = {
                      [32m+[0m[0m value = "security_contact@replace_me"
                    }
                  [32m+[0m[0m enableAscForAppServices                     = {
                      [32m+[0m[0m value = "Disabled"
                    }
                  [32m+[0m[0m enableAscForArm                             = {
                      [32m+[0m[0m value = "Disabled"
                    }
                  [32m+[0m[0m enableAscForContainers                      = {
                      [32m+[0m[0m value = "Disabled"
                    }
                  [32m+[0m[0m enableAscForCosmosDbs                       = {
                      [32m+[0m[0m value = "Disabled"
                    }
                  [32m+[0m[0m enableAscForCspm                            = {
                      [32m+[0m[0m value = "Disabled"
                    }
                  [32m+[0m[0m enableAscForKeyVault                        = {
                      [32m+[0m[0m value = "Disabled"
                    }
                  [32m+[0m[0m enableAscForOssDb                           = {
                      [32m+[0m[0m value = "Disabled"
                    }
                  [32m+[0m[0m enableAscForServers                         = {
                      [32m+[0m[0m value = "Disabled"
                    }
                  [32m+[0m[0m enableAscForServersVulnerabilityAssessments = {
                      [32m+[0m[0m value = "Disabled"
                    }
                  [32m+[0m[0m enableAscForSql                             = {
                      [32m+[0m[0m value = "Disabled"
                    }
                  [32m+[0m[0m enableAscForSqlOnVm                         = {
                      [32m+[0m[0m value = "Disabled"
                    }
                  [32m+[0m[0m enableAscForStorage                         = {
                      [32m+[0m[0m value = "Disabled"
                    }
                  [32m+[0m[0m logAnalytics                                = {
                      [32m+[0m[0m value = "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/placeholder/providers/Microsoft.OperationalInsights/workspaces/placeholder-la"
                    }
                }
              [32m+[0m[0m policyDefinitionId    = "/providers/Microsoft.Management/managementGroups/myroot2/providers/Microsoft.Authorization/policySetDefinitions/Deploy-MDFC-Config_20240319"
              [32m+[0m[0m resourceSelectors     = [90mnull[0m[0m
            }
        }
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m ignore_casing                    = false
      [32m+[0m[0m ignore_missing_property          = true
      [32m+[0m[0m location                         = "swedencentral"
      [32m+[0m[0m name                             = "Deploy-MDFC-Config-H224"
      [32m+[0m[0m output                           = (known after apply)
      [32m+[0m[0m parent_id                        = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m replace_triggers_external_values = [
          [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/myroot2/providers/Microsoft.Authorization/policySetDefinitions/Deploy-MDFC-Config_20240319",
          [32m+[0m[0m "swedencentral",
        ]
      [32m+[0m[0m retry                            = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
              [32m+[0m[0m "The policy definition specified in policy assignment '.+' is out of scope",
            ]
          [32m+[0m[0m interval_seconds     = 5
          [32m+[0m[0m max_interval_seconds = 30
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled        = true
      [32m+[0m[0m type                             = "Microsoft.Authorization/policyAssignments@2024-04-01"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "15m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_assignments["myroot2/Deploy-MDFC-OssDb"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_assignments" {
      [32m+[0m[0m body                             = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description           = "Enable Advanced Threat Protection on your non-Basic tier open-source relational databases to detect anomalous activities indicating unusual and potentially harmful attempts to access or exploit databases. See https://aka.ms/AzDforOpenSourceDBsDocu."
              [32m+[0m[0m displayName           = "Configure Advanced Threat Protection to be enabled on open-source relational databases"
              [32m+[0m[0m enforcementMode       = "Default"
              [32m+[0m[0m metadata              = {
                  [32m+[0m[0m createdBy = ""
                  [32m+[0m[0m createdOn = ""
                  [32m+[0m[0m updatedBy = ""
                  [32m+[0m[0m updatedOn = ""
                }
              [32m+[0m[0m nonComplianceMessages = [
                  [32m+[0m[0m {
                      [32m+[0m[0m message = "Advanced Threat Protection {enforcementMode} be enabled on open-source relational databases."
                    },
                ]
              [32m+[0m[0m notScopes             = []
              [32m+[0m[0m overrides             = [90mnull[0m[0m
              [32m+[0m[0m parameters            = {}
              [32m+[0m[0m policyDefinitionId    = "/providers/Microsoft.Authorization/policySetDefinitions/e77fc0b3-f7e9-4c58-bc13-cb753ed8e46e"
              [32m+[0m[0m resourceSelectors     = [90mnull[0m[0m
            }
        }
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m ignore_casing                    = false
      [32m+[0m[0m ignore_missing_property          = true
      [32m+[0m[0m location                         = "swedencentral"
      [32m+[0m[0m name                             = "Deploy-MDFC-OssDb"
      [32m+[0m[0m output                           = (known after apply)
      [32m+[0m[0m parent_id                        = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m replace_triggers_external_values = [
          [32m+[0m[0m "/providers/Microsoft.Authorization/policySetDefinitions/e77fc0b3-f7e9-4c58-bc13-cb753ed8e46e",
          [32m+[0m[0m "swedencentral",
        ]
      [32m+[0m[0m retry                            = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
              [32m+[0m[0m "The policy definition specified in policy assignment '.+' is out of scope",
            ]
          [32m+[0m[0m interval_seconds     = 5
          [32m+[0m[0m max_interval_seconds = 30
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled        = true
      [32m+[0m[0m type                             = "Microsoft.Authorization/policyAssignments@2024-04-01"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "15m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_assignments["myroot2/Deploy-MDFC-SqlAtp"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_assignments" {
      [32m+[0m[0m body                             = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description           = "Enable Azure Defender on your SQL Servers and SQL Managed Instances to detect anomalous activities indicating unusual and potentially harmful attempts to access or exploit databases."
              [32m+[0m[0m displayName           = "Configure Azure Defender to be enabled on SQL Servers and SQL Managed Instances"
              [32m+[0m[0m enforcementMode       = "Default"
              [32m+[0m[0m metadata              = {
                  [32m+[0m[0m createdBy = ""
                  [32m+[0m[0m createdOn = ""
                  [32m+[0m[0m updatedBy = ""
                  [32m+[0m[0m updatedOn = ""
                }
              [32m+[0m[0m nonComplianceMessages = [
                  [32m+[0m[0m {
                      [32m+[0m[0m message = "Azure Defender {enforcementMode} be enabled on SQL Servers and SQL Managed Instances."
                    },
                ]
              [32m+[0m[0m notScopes             = []
              [32m+[0m[0m overrides             = [90mnull[0m[0m
              [32m+[0m[0m parameters            = {}
              [32m+[0m[0m policyDefinitionId    = "/providers/Microsoft.Authorization/policySetDefinitions/9cb3cc7a-b39b-4b82-bc89-e5a5d9ff7b97"
              [32m+[0m[0m resourceSelectors     = [90mnull[0m[0m
            }
        }
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m ignore_casing                    = false
      [32m+[0m[0m ignore_missing_property          = true
      [32m+[0m[0m location                         = "swedencentral"
      [32m+[0m[0m name                             = "Deploy-MDFC-SqlAtp"
      [32m+[0m[0m output                           = (known after apply)
      [32m+[0m[0m parent_id                        = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m replace_triggers_external_values = [
          [32m+[0m[0m "/providers/Microsoft.Authorization/policySetDefinitions/9cb3cc7a-b39b-4b82-bc89-e5a5d9ff7b97",
          [32m+[0m[0m "swedencentral",
        ]
      [32m+[0m[0m retry                            = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
              [32m+[0m[0m "The policy definition specified in policy assignment '.+' is out of scope",
            ]
          [32m+[0m[0m interval_seconds     = 5
          [32m+[0m[0m max_interval_seconds = 30
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled        = true
      [32m+[0m[0m type                             = "Microsoft.Authorization/policyAssignments@2024-04-01"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "15m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_assignments["myroot2/Enable-DDoS-VNET"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_assignments" {
      [32m+[0m[0m body                             = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description           = "Protect your virtual networks against volumetric and protocol attacks with Azure DDoS Network Protection. For more information, visit https://aka.ms/ddosprotectiondocs."
              [32m+[0m[0m displayName           = "Virtual networks should be protected by Azure DDoS Network Protection"
              [32m+[0m[0m enforcementMode       = "Default"
              [32m+[0m[0m metadata              = {
                  [32m+[0m[0m createdBy = ""
                  [32m+[0m[0m createdOn = ""
                  [32m+[0m[0m updatedBy = ""
                  [32m+[0m[0m updatedOn = ""
                }
              [32m+[0m[0m nonComplianceMessages = [90mnull[0m[0m
              [32m+[0m[0m notScopes             = []
              [32m+[0m[0m overrides             = [90mnull[0m[0m
              [32m+[0m[0m parameters            = {
                  [32m+[0m[0m ddosPlan = {
                      [32m+[0m[0m value = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/placeholder/providers/Microsoft.Network/ddosProtectionPlans/placeholder"
                    }
                  [32m+[0m[0m effect   = {
                      [32m+[0m[0m value = "Modify"
                    }
                }
              [32m+[0m[0m policyDefinitionId    = "/providers/Microsoft.Authorization/policyDefinitions/94de2ad3-e0c1-4caf-ad78-5d47bbc83d3d"
              [32m+[0m[0m resourceSelectors     = [90mnull[0m[0m
            }
        }
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m ignore_casing                    = false
      [32m+[0m[0m ignore_missing_property          = true
      [32m+[0m[0m location                         = "swedencentral"
      [32m+[0m[0m name                             = "Enable-DDoS-VNET"
      [32m+[0m[0m output                           = (known after apply)
      [32m+[0m[0m parent_id                        = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m replace_triggers_external_values = [
          [32m+[0m[0m "/providers/Microsoft.Authorization/policyDefinitions/94de2ad3-e0c1-4caf-ad78-5d47bbc83d3d",
          [32m+[0m[0m "swedencentral",
        ]
      [32m+[0m[0m retry                            = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
              [32m+[0m[0m "The policy definition specified in policy assignment '.+' is out of scope",
            ]
          [32m+[0m[0m interval_seconds     = 5
          [32m+[0m[0m max_interval_seconds = 30
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled        = true
      [32m+[0m[0m type                             = "Microsoft.Authorization/policyAssignments@2024-04-01"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "15m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_assignments["myroot2/Enforce-ACSB"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_assignments" {
      [32m+[0m[0m body                             = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description           = "This initiative assignment enables Azure Compute Security Baseline compliance auditing for Windows and Linux virtual machines."
              [32m+[0m[0m displayName           = "Enforce Azure Compute Security Baseline compliance auditing"
              [32m+[0m[0m enforcementMode       = "Default"
              [32m+[0m[0m metadata              = {
                  [32m+[0m[0m createdBy = ""
                  [32m+[0m[0m createdOn = ""
                  [32m+[0m[0m updatedBy = ""
                  [32m+[0m[0m updatedOn = ""
                }
              [32m+[0m[0m nonComplianceMessages = [
                  [32m+[0m[0m {
                      [32m+[0m[0m message = "Azure Compute Security Baseline compliance auditing {enforcementMode} be enforced."
                    },
                ]
              [32m+[0m[0m notScopes             = []
              [32m+[0m[0m overrides             = [90mnull[0m[0m
              [32m+[0m[0m parameters            = {}
              [32m+[0m[0m policyDefinitionId    = "/providers/Microsoft.Management/managementGroups/myroot2/providers/Microsoft.Authorization/policySetDefinitions/Enforce-ACSB"
              [32m+[0m[0m resourceSelectors     = [90mnull[0m[0m
            }
        }
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m ignore_casing                    = false
      [32m+[0m[0m ignore_missing_property          = true
      [32m+[0m[0m location                         = "swedencentral"
      [32m+[0m[0m name                             = "Enforce-ACSB"
      [32m+[0m[0m output                           = (known after apply)
      [32m+[0m[0m parent_id                        = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m replace_triggers_external_values = [
          [32m+[0m[0m "/providers/Microsoft.Management/managementGroups/myroot2/providers/Microsoft.Authorization/policySetDefinitions/Enforce-ACSB",
          [32m+[0m[0m "swedencentral",
        ]
      [32m+[0m[0m retry                            = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
              [32m+[0m[0m "The policy definition specified in policy assignment '.+' is out of scope",
            ]
          [32m+[0m[0m interval_seconds     = 5
          [32m+[0m[0m max_interval_seconds = 30
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled        = true
      [32m+[0m[0m type                             = "Microsoft.Authorization/policyAssignments@2024-04-01"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "15m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_assignments["myroot2/SQL"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_assignments" {
      [32m+[0m[0m body                             = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description           = "Require Microsoft Entra-only authentication for Azure SQL Database, disabling local authentication methods. This allows access exclusively via Microsoft Entra identities, enhancing security with modern authentication enhancements including MFA, SSO, and secret-less programmatic access with managed identities."
              [32m+[0m[0m displayName           = "Azure SQL Database should have Microsoft Entra-only authentication"
              [32m+[0m[0m enforcementMode       = "Default"
              [32m+[0m[0m metadata              = {
                  [32m+[0m[0m createdBy = ""
                  [32m+[0m[0m createdOn = ""
                  [32m+[0m[0m updatedBy = ""
                  [32m+[0m[0m updatedOn = ""
                }
              [32m+[0m[0m nonComplianceMessages = [
                  [32m+[0m[0m {
                      [32m+[0m[0m message = "This is not compliant"
                    },
                ]
              [32m+[0m[0m notScopes             = []
              [32m+[0m[0m overrides             = [90mnull[0m[0m
              [32m+[0m[0m parameters            = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m value = "Audit"
                    }
                }
              [32m+[0m[0m policyDefinitionId    = "/providers/Microsoft.Authorization/policyDefinitions/b3a22bc9-66de-45fb-98fa-00f5df42f41a"
              [32m+[0m[0m resourceSelectors     = [90mnull[0m[0m
            }
        }
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m ignore_casing                    = false
      [32m+[0m[0m ignore_missing_property          = true
      [32m+[0m[0m location                         = "swedencentral"
      [32m+[0m[0m name                             = "SQL"
      [32m+[0m[0m output                           = (known after apply)
      [32m+[0m[0m parent_id                        = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m replace_triggers_external_values = [
          [32m+[0m[0m "/providers/Microsoft.Authorization/policyDefinitions/b3a22bc9-66de-45fb-98fa-00f5df42f41a",
          [32m+[0m[0m "swedencentral",
        ]
      [32m+[0m[0m retry                            = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
              [32m+[0m[0m "The policy definition specified in policy assignment '.+' is out of scope",
            ]
          [32m+[0m[0m interval_seconds     = 5
          [32m+[0m[0m max_interval_seconds = 30
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled        = true
      [32m+[0m[0m type                             = "Microsoft.Authorization/policyAssignments@2024-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "15m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_assignments["myroot2/Update-Ring1"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_assignments" {
      [32m+[0m[0m body                             = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description           = "You can use Azure Update Manager in Azure to save recurring deployment schedules to install operating system updates for your Windows Server and Linux machines in Azure, in on-premises environments, and in other cloud environments connected using Azure Arc-enabled servers. This policy will also change the patch mode for the Azure Virtual Machine to 'AutomaticByPlatform'. See more: https://aka.ms/umc-scheduled-patching"
              [32m+[0m[0m displayName           = "Schedule recurring updates using Azure Update Manager - Ring 1 (Tuesday Midnight)"
              [32m+[0m[0m enforcementMode       = "Default"
              [32m+[0m[0m metadata              = {
                  [32m+[0m[0m createdBy = ""
                  [32m+[0m[0m createdOn = ""
                  [32m+[0m[0m updatedBy = ""
                  [32m+[0m[0m updatedOn = ""
                }
              [32m+[0m[0m nonComplianceMessages = [
                  [32m+[0m[0m {
                      [32m+[0m[0m message = "Azure Update Manager Update not applied"
                    },
                ]
              [32m+[0m[0m notScopes             = []
              [32m+[0m[0m overrides             = [90mnull[0m[0m
              [32m+[0m[0m parameters            = {
                  [32m+[0m[0m maintenanceConfigurationResourceId = {
                      [32m+[0m[0m value = ""
                    }
                  [32m+[0m[0m tagValues                          = {
                      [32m+[0m[0m value = [
                          [32m+[0m[0m {
                              [32m+[0m[0m key   = "Update Manager Policy"
                              [32m+[0m[0m value = "Ring1"
                            },
                        ]
                    }
                }
              [32m+[0m[0m policyDefinitionId    = "/providers/Microsoft.Authorization/policyDefinitions/ba0df93e-e4ac-479a-aac2-134bbae39a1a"
              [32m+[0m[0m resourceSelectors     = [90mnull[0m[0m
            }
        }
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m ignore_casing                    = false
      [32m+[0m[0m ignore_missing_property          = true
      [32m+[0m[0m location                         = "swedencentral"
      [32m+[0m[0m name                             = "Update-Ring1"
      [32m+[0m[0m output                           = (known after apply)
      [32m+[0m[0m parent_id                        = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m replace_triggers_external_values = [
          [32m+[0m[0m "/providers/Microsoft.Authorization/policyDefinitions/ba0df93e-e4ac-479a-aac2-134bbae39a1a",
          [32m+[0m[0m "swedencentral",
        ]
      [32m+[0m[0m retry                            = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
              [32m+[0m[0m "The policy definition specified in policy assignment '.+' is out of scope",
            ]
          [32m+[0m[0m interval_seconds     = 5
          [32m+[0m[0m max_interval_seconds = 30
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled        = true
      [32m+[0m[0m type                             = "Microsoft.Authorization/policyAssignments@2024-04-01"

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "15m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Append-AppService-httpsonly"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Appends the AppService sites object to ensure that  HTTPS only is enabled for  server/service authentication and protects data in transit from network layer eavesdropping attacks. Please note Append does not enforce compliance use then deny."
              [32m+[0m[0m displayName = "AppService append enable https only setting to enforce https setting."
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "App Service"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Append",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Append"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Web/sites"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m field     = "Microsoft.Web/sites/httpsOnly"
                              [32m+[0m[0m notequals = true
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = [
                          [32m+[0m[0m {
                              [32m+[0m[0m field = "Microsoft.Web/sites/httpsOnly"
                              [32m+[0m[0m value = true
                            },
                        ]
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Append-AppService-httpsonly"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Append-AppService-latestTLS"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Append the AppService sites object to ensure that min Tls version is set to required minimum TLS version. Please note Append does not enforce compliance use then deny."
              [32m+[0m[0m displayName = "AppService append sites with minimum TLS version to enforce."
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "App Service"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.2.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect        = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Append",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Append"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m minTlsVersion = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "1.3",
                          [32m+[0m[0m "1.2",
                          [32m+[0m[0m "1.0",
                          [32m+[0m[0m "1.1",
                        ]
                      [32m+[0m[0m defaultValue  = "1.2"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Select version  minimum TLS version for a  Web App config to enforce"
                          [32m+[0m[0m displayName = "Select version minimum TLS Web App config"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m exists = "true"
                              [32m+[0m[0m field  = "Microsoft.Web/sites/config/minTlsVersion"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m field = "Microsoft.Web/sites/config/minTlsVersion"
                              [32m+[0m[0m less  = "[parameters('minTlsVersion')]"
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = [
                          [32m+[0m[0m {
                              [32m+[0m[0m field = "Microsoft.Web/sites/config/minTlsVersion"
                              [32m+[0m[0m value = "[parameters('minTlsVersion')]"
                            },
                        ]
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Append-AppService-latestTLS"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Append-KV-SoftDelete"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "This policy enables you to ensure when a Key Vault is created with out soft delete enabled it will be added."
              [32m+[0m[0m displayName = "KeyVault SoftDelete should be enabled"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Key Vault"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {}
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m anyOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "Microsoft.KeyVault/vaults"
                                      [32m+[0m[0m field  = "type"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field     = "Microsoft.KeyVault/vaults/enableSoftDelete"
                                      [32m+[0m[0m notEquals = true
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = [
                          [32m+[0m[0m {
                              [32m+[0m[0m field = "Microsoft.KeyVault/vaults/enableSoftDelete"
                              [32m+[0m[0m value = true
                            },
                        ]
                      [32m+[0m[0m effect  = "append"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Append-KV-SoftDelete"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Append-Redis-disableNonSslPort"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Azure Cache for Redis Append and the enforcement that enableNonSslPort is disabled. Enables secure server to client by enforce  minimal Tls Version to secure the connection between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server."
              [32m+[0m[0m displayName = "Azure Cache for Redis Append and the enforcement that enableNonSslPort is disabled."
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Cache"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.1"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Append",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Append"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy minimum TLS version Azure Cache for Redis"
                          [32m+[0m[0m displayName = "Effect Azure Cache for Redis"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Cache/redis"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m anyOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Cache/Redis/enableNonSslPort"
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = [
                          [32m+[0m[0m {
                              [32m+[0m[0m field = "Microsoft.Cache/Redis/enableNonSslPort"
                              [32m+[0m[0m value = false
                            },
                        ]
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Append-Redis-disableNonSslPort"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Append-Redis-sslEnforcement"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Append a specific min TLS version requirement and enforce SSL on Azure Cache for Redis. Enables secure server to client by enforce  minimal Tls Version to secure the connection between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server."
              [32m+[0m[0m displayName = "Azure Cache for Redis Append a specific min TLS version requirement and enforce TLS."
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Cache"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect            = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Append",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Append"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy minimum TLS version Azure Cache for Redis"
                          [32m+[0m[0m displayName = "Effect Azure Cache for Redis"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m minimumTlsVersion = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "1.2",
                          [32m+[0m[0m "1.1",
                          [32m+[0m[0m "1.0",
                        ]
                      [32m+[0m[0m defaultValue  = "1.2"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Select version minimum TLS version Azure Cache for Redis to enforce"
                          [32m+[0m[0m displayName = "Select version for Redis server"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Cache/redis"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m anyOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field = "Microsoft.Cache/Redis/minimumTlsVersion"
                                      [32m+[0m[0m less  = "[parameters('minimumTlsVersion')]"
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = [
                          [32m+[0m[0m {
                              [32m+[0m[0m field = "Microsoft.Cache/Redis/minimumTlsVersion"
                              [32m+[0m[0m value = "[parameters('minimumTlsVersion')]"
                            },
                        ]
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Append-Redis-sslEnforcement"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Audit-AzureHybridBenefit"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Optimize cost by enabling Azure Hybrid Benefit. Leverage this Policy definition as a cost control to reveal Virtual Machines not using AHUB."
              [32m+[0m[0m displayName = "Audit AHUB for eligible VMs"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Cost Optimization"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Audit"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m field = "type"
                              [32m+[0m[0m in    = [
                                  [32m+[0m[0m "Microsoft.Compute/virtualMachines",
                                  [32m+[0m[0m "Microsoft.Compute/virtualMachineScaleSets",
                                ]
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "MicrosoftWindowsServer"
                              [32m+[0m[0m field  = "Microsoft.Compute/imagePublisher"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "WindowsServer"
                              [32m+[0m[0m field  = "Microsoft.Compute/imageOffer"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m anyOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field = "Microsoft.Compute/imageSKU"
                                      [32m+[0m[0m like  = "2008-R2-SP1*"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field = "Microsoft.Compute/imageSKU"
                                      [32m+[0m[0m like  = "2012-*"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field = "Microsoft.Compute/imageSKU"
                                      [32m+[0m[0m like  = "2016-*"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field = "Microsoft.Compute/imageSKU"
                                      [32m+[0m[0m like  = "2019-*"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field = "Microsoft.Compute/imageSKU"
                                      [32m+[0m[0m like  = "2022-*"
                                    },
                                ]
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m field     = "Microsoft.Compute/licenseType"
                              [32m+[0m[0m notEquals = "Windows_Server"
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Audit-AzureHybridBenefit"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Audit-Disks-UnusedResourcesCostOptimization"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Optimize cost by detecting unused but chargeable resources. Leverage this Policy definition as a cost control to reveal orphaned Disks that are driving cost."
              [32m+[0m[0m displayName = "Unused Disks driving cost should be avoided"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Cost Optimization"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Audit"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Compute/disks"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Unattached"
                              [32m+[0m[0m field  = "Microsoft.Compute/disks/diskState"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m allof = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field   = "name"
                                      [32m+[0m[0m notlike = "*-ASRReplica"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field   = "name"
                                      [32m+[0m[0m notlike = "ms-asr-*"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field   = "name"
                                      [32m+[0m[0m notlike = "asrseeddisk-*"
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Audit-Disks-UnusedResourcesCostOptimization"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Audit-MachineLearning-PrivateEndpointId"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Audit private endpoints that are created in other subscriptions and/or tenants for Azure Machine Learning."
              [32m+[0m[0m displayName = "Control private endpoint connections to Azure Machine Learning"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                    ]
                  [32m+[0m[0m category             = "Machine Learning"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Audit"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.MachineLearningServices/workspaces/privateEndpointConnections"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Approved"
                              [32m+[0m[0m field  = "Microsoft.MachineLearningServices/workspaces/privateEndpointConnections/privateLinkServiceConnectionState.status"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m anyOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m exists = false
                                      [32m+[0m[0m field  = "Microsoft.MachineLearningServices/workspaces/privateEndpointConnections/privateEndpoint.id"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m notEquals = "[subscription().subscriptionId]"
                                      [32m+[0m[0m value     = "[split(concat(field('Microsoft.MachineLearningServices/workspaces/privateEndpointConnections/privateEndpoint.id'), '//'), '/')[2]]"
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Audit-MachineLearning-PrivateEndpointId"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Audit-PrivateLinkDnsZones"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "This policy audits or denies, depending on assignment effect, the creation of a Private Link Private DNS Zones in the current scope, used in combination with policies that create centralized private DNS in connectivity subscription"
              [32m+[0m[0m displayName = "Audit or Deny the creation of Private Link Private DNS Zones"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Network"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.2"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect              = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Audit"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m privateLinkDnsZones = {
                      [32m+[0m[0m defaultValue = [
                          [32m+[0m[0m "privatelink.adf.azure.com",
                          [32m+[0m[0m "privatelink.afs.azure.net",
                          [32m+[0m[0m "privatelink.agentsvc.azure-automation.net",
                          [32m+[0m[0m "privatelink.analysis.windows.net",
                          [32m+[0m[0m "privatelink.api.azureml.ms",
                          [32m+[0m[0m "privatelink.azconfig.io",
                          [32m+[0m[0m "privatelink.azure-api.net",
                          [32m+[0m[0m "privatelink.azure-automation.net",
                          [32m+[0m[0m "privatelink.azurecr.io",
                          [32m+[0m[0m "privatelink.azure-devices.net",
                          [32m+[0m[0m "privatelink.azure-devices-provisioning.net",
                          [32m+[0m[0m "privatelink.azuredatabricks.net",
                          [32m+[0m[0m "privatelink.azurehdinsight.net",
                          [32m+[0m[0m "privatelink.azurehealthcareapis.com",
                          [32m+[0m[0m "privatelink.azurestaticapps.net",
                          [32m+[0m[0m "privatelink.azuresynapse.net",
                          [32m+[0m[0m "privatelink.azurewebsites.net",
                          [32m+[0m[0m "privatelink.batch.azure.com",
                          [32m+[0m[0m "privatelink.blob.core.windows.net",
                          [32m+[0m[0m "privatelink.cassandra.cosmos.azure.com",
                          [32m+[0m[0m "privatelink.cognitiveservices.azure.com",
                          [32m+[0m[0m "privatelink.database.windows.net",
                          [32m+[0m[0m "privatelink.datafactory.azure.net",
                          [32m+[0m[0m "privatelink.dev.azuresynapse.net",
                          [32m+[0m[0m "privatelink.dfs.core.windows.net",
                          [32m+[0m[0m "privatelink.dicom.azurehealthcareapis.com",
                          [32m+[0m[0m "privatelink.digitaltwins.azure.net",
                          [32m+[0m[0m "privatelink.directline.botframework.com",
                          [32m+[0m[0m "privatelink.documents.azure.com",
                          [32m+[0m[0m "privatelink.eventgrid.azure.net",
                          [32m+[0m[0m "privatelink.file.core.windows.net",
                          [32m+[0m[0m "privatelink.gremlin.cosmos.azure.com",
                          [32m+[0m[0m "privatelink.guestconfiguration.azure.com",
                          [32m+[0m[0m "privatelink.his.arc.azure.com",
                          [32m+[0m[0m "privatelink.kubernetesconfiguration.azure.com",
                          [32m+[0m[0m "privatelink.managedhsm.azure.net",
                          [32m+[0m[0m "privatelink.mariadb.database.azure.com",
                          [32m+[0m[0m "privatelink.media.azure.net",
                          [32m+[0m[0m "privatelink.mongo.cosmos.azure.com",
                          [32m+[0m[0m "privatelink.monitor.azure.com",
                          [32m+[0m[0m "privatelink.mysql.database.azure.com",
                          [32m+[0m[0m "privatelink.notebooks.azure.net",
                          [32m+[0m[0m "privatelink.ods.opinsights.azure.com",
                          [32m+[0m[0m "privatelink.oms.opinsights.azure.com",
                          [32m+[0m[0m "privatelink.pbidedicated.windows.net",
                          [32m+[0m[0m "privatelink.postgres.database.azure.com",
                          [32m+[0m[0m "privatelink.prod.migration.windowsazure.com",
                          [32m+[0m[0m "privatelink.purview.azure.com",
                          [32m+[0m[0m "privatelink.purviewstudio.azure.com",
                          [32m+[0m[0m "privatelink.queue.core.windows.net",
                          [32m+[0m[0m "privatelink.redis.cache.windows.net",
                          [32m+[0m[0m "privatelink.redisenterprise.cache.azure.net",
                          [32m+[0m[0m "privatelink.search.windows.net",
                          [32m+[0m[0m "privatelink.service.signalr.net",
                          [32m+[0m[0m "privatelink.servicebus.windows.net",
                          [32m+[0m[0m "privatelink.siterecovery.windowsazure.com",
                          [32m+[0m[0m "privatelink.sql.azuresynapse.net",
                          [32m+[0m[0m "privatelink.table.core.windows.net",
                          [32m+[0m[0m "privatelink.table.cosmos.azure.com",
                          [32m+[0m[0m "privatelink.tip1.powerquery.microsoft.com",
                          [32m+[0m[0m "privatelink.token.botframework.com",
                          [32m+[0m[0m "privatelink.vaultcore.azure.net",
                          [32m+[0m[0m "privatelink.web.core.windows.net",
                          [32m+[0m[0m "privatelink.webpubsub.azure.com",
                        ]
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "An array of Private Link Private DNS Zones to check for the existence of in the assigned scope."
                          [32m+[0m[0m displayName = "Private Link Private DNS Zones"
                        }
                      [32m+[0m[0m type         = "Array"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Network/privateDnsZones"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m field = "name"
                              [32m+[0m[0m in    = "[parameters('privateLinkDnsZones')]"
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Audit-PrivateLinkDnsZones"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Audit-PublicIpAddresses-UnusedResourcesCostOptimization"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Optimize cost by detecting unused but chargeable resources. Leverage this Policy definition as a cost control to reveal orphaned Public IP addresses that are driving cost."
              [32m+[0m[0m displayName = "Unused Public IP addresses driving cost should be avoided"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Cost Optimization"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Audit"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "microsoft.network/publicIpAddresses"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Static"
                              [32m+[0m[0m field  = "Microsoft.Network/publicIPAddresses/publicIPAllocationMethod"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m anyOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m exists = false
                                      [32m+[0m[0m field  = "Microsoft.Network/publicIPAddresses/natGateway"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = true
                                      [32m+[0m[0m value  = "[equals(length(field('Microsoft.Network/publicIPAddresses/natGateway')), 0)]"
                                    },
                                ]
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m anyOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m exists = false
                                      [32m+[0m[0m field  = "Microsoft.Network/publicIPAddresses/ipConfiguration"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = true
                                      [32m+[0m[0m value  = "[equals(length(field('Microsoft.Network/publicIPAddresses/ipConfiguration')), 0)]"
                                    },
                                ]
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m anyOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m exists = false
                                      [32m+[0m[0m field  = "Microsoft.Network/publicIPAddresses/publicIPPrefix"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = true
                                      [32m+[0m[0m value  = "[equals(length(field('Microsoft.Network/publicIPAddresses/publicIPPrefix')), 0)]"
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Audit-PublicIpAddresses-UnusedResourcesCostOptimization"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Audit-ServerFarms-UnusedResourcesCostOptimization"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Optimize cost by detecting unused but chargeable resources. Leverage this Policy definition as a cost control to reveal orphaned App Service plans that are driving cost."
              [32m+[0m[0m displayName = "Unused App Service plans driving cost should be avoided"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Cost Optimization"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Audit"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Web/serverfarms"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m field     = "Microsoft.Web/serverFarms/sku.tier"
                              [32m+[0m[0m notEquals = "Free"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = 0
                              [32m+[0m[0m field  = "Microsoft.Web/serverFarms/numberOfSites"
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Audit-ServerFarms-UnusedResourcesCostOptimization"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Audit-Tags-Mandatory"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Audits resources to ensure they have required tags based on tag array. Does not apply to resource groups."
              [32m+[0m[0m displayName = "Audit for mandatory tags on resources"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Tags"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect        = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Audit"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m mandatoryTags = {
                      [32m+[0m[0m defaultValue = [
                          [32m+[0m[0m "owner",
                          [32m+[0m[0m "costcenter",
                        ]
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "Array of mandatory tags that must be present on the resource group. The array should contain semicolon separated list of the tag names."
                          [32m+[0m[0m displayName = "Array of mandatory tags"
                        }
                      [32m+[0m[0m type         = "Array"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m not = {
                          [32m+[0m[0m count  = {
                              [32m+[0m[0m name  = "tagcount"
                              [32m+[0m[0m value = "[parameters('mandatoryTags')]"
                              [32m+[0m[0m where = {
                                  [32m+[0m[0m containsKey = "[current('tagcount')]"
                                  [32m+[0m[0m field       = "tags"
                                }
                            }
                          [32m+[0m[0m equals = "[length(parameters('mandatoryTags'))]"
                        }
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Audit-Tags-Mandatory"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Audit-Tags-Mandatory-Rg"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Audits resource groups to ensure they have required tags based on tag array."
              [32m+[0m[0m displayName = "Audit for mandatory tags on resource groups"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Tags"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect        = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Audit"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m mandatoryTags = {
                      [32m+[0m[0m defaultValue = [
                          [32m+[0m[0m "owner",
                          [32m+[0m[0m "costcenter",
                        ]
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "Array of mandatory tags that must be present on the resource group. The array should contain semicolon separated list of the tag names."
                          [32m+[0m[0m displayName = "Array of mandatory tags"
                        }
                      [32m+[0m[0m type         = "Array"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Resources/subscriptions/resourceGroups"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m anyOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m not = {
                                          [32m+[0m[0m count  = {
                                              [32m+[0m[0m name  = "tagcount"
                                              [32m+[0m[0m value = "[parameters('mandatoryTags')]"
                                              [32m+[0m[0m where = {
                                                  [32m+[0m[0m containsKey = "[current('tagcount')]"
                                                  [32m+[0m[0m field       = "tags"
                                                }
                                            }
                                          [32m+[0m[0m equals = "[length(parameters('mandatoryTags'))]"
                                        }
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m not = {
                                          [32m+[0m[0m count  = {
                                              [32m+[0m[0m name  = "tagnullcount"
                                              [32m+[0m[0m value = "[parameters('mandatoryTags')]"
                                              [32m+[0m[0m where = {
                                                  [32m+[0m[0m notMatch = ""
                                                  [32m+[0m[0m value    = "[resourceGroup().tags[current('tagnullcount')]]"
                                                }
                                            }
                                          [32m+[0m[0m equals = "[length(parameters('mandatoryTags'))]"
                                        }
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Audit-Tags-Mandatory-Rg"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-AA-child-resources"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "This policy denies the creation of child resources on the Automation Account"
              [32m+[0m[0m displayName = "No child resources in Automation Account"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Automation"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m field = "type"
                              [32m+[0m[0m in    = [
                                  [32m+[0m[0m "Microsoft.Automation/automationAccounts/runbooks",
                                  [32m+[0m[0m "Microsoft.Automation/automationAccounts/variables",
                                  [32m+[0m[0m "Microsoft.Automation/automationAccounts/modules",
                                  [32m+[0m[0m "Microsoft.Automation/automationAccounts/credentials",
                                  [32m+[0m[0m "Microsoft.Automation/automationAccounts/connections",
                                  [32m+[0m[0m "Microsoft.Automation/automationAccounts/certificates",
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-AA-child-resources"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-APIM-TLS"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Azure API Management service should use TLS version 1.2"
              [32m+[0m[0m displayName = "API Management services should use TLS version 1.2"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "API Management"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.ApiManagement/service"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m anyOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m greater = 0
                                      [32m+[0m[0m value   = "[indexof(toLower(string(field('Microsoft.ApiManagement/service/customProperties'))), '\"microsoft.windowsazure.apimanagement.gateway.security.protocols.tls10\":\"true\"')]"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m greater = 0
                                      [32m+[0m[0m value   = "[indexof(toLower(string(field('Microsoft.ApiManagement/service/customProperties'))), '\"microsoft.windowsazure.apimanagement.gateway.security.protocols.tls10\":true')]"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m greater = 0
                                      [32m+[0m[0m value   = "[indexof(toLower(string(field('Microsoft.ApiManagement/service/customProperties'))), '\"microsoft.windowsazure.apimanagement.gateway.security.protocols.tls11\":\"true\"')]"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m greater = 0
                                      [32m+[0m[0m value   = "[indexof(toLower(string(field('Microsoft.ApiManagement/service/customProperties'))), '\"microsoft.windowsazure.apimanagement.gateway.security.protocols.tls11\":true')]"
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-APIM-TLS"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-AppGW-Without-WAF"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "This policy enables you to restrict that Application Gateways is always deployed with WAF enabled"
              [32m+[0m[0m displayName = "Application Gateway should be deployed with WAF enabled"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Network"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Network/applicationGateways"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m field     = "Microsoft.Network/applicationGateways/sku.name"
                              [32m+[0m[0m notequals = "WAF_v2"
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-AppGW-Without-WAF"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-AppGw-Without-Tls"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "This policy enables you to restrict that Application Gateways is always deployed with predefined Microsoft policy that is using TLS version 1.2"
              [32m+[0m[0m displayName = "Application Gateway should be deployed with predefined Microsoft policy that is using TLS version 1.2"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Network"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect               = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m predefinedPolicyName = {
                      [32m+[0m[0m defaultValue = [
                          [32m+[0m[0m "AppGwSslPolicy20220101",
                          [32m+[0m[0m "AppGwSslPolicy20170401S",
                          [32m+[0m[0m "AppGwSslPolicy20220101S",
                        ]
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "Predefined policy name"
                          [32m+[0m[0m displayName = "Predefined policy name"
                        }
                      [32m+[0m[0m type         = "array"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Network/applicationGateways"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m anyOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field     = "Microsoft.Network/applicationGateways/sslPolicy.policyType"
                                      [32m+[0m[0m notEquals = "Predefined"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m exists = "false"
                                      [32m+[0m[0m field  = "Microsoft.Network/applicationGateways/sslPolicy.policyType"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field = "Microsoft.Network/applicationGateways/sslPolicy.policyName"
                                      [32m+[0m[0m notIn = "[parameters('predefinedPolicyName')]"
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-AppGw-Without-Tls"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-AppService-without-BYOC"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "App Service (including Logic apps and Function apps) must use certificates stored in Key Vault"
              [32m+[0m[0m displayName = "App Service certificates must be stored in Key Vault"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "App Service"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Audit"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Web/certificates"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m anyOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m exists = "false"
                                      [32m+[0m[0m field  = "Microsoft.Web/certificates/keyVaultId"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m exists = "false"
                                      [32m+[0m[0m field  = "Microsoft.Web/certificates/keyVaultSecretName"
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-AppService-without-BYOC"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-AppServiceApiApp-http"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Use of HTTPS ensures server/service authentication and protects data in transit from network layer eavesdropping attacks."
              [32m+[0m[0m displayName = "API App should only be accessible over HTTPS"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "App Service"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Disabled",
                          [32m+[0m[0m "Deny",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Web/sites"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m field = "kind"
                              [32m+[0m[0m like  = "*api"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "false"
                              [32m+[0m[0m field  = "Microsoft.Web/sites/httpsOnly"
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-AppServiceApiApp-http"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-AppServiceFunctionApp-http"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Use of HTTPS ensures server/service authentication and protects data in transit from network layer eavesdropping attacks."
              [32m+[0m[0m displayName = "Function App should only be accessible over HTTPS"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "App Service"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Disabled",
                          [32m+[0m[0m "Deny",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Web/sites"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m field = "kind"
                              [32m+[0m[0m like  = "functionapp*"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "false"
                              [32m+[0m[0m field  = "Microsoft.Web/sites/httpsOnly"
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-AppServiceFunctionApp-http"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-AppServiceWebApp-http"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Use of HTTPS ensures server/service authentication and protects data in transit from network layer eavesdropping attacks."
              [32m+[0m[0m displayName = "Web Application should only be accessible over HTTPS"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "App Service"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Disabled",
                          [32m+[0m[0m "Deny",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Web/sites"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m field = "kind"
                              [32m+[0m[0m like  = "app*"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "false"
                              [32m+[0m[0m field  = "Microsoft.Web/sites/httpsOnly"
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-AppServiceWebApp-http"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-AzFw-Without-Policy"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "This policy denies the creation of Azure Firewall without a default Firewall Policy."
              [32m+[0m[0m displayName = "Azure Firewall should have a default Firewall Policy"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Network"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Network/azureFirewalls"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m exists = "false"
                              [32m+[0m[0m field  = "Microsoft.Network/azureFirewalls/firewallPolicy.id"
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-AzFw-Without-Policy"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-CognitiveServices-NetworkAcls"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Azure Cognitive Services should not allow adding individual IPs or virtual network rules to the service-level firewall. Enable this to restrict inbound network access and enforce the usage of private endpoints."
              [32m+[0m[0m displayName = "Network ACLs should be restricted for Cognitive Services"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Cognitive Services"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.CognitiveServices/accounts"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m anyOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m count   = {
                                          [32m+[0m[0m field = "Microsoft.CognitiveServices/accounts/networkAcls.ipRules[*]"
                                        }
                                      [32m+[0m[0m greater = 0
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m count   = {
                                          [32m+[0m[0m field = "Microsoft.CognitiveServices/accounts/networkAcls.virtualNetworkRules[*]"
                                        }
                                      [32m+[0m[0m greater = 0
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-CognitiveServices-NetworkAcls"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-CognitiveServices-Resource-Kinds"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Azure Cognitive Services should only create explicit allowed kinds."
              [32m+[0m[0m displayName = "Only explicit kinds for Cognitive Services should be allowed"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Cognitive Services"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m allowedKinds = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "AnomalyDetector",
                          [32m+[0m[0m "ComputerVision",
                          [32m+[0m[0m "CognitiveServices",
                          [32m+[0m[0m "ContentModerator",
                          [32m+[0m[0m "CustomVision.Training",
                          [32m+[0m[0m "CustomVision.Prediction",
                          [32m+[0m[0m "Face",
                          [32m+[0m[0m "FormRecognizer",
                          [32m+[0m[0m "ImmersiveReader",
                          [32m+[0m[0m "LUIS",
                          [32m+[0m[0m "Personalizer",
                          [32m+[0m[0m "SpeechServices",
                          [32m+[0m[0m "TextAnalytics",
                          [32m+[0m[0m "TextTranslation",
                          [32m+[0m[0m "OpenAI",
                        ]
                      [32m+[0m[0m defaultValue  = [
                          [32m+[0m[0m "AnomalyDetector",
                          [32m+[0m[0m "ComputerVision",
                          [32m+[0m[0m "CognitiveServices",
                          [32m+[0m[0m "ContentModerator",
                          [32m+[0m[0m "CustomVision.Training",
                          [32m+[0m[0m "CustomVision.Prediction",
                          [32m+[0m[0m "Face",
                          [32m+[0m[0m "FormRecognizer",
                          [32m+[0m[0m "ImmersiveReader",
                          [32m+[0m[0m "LUIS",
                          [32m+[0m[0m "Personalizer",
                          [32m+[0m[0m "SpeechServices",
                          [32m+[0m[0m "TextAnalytics",
                          [32m+[0m[0m "TextTranslation",
                          [32m+[0m[0m "OpenAI",
                        ]
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Select the allowed resource kinds to be used with Cognitive Services"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "array"
                    }
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.CognitiveServices/accounts"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m field = "kind"
                              [32m+[0m[0m notIn = "[parameters('allowedKinds')]"
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-CognitiveServices-Resource-Kinds"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-CognitiveServices-RestrictOutboundNetworkAccess"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Azure Cognitive Services allow restricting outbound network access. Enable this to limit outbound connectivity for the service."
              [32m+[0m[0m displayName = "Outbound network access should be restricted for Cognitive Services"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Cognitive Services"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.CognitiveServices/accounts"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m anyOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m exists = "false"
                                      [32m+[0m[0m field  = "Microsoft.CognitiveServices/accounts/restrictOutboundNetworkAccess"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field     = "Microsoft.CognitiveServices/accounts/restrictOutboundNetworkAccess"
                                      [32m+[0m[0m notEquals = true
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-CognitiveServices-RestrictOutboundNetworkAccess"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-Databricks-NoPublicIp"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Denies the deployment of workspaces that do not use the noPublicIp feature to host Databricks clusters without public IPs."
              [32m+[0m[0m displayName = "Deny public IPs for Databricks cluster"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                    ]
                  [32m+[0m[0m category             = "Databricks"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Disabled",
                          [32m+[0m[0m "Deny",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Databricks/workspaces"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m field     = "Microsoft.DataBricks/workspaces/parameters.enableNoPublicIp.value"
                              [32m+[0m[0m notEquals = true
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-Databricks-NoPublicIp"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-Databricks-Sku"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Enforces the use of Premium Databricks workspaces to make sure appropriate security features are available including Databricks Access Controls, Credential Passthrough and SCIM provisioning for Microsoft Entra ID."
              [32m+[0m[0m displayName = "Deny non-premium Databricks sku"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                    ]
                  [32m+[0m[0m category             = "Databricks"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Disabled",
                          [32m+[0m[0m "Deny",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Databricks/workspaces"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m field     = "Microsoft.DataBricks/workspaces/sku.name"
                              [32m+[0m[0m notEquals = "premium"
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-Databricks-Sku"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-Databricks-VirtualNetwork"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Enforces the use of vnet injection for Databricks workspaces."
              [32m+[0m[0m displayName = "Deny Databricks workspaces without Vnet injection"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                    ]
                  [32m+[0m[0m category             = "Databricks"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Disabled",
                          [32m+[0m[0m "Deny",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Databricks/workspaces"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m anyOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m exists = false
                                      [32m+[0m[0m field  = "Microsoft.DataBricks/workspaces/parameters.customVirtualNetworkId.value"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m exists = false
                                      [32m+[0m[0m field  = "Microsoft.DataBricks/workspaces/parameters.customPublicSubnetName.value"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m exists = false
                                      [32m+[0m[0m field  = "Microsoft.DataBricks/workspaces/parameters.customPrivateSubnetName.value"
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-Databricks-VirtualNetwork"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-EH-Premium-CMK"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Event Hub namespaces (Premium) should use a customer-managed key for encryption."
              [32m+[0m[0m displayName = "Event Hub namespaces (Premium) should use a customer-managed key for encryption"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Event Hub"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.EventHub/namespaces"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Premium"
                              [32m+[0m[0m field  = "Microsoft.EventHub/namespaces/sku.name"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m not = {
                                  [32m+[0m[0m equals = "Microsoft.Keyvault"
                                  [32m+[0m[0m field  = "Microsoft.EventHub/namespaces/encryption.keySource"
                                }
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-EH-Premium-CMK"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-EH-minTLS"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Event Hub namespaces should use a valid TLS version."
              [32m+[0m[0m displayName = "Event Hub namespaces should use a valid TLS version"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Event Hub"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect        = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m minTlsVersion = {
                      [32m+[0m[0m defaultValue = "1.2"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "Minimum TLS version to be used by Event Hub"
                          [32m+[0m[0m displayName = "Minimum TLS Version"
                        }
                      [32m+[0m[0m type         = "string"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.EventHub/namespaces"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m anyOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field = "Microsoft.EventHub/namespaces/minimumTlsVersion"
                                      [32m+[0m[0m less  = "[parameters('minTlsVersion')]"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m exists = "false"
                                      [32m+[0m[0m field  = "Microsoft.EventHub/namespaces/minimumTlsVersion"
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-EH-minTLS"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-FileServices-InsecureAuth"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "This policy denies the use of insecure authentication methods (NTLMv2) when using File Services on a storage account."
              [32m+[0m[0m displayName = "File Services with insecure authentication methods should be denied"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Storage"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect                = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "The effect determines what happens when the policy rule is evaluated to match"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m notAllowedAuthMethods = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "NTLMv2",
                          [32m+[0m[0m "Kerberos",
                        ]
                      [32m+[0m[0m defaultValue  = "NTLMv2"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "The list of channelEncryption not allowed."
                          [32m+[0m[0m displayName = "Authentication methods supported by server. Valid values are NTLMv2, Kerberos."
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m contains = "[parameters('notAllowedAuthMethods')]"
                              [32m+[0m[0m field    = "Microsoft.Storage/storageAccounts/fileServices/protocolSettings.smb.authenticationMethods"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Storage/storageAccounts/fileServices"
                              [32m+[0m[0m field  = "type"
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-FileServices-InsecureAuth"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-FileServices-InsecureKerberos"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "This policy denies the use of insecure Kerberos ticket encryption (RC4-HMAC) when using File Services on a storage account."
              [32m+[0m[0m displayName = "File Services with insecure Kerberos ticket encryption should be denied"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Storage"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect                             = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "The effect determines what happens when the policy rule is evaluated to match"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m notAllowedKerberosTicketEncryption = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "RC4-HMAC",
                          [32m+[0m[0m "AES-256",
                        ]
                      [32m+[0m[0m defaultValue  = "RC4-HMAC"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "The list of kerberosTicketEncryption not allowed."
                          [32m+[0m[0m displayName = "Kerberos ticket encryption supported by server. Valid values are RC4-HMAC, AES-256."
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Storage/storageAccounts/fileServices"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m contains = "[parameters('notAllowedKerberosTicketEncryption')]"
                              [32m+[0m[0m field    = "Microsoft.Storage/storageAccounts/fileServices/protocolSettings.smb.kerberosTicketEncryption"
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-FileServices-InsecureKerberos"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-FileServices-InsecureSmbChannel"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "This policy denies the use of insecure channel encryption (AES-128-CCM) when using File Services on a storage account."
              [32m+[0m[0m displayName = "File Services with insecure SMB channel encryption should be denied"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Storage"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect                      = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "The effect determines what happens when the policy rule is evaluated to match"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m notAllowedChannelEncryption = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "AES-128-CCM",
                          [32m+[0m[0m "AES-128-GCM",
                          [32m+[0m[0m "AES-256-GCM",
                        ]
                      [32m+[0m[0m defaultValue  = "AES-128-CCM"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "The list of channelEncryption not allowed."
                          [32m+[0m[0m displayName = "SMB channel encryption supported by server. Valid values are AES-128-CCM, AES-128-GCM, AES-256-GCM."
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Storage/storageAccounts/fileServices"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m contains = "[parameters('notAllowedChannelEncryption')]"
                              [32m+[0m[0m field    = "Microsoft.Storage/storageAccounts/fileServices/protocolSettings.smb.channelEncryption"
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-FileServices-InsecureSmbChannel"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-FileServices-InsecureSmbVersions"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "This policy denies the use of insecure versions of SMB (2.1 & 3.0) when using File Services on a storage account."
              [32m+[0m[0m displayName = "File Services with insecure SMB versions should be denied"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Storage"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m allowedSmbVersion = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "SMB2.1",
                          [32m+[0m[0m "SMB3.0",
                          [32m+[0m[0m "SMB3.1.1",
                        ]
                      [32m+[0m[0m defaultValue  = "SMB3.1.1"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "The allowed SMB version for maximum security"
                          [32m+[0m[0m displayName = "Allowed SMB Version"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m effect            = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "The effect determines what happens when the policy rule is evaluated to match"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Storage/storageAccounts/fileServices"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m not = {
                                  [32m+[0m[0m contains = "[parameters('allowedSmbVersion')]"
                                  [32m+[0m[0m field    = "Microsoft.Storage/storageAccounts/fileServices/protocolSettings.smb.versions"
                                }
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-FileServices-InsecureSmbVersions"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-LogicApp-Public-Network"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Disabling public network access improves security by ensuring that the Logic App is not exposed on the public internet. Creating private endpoints can limit exposure of a Logic App. Learn more at: https://aka.ms/app-service-private-endpoint."
              [32m+[0m[0m displayName = "Logic apps should disable public network access"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Logic Apps"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Web/sites"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m contains = "workflowapp"
                              [32m+[0m[0m field    = "kind"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m anyOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m exists = "false"
                                      [32m+[0m[0m field  = "Microsoft.Web/sites/publicNetworkAccess"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field     = "Microsoft.Web/sites/publicNetworkAccess"
                                      [32m+[0m[0m notEquals = "Disabled"
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-LogicApp-Public-Network"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-LogicApps-Without-Https"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Use of HTTPS ensures server/service authentication and protects data in transit from network layer eavesdropping attacks."
              [32m+[0m[0m displayName = "Logic app should only be accessible over HTTPS"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Logic Apps"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Web/sites"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m contains = "workflowapp"
                              [32m+[0m[0m field    = "kind"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m anyOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m exists = "false"
                                      [32m+[0m[0m field  = "Microsoft.Web/sites/httpsOnly"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "false"
                                      [32m+[0m[0m field  = "Microsoft.Web/sites/httpsOnly"
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-LogicApps-Without-Https"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-MachineLearning-Aks"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deny AKS cluster creation in Azure Machine Learning and enforce connecting to existing clusters."
              [32m+[0m[0m displayName = "Deny AKS cluster creation in Azure Machine Learning"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                    ]
                  [32m+[0m[0m category             = "Machine Learning"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Disabled",
                          [32m+[0m[0m "Deny",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.MachineLearningServices/workspaces/computes"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "AKS"
                              [32m+[0m[0m field  = "Microsoft.MachineLearningServices/workspaces/computes/computeType"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m anyOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m exists = false
                                      [32m+[0m[0m field  = "Microsoft.MachineLearningServices/workspaces/computes/resourceId"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = true
                                      [32m+[0m[0m value  = "[empty(field('Microsoft.MachineLearningServices/workspaces/computes/resourceId'))]"
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-MachineLearning-Aks"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-MachineLearning-Compute-SubnetId"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Enforce subnet connectivity for Azure Machine Learning compute clusters and compute instances."
              [32m+[0m[0m displayName = "Enforce subnet connectivity for Azure Machine Learning compute clusters and compute instances"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                    ]
                  [32m+[0m[0m category             = "Machine Learning"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Disabled",
                          [32m+[0m[0m "Deny",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.MachineLearningServices/workspaces/computes"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m field = "Microsoft.MachineLearningServices/workspaces/computes/computeType"
                              [32m+[0m[0m in    = [
                                  [32m+[0m[0m "AmlCompute",
                                  [32m+[0m[0m "ComputeInstance",
                                ]
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m anyOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m exists = false
                                      [32m+[0m[0m field  = "Microsoft.MachineLearningServices/workspaces/computes/subnet.id"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = true
                                      [32m+[0m[0m value  = "[empty(field('Microsoft.MachineLearningServices/workspaces/computes/subnet.id'))]"
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-MachineLearning-Compute-SubnetId"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-MachineLearning-Compute-VmSize"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Limit allowed vm sizes for Azure Machine Learning compute clusters and compute instances."
              [32m+[0m[0m displayName = "Limit allowed vm sizes for Azure Machine Learning compute clusters and compute instances"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                    ]
                  [32m+[0m[0m category             = "Budget"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m allowedVmSizes = {
                      [32m+[0m[0m defaultValue = [
                          [32m+[0m[0m "Standard_D1_v2",
                          [32m+[0m[0m "Standard_D2_v2",
                          [32m+[0m[0m "Standard_D3_v2",
                          [32m+[0m[0m "Standard_D4_v2",
                          [32m+[0m[0m "Standard_D11_v2",
                          [32m+[0m[0m "Standard_D12_v2",
                          [32m+[0m[0m "Standard_D13_v2",
                          [32m+[0m[0m "Standard_D14_v2",
                          [32m+[0m[0m "Standard_DS1_v2",
                          [32m+[0m[0m "Standard_DS2_v2",
                          [32m+[0m[0m "Standard_DS3_v2",
                          [32m+[0m[0m "Standard_DS4_v2",
                          [32m+[0m[0m "Standard_DS5_v2",
                          [32m+[0m[0m "Standard_DS11_v2",
                          [32m+[0m[0m "Standard_DS12_v2",
                          [32m+[0m[0m "Standard_DS13_v2",
                          [32m+[0m[0m "Standard_DS14_v2",
                          [32m+[0m[0m "Standard_M8-2ms",
                          [32m+[0m[0m "Standard_M8-4ms",
                          [32m+[0m[0m "Standard_M8ms",
                          [32m+[0m[0m "Standard_M16-4ms",
                          [32m+[0m[0m "Standard_M16-8ms",
                          [32m+[0m[0m "Standard_M16ms",
                          [32m+[0m[0m "Standard_M32-8ms",
                          [32m+[0m[0m "Standard_M32-16ms",
                          [32m+[0m[0m "Standard_M32ls",
                          [32m+[0m[0m "Standard_M32ms",
                          [32m+[0m[0m "Standard_M32ts",
                          [32m+[0m[0m "Standard_M64-16ms",
                          [32m+[0m[0m "Standard_M64-32ms",
                          [32m+[0m[0m "Standard_M64ls",
                          [32m+[0m[0m "Standard_M64ms",
                          [32m+[0m[0m "Standard_M64s",
                          [32m+[0m[0m "Standard_M128-32ms",
                          [32m+[0m[0m "Standard_M128-64ms",
                          [32m+[0m[0m "Standard_M128ms",
                          [32m+[0m[0m "Standard_M128s",
                          [32m+[0m[0m "Standard_M64",
                          [32m+[0m[0m "Standard_M64m",
                          [32m+[0m[0m "Standard_M128",
                          [32m+[0m[0m "Standard_M128m",
                          [32m+[0m[0m "Standard_D1",
                          [32m+[0m[0m "Standard_D2",
                          [32m+[0m[0m "Standard_D3",
                          [32m+[0m[0m "Standard_D4",
                          [32m+[0m[0m "Standard_D11",
                          [32m+[0m[0m "Standard_D12",
                          [32m+[0m[0m "Standard_D13",
                          [32m+[0m[0m "Standard_D14",
                          [32m+[0m[0m "Standard_DS15_v2",
                          [32m+[0m[0m "Standard_NV6",
                          [32m+[0m[0m "Standard_NV12",
                          [32m+[0m[0m "Standard_NV24",
                          [32m+[0m[0m "Standard_F2s_v2",
                          [32m+[0m[0m "Standard_F4s_v2",
                          [32m+[0m[0m "Standard_F8s_v2",
                          [32m+[0m[0m "Standard_F16s_v2",
                          [32m+[0m[0m "Standard_F32s_v2",
                          [32m+[0m[0m "Standard_F64s_v2",
                          [32m+[0m[0m "Standard_F72s_v2",
                          [32m+[0m[0m "Standard_NC6s_v3",
                          [32m+[0m[0m "Standard_NC12s_v3",
                          [32m+[0m[0m "Standard_NC24rs_v3",
                          [32m+[0m[0m "Standard_NC24s_v3",
                          [32m+[0m[0m "Standard_NC6",
                          [32m+[0m[0m "Standard_NC12",
                          [32m+[0m[0m "Standard_NC24",
                          [32m+[0m[0m "Standard_NC24r",
                          [32m+[0m[0m "Standard_ND6s",
                          [32m+[0m[0m "Standard_ND12s",
                          [32m+[0m[0m "Standard_ND24rs",
                          [32m+[0m[0m "Standard_ND24s",
                          [32m+[0m[0m "Standard_NC6s_v2",
                          [32m+[0m[0m "Standard_NC12s_v2",
                          [32m+[0m[0m "Standard_NC24rs_v2",
                          [32m+[0m[0m "Standard_NC24s_v2",
                          [32m+[0m[0m "Standard_ND40rs_v2",
                          [32m+[0m[0m "Standard_NV12s_v3",
                          [32m+[0m[0m "Standard_NV24s_v3",
                          [32m+[0m[0m "Standard_NV48s_v3",
                        ]
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "Specifies the allowed VM Sizes for Aml Compute Clusters and Instances"
                          [32m+[0m[0m displayName = "Allowed VM Sizes for Aml Compute Clusters and Instances"
                        }
                      [32m+[0m[0m type         = "Array"
                    }
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Disabled",
                          [32m+[0m[0m "Deny",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.MachineLearningServices/workspaces/computes"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m field = "Microsoft.MachineLearningServices/workspaces/computes/computeType"
                              [32m+[0m[0m in    = [
                                  [32m+[0m[0m "AmlCompute",
                                  [32m+[0m[0m "ComputeInstance",
                                ]
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m field = "Microsoft.MachineLearningServices/workspaces/computes/vmSize"
                              [32m+[0m[0m notIn = "[parameters('allowedVmSizes')]"
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-MachineLearning-Compute-VmSize"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-MachineLearning-ComputeCluster-RemoteLoginPortPublicAccess"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deny public access of Azure Machine Learning clusters via SSH."
              [32m+[0m[0m displayName = "Deny public access of Azure Machine Learning clusters via SSH"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                    ]
                  [32m+[0m[0m category             = "Machine Learning"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Disabled",
                          [32m+[0m[0m "Deny",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.MachineLearningServices/workspaces/computes"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "AmlCompute"
                              [32m+[0m[0m field  = "Microsoft.MachineLearningServices/workspaces/computes/computeType"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m anyOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m exists = false
                                      [32m+[0m[0m field  = "Microsoft.MachineLearningServices/workspaces/computes/remoteLoginPortPublicAccess"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field     = "Microsoft.MachineLearningServices/workspaces/computes/remoteLoginPortPublicAccess"
                                      [32m+[0m[0m notEquals = "Disabled"
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-MachineLearning-ComputeCluster-RemoteLoginPortPublicAccess"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-MachineLearning-ComputeCluster-Scale"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Enforce scale settings for Azure Machine Learning compute clusters."
              [32m+[0m[0m displayName = "Enforce scale settings for Azure Machine Learning compute clusters"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                    ]
                  [32m+[0m[0m category             = "Budget"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect                                  = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Disabled",
                          [32m+[0m[0m "Deny",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m maxNodeCount                            = {
                      [32m+[0m[0m defaultValue = 10
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "Specifies the maximum node count of AML Clusters"
                          [32m+[0m[0m displayName = "Maximum Node Count"
                        }
                      [32m+[0m[0m type         = "Integer"
                    }
                  [32m+[0m[0m maxNodeIdleTimeInSecondsBeforeScaleDown = {
                      [32m+[0m[0m defaultValue = 900
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "Specifies the maximum node idle time in seconds before scaledown"
                          [32m+[0m[0m displayName = "Maximum Node Idle Time in Seconds Before Scaledown"
                        }
                      [32m+[0m[0m type         = "Integer"
                    }
                  [32m+[0m[0m minNodeCount                            = {
                      [32m+[0m[0m defaultValue = 0
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "Specifies the minimum node count of AML Clusters"
                          [32m+[0m[0m displayName = "Minimum Node Count"
                        }
                      [32m+[0m[0m type         = "Integer"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.MachineLearningServices/workspaces/computes"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "AmlCompute"
                              [32m+[0m[0m field  = "Microsoft.MachineLearningServices/workspaces/computes/computeType"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m anyOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field   = "Microsoft.MachineLearningServices/workspaces/computes/scaleSettings.maxNodeCount"
                                      [32m+[0m[0m greater = "[parameters('maxNodeCount')]"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field   = "Microsoft.MachineLearningServices/workspaces/computes/scaleSettings.minNodeCount"
                                      [32m+[0m[0m greater = "[parameters('minNodeCount')]"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m greater = "[parameters('maxNodeIdleTimeInSecondsBeforeScaleDown')]"
                                      [32m+[0m[0m value   = "[int(last(split(replace(replace(replace(replace(replace(replace(replace(field('Microsoft.MachineLearningServices/workspaces/computes/scaleSettings.nodeIdleTimeBeforeScaleDown'), 'P', '/'), 'Y', '/'), 'M', '/'), 'D', '/'), 'T', '/'), 'H', '/'), 'S', ''), '/')))]"
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-MachineLearning-ComputeCluster-Scale"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-MachineLearning-HbiWorkspace"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Enforces high business impact Azure Machine Learning workspaces."
              [32m+[0m[0m displayName = "Enforces high business impact Azure Machine Learning Workspaces"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                    ]
                  [32m+[0m[0m category             = "Machine Learning"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Disabled",
                          [32m+[0m[0m "Deny",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.MachineLearningServices/workspaces"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m anyOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m exists = false
                                      [32m+[0m[0m field  = "Microsoft.MachineLearningServices/workspaces/hbiWorkspace"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field     = "Microsoft.MachineLearningServices/workspaces/hbiWorkspace"
                                      [32m+[0m[0m notEquals = true
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-MachineLearning-HbiWorkspace"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-MachineLearning-PublicAccessWhenBehindVnet"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deny public access behind vnet to Azure Machine Learning workspaces."
              [32m+[0m[0m displayName = "Deny public access behind vnet to Azure Machine Learning workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                    ]
                  [32m+[0m[0m category             = "Machine Learning"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.1"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Disabled",
                          [32m+[0m[0m "Deny",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.MachineLearningServices/workspaces"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m anyOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m exists = false
                                      [32m+[0m[0m field  = "Microsoft.MachineLearningServices/workspaces/allowPublicAccessWhenBehindVnet"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field     = "Microsoft.MachineLearningServices/workspaces/allowPublicAccessWhenBehindVnet"
                                      [32m+[0m[0m notEquals = false
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-MachineLearning-PublicAccessWhenBehindVnet"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-MachineLearning-PublicNetworkAccess"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Denies public network access for Azure Machine Learning workspaces. Superseded by https://www.azadvertizer.net/azpolicyadvertizer/438c38d2-3772-465a-a9cc-7a6666a275ce.html"
              [32m+[0m[0m displayName = "[Deprecated] Azure Machine Learning should have disabled public network access"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                    ]
                  [32m+[0m[0m category             = "Machine Learning"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m supersededBy         = "438c38d2-3772-465a-a9cc-7a6666a275ce"
                  [32m+[0m[0m version              = "1.0.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Disabled",
                          [32m+[0m[0m "Deny",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.MachineLearningServices/workspaces"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m field     = "Microsoft.MachineLearningServices/workspaces/publicNetworkAccess"
                              [32m+[0m[0m notEquals = "Disabled"
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-MachineLearning-PublicNetworkAccess"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-MgmtPorts-From-Internet"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "This policy denies any network security rule that allows management port access from the Internet, by default blocking SSH/RDP ports."
              [32m+[0m[0m displayName = "Management port access from the Internet should be blocked"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Network"
                  [32m+[0m[0m replacesPolicy       = "Deny-RDP-From-Internet"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "2.1.1"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m ports  = {
                      [32m+[0m[0m defaultValue = [
                          [32m+[0m[0m "22",
                          [32m+[0m[0m "3389",
                        ]
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "Ports to be blocked"
                          [32m+[0m[0m displayName = "Ports"
                        }
                      [32m+[0m[0m type         = "Array"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m anyOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "Microsoft.Network/networkSecurityGroups/securityRules"
                                      [32m+[0m[0m field  = "type"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m allOf = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m equals = "Allow"
                                              [32m+[0m[0m field  = "Microsoft.Network/networkSecurityGroups/securityRules/access"
                                            },
                                          [32m+[0m[0m {
                                              [32m+[0m[0m equals = "Inbound"
                                              [32m+[0m[0m field  = "Microsoft.Network/networkSecurityGroups/securityRules/direction"
                                            },
                                          [32m+[0m[0m {
                                              [32m+[0m[0m anyOf = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m equals = "*"
                                                      [32m+[0m[0m field  = "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m field = "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange"
                                                      [32m+[0m[0m in    = "[parameters('ports')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m count   = {
                                                          [32m+[0m[0m value = "[parameters('ports')]"
                                                          [32m+[0m[0m where = {
                                                              [32m+[0m[0m equals = "true"
                                                              [32m+[0m[0m value  = "[if(and(not(empty(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange'))), contains(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange'),'-')), and(lessOrEquals(int(first(split(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange'), '-'))),int(current())),greaterOrEquals(int(last(split(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange'), '-'))),int(current()))), 'false')]"
                                                            }
                                                        }
                                                      [32m+[0m[0m greater = 0
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m count   = {
                                                          [32m+[0m[0m name  = "ports"
                                                          [32m+[0m[0m value = "[parameters('ports')]"
                                                          [32m+[0m[0m where = {
                                                              [32m+[0m[0m count   = {
                                                                  [32m+[0m[0m field = "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]"
                                                                  [32m+[0m[0m where = {
                                                                      [32m+[0m[0m equals = "true"
                                                                      [32m+[0m[0m value  = "[if(and(not(empty(current('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]'))), contains(current('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]'),'-')), and(lessOrEquals(int(first(split(current('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]'), '-'))),int(current('ports'))),greaterOrEquals(int(last(split(current('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]'), '-'))),int(current('ports')))) , 'false')]"
                                                                    }
                                                                }
                                                              [32m+[0m[0m greater = 0
                                                            }
                                                        }
                                                      [32m+[0m[0m greater = 0
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m not = {
                                                          [32m+[0m[0m field     = "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]"
                                                          [32m+[0m[0m notEquals = "*"
                                                        }
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m not = {
                                                          [32m+[0m[0m field = "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]"
                                                          [32m+[0m[0m notIn = "[parameters('ports')]"
                                                        }
                                                    },
                                                ]
                                            },
                                          [32m+[0m[0m {
                                              [32m+[0m[0m anyOf = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m equals = "*"
                                                      [32m+[0m[0m field  = "Microsoft.Network/networkSecurityGroups/securityRules/sourceAddressPrefix"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m equals = "Internet"
                                                      [32m+[0m[0m field  = "Microsoft.Network/networkSecurityGroups/securityRules/sourceAddressPrefix"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m not = {
                                                          [32m+[0m[0m field     = "Microsoft.Network/networkSecurityGroups/securityRules/sourceAddressPrefixes[*]"
                                                          [32m+[0m[0m notEquals = "*"
                                                        }
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m not = {
                                                          [32m+[0m[0m field     = "Microsoft.Network/networkSecurityGroups/securityRules/sourceAddressPrefixes[*]"
                                                          [32m+[0m[0m notEquals = "Internet"
                                                        }
                                                    },
                                                ]
                                            },
                                        ]
                                    },
                                ]
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "Microsoft.Network/networkSecurityGroups"
                                      [32m+[0m[0m field  = "type"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m count   = {
                                          [32m+[0m[0m field = "Microsoft.Network/networkSecurityGroups/securityRules[*]"
                                          [32m+[0m[0m where = {
                                              [32m+[0m[0m allOf = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m equals = "Allow"
                                                      [32m+[0m[0m field  = "Microsoft.Network/networkSecurityGroups/securityRules[*].access"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m equals = "Inbound"
                                                      [32m+[0m[0m field  = "Microsoft.Network/networkSecurityGroups/securityRules[*].direction"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m anyOf = [
                                                          [32m+[0m[0m {
                                                              [32m+[0m[0m equals = "*"
                                                              [32m+[0m[0m field  = "Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRange"
                                                            },
                                                          [32m+[0m[0m {
                                                              [32m+[0m[0m field = "Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRange"
                                                              [32m+[0m[0m in    = "[parameters('ports')]"
                                                            },
                                                          [32m+[0m[0m {
                                                              [32m+[0m[0m count   = {
                                                                  [32m+[0m[0m name  = "ports"
                                                                  [32m+[0m[0m value = "[parameters('ports')]"
                                                                  [32m+[0m[0m where = {
                                                                      [32m+[0m[0m equals = "true"
                                                                      [32m+[0m[0m value  = "[if(and(not(empty(current('Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRange'))), contains(current('Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRange'),'-')), and(lessOrEquals(int(first(split(current('Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRange'), '-'))),int(current('ports'))),greaterOrEquals(int(last(split(current('Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRange'), '-'))),int(current('ports')))), 'false')]"
                                                                    }
                                                                }
                                                              [32m+[0m[0m greater = 0
                                                            },
                                                          [32m+[0m[0m {
                                                              [32m+[0m[0m count   = {
                                                                  [32m+[0m[0m name  = "ports"
                                                                  [32m+[0m[0m value = "[parameters('ports')]"
                                                                  [32m+[0m[0m where = {
                                                                      [32m+[0m[0m count   = {
                                                                          [32m+[0m[0m field = "Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRanges[*]"
                                                                          [32m+[0m[0m where = {
                                                                              [32m+[0m[0m equals = "true"
                                                                              [32m+[0m[0m value  = "[if(and(not(empty(current('Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRanges[*]'))), contains(current('Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRanges[*]'),'-')), and(lessOrEquals(int(first(split(current('Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRanges[*]'), '-'))),int(current('ports'))),greaterOrEquals(int(last(split(current('Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRanges[*]'), '-'))),int(current('ports')))) , 'false')]"
                                                                            }
                                                                        }
                                                                      [32m+[0m[0m greater = 0
                                                                    }
                                                                }
                                                              [32m+[0m[0m greater = 0
                                                            },
                                                          [32m+[0m[0m {
                                                              [32m+[0m[0m not = {
                                                                  [32m+[0m[0m field     = "Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRanges[*]"
                                                                  [32m+[0m[0m notEquals = "*"
                                                                }
                                                            },
                                                          [32m+[0m[0m {
                                                              [32m+[0m[0m not = {
                                                                  [32m+[0m[0m field = "Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRanges[*]"
                                                                  [32m+[0m[0m notIn = "[parameters('ports')]"
                                                                }
                                                            },
                                                        ]
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m anyOf = [
                                                          [32m+[0m[0m {
                                                              [32m+[0m[0m equals = "*"
                                                              [32m+[0m[0m field  = "Microsoft.Network/networkSecurityGroups/securityRules[*].sourceAddressPrefix"
                                                            },
                                                          [32m+[0m[0m {
                                                              [32m+[0m[0m equals = "Internet"
                                                              [32m+[0m[0m field  = "Microsoft.Network/networkSecurityGroups/securityRules[*].sourceAddressPrefix"
                                                            },
                                                          [32m+[0m[0m {
                                                              [32m+[0m[0m not = {
                                                                  [32m+[0m[0m field     = "Microsoft.Network/networkSecurityGroups/securityRules[*].sourceAddressPrefixes[*]"
                                                                  [32m+[0m[0m notEquals = "*"
                                                                }
                                                            },
                                                          [32m+[0m[0m {
                                                              [32m+[0m[0m not = {
                                                                  [32m+[0m[0m field     = "Microsoft.Network/networkSecurityGroups/securityRules[*].sourceAddressPrefixes[*]"
                                                                  [32m+[0m[0m notEquals = "Internet"
                                                                }
                                                            },
                                                        ]
                                                    },
                                                ]
                                            }
                                        }
                                      [32m+[0m[0m greater = 0
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-MgmtPorts-From-Internet"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-MySql-http"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Azure Database for MySQL supports connecting your Azure Database for MySQL server to client applications using Secure Sockets Layer (SSL). Enforcing SSL connections between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server."
              [32m+[0m[0m displayName = "MySQL database servers enforce SSL connections."
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "SQL"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect            = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Disabled",
                          [32m+[0m[0m "Deny",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m minimalTlsVersion = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "TLS1_2",
                          [32m+[0m[0m "TLS1_0",
                          [32m+[0m[0m "TLS1_1",
                          [32m+[0m[0m "TLSEnforcementDisabled",
                        ]
                      [32m+[0m[0m defaultValue  = "TLS1_2"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Select version  minimum TLS version Azure Database for MySQL server to enforce"
                          [32m+[0m[0m displayName = "Select version minimum TLS for MySQL server"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.DBforMySQL/servers"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m anyOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m exists = "false"
                                      [32m+[0m[0m field  = "Microsoft.DBforMySQL/servers/sslEnforcement"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field     = "Microsoft.DBforMySQL/servers/sslEnforcement"
                                      [32m+[0m[0m notEquals = "Enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field = "Microsoft.DBforMySQL/servers/minimalTlsVersion"
                                      [32m+[0m[0m less  = "[parameters('minimalTlsVersion')]"
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-MySql-http"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-PostgreSql-http"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Azure Database for PostgreSQL supports connecting your Azure Database for PostgreSQL server to client applications using Secure Sockets Layer (SSL). Enforcing SSL connections between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server."
              [32m+[0m[0m displayName = "PostgreSQL database servers enforce SSL connection."
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "SQL"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.1"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect            = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Disabled",
                          [32m+[0m[0m "Deny",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m minimalTlsVersion = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "TLS1_2",
                          [32m+[0m[0m "TLS1_0",
                          [32m+[0m[0m "TLS1_1",
                          [32m+[0m[0m "TLSEnforcementDisabled",
                        ]
                      [32m+[0m[0m defaultValue  = "TLS1_2"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Select version  minimum TLS version Azure Database for PostgreSQL server to enforce"
                          [32m+[0m[0m displayName = "Select version minimum TLS for PostgreSQL server"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.DBforPostgreSQL/servers"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m anyOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m exists = "false"
                                      [32m+[0m[0m field  = "Microsoft.DBforPostgreSQL/servers/sslEnforcement"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field     = "Microsoft.DBforPostgreSQL/servers/sslEnforcement"
                                      [32m+[0m[0m notEquals = "Enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field     = "Microsoft.DBforPostgreSQL/servers/minimalTlsVersion"
                                      [32m+[0m[0m notequals = "[parameters('minimalTlsVersion')]"
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-PostgreSql-http"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-Private-DNS-Zones"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "This policy denies the creation of a private DNS in the current scope, used in combination with policies that create centralized private DNS in connectivity subscription"
              [32m+[0m[0m displayName = "Deny the creation of private DNS"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Network"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.Network/privateDnsZones"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-Private-DNS-Zones"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-PublicEndpoint-MariaDB"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "This policy denies the creation of Maria DB accounts with exposed public endpoints. Superseded by https://www.azadvertizer.net/azpolicyadvertizer/fdccbe47-f3e3-4213-ad5d-ea459b2fa077.html"
              [32m+[0m[0m displayName = "[Deprecated] Public network access should be disabled for MariaDB"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "SQL"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m supersededBy         = "fdccbe47-f3e3-4213-ad5d-ea459b2fa077"
                  [32m+[0m[0m version              = "1.0.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.DBforMariaDB/servers"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m field     = "Microsoft.DBforMariaDB/servers/publicNetworkAccess"
                              [32m+[0m[0m notequals = "Disabled"
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-PublicEndpoint-MariaDB"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-PublicIP"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "[Deprecated] This policy denies creation of Public IPs under the assigned scope. Superseded by https://www.azadvertizer.net/azpolicyadvertizer/6c112d4e-5bc7-47ae-a041-ea2d9dccd749.html using appropriate assignment parameters."
              [32m+[0m[0m displayName = "[Deprecated] Deny the creation of public IP"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Network"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m supersededBy         = "6c112d4e-5bc7-47ae-a041-ea2d9dccd749"
                  [32m+[0m[0m version              = "1.0.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.Network/publicIPAddresses"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-PublicIP"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-RDP-From-Internet"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "This policy denies any network security rule that allows RDP access from Internet. This policy is superseded by https://www.azadvertizer.net/azpolicyadvertizer/Deny-MgmtPorts-From-Internet.html"
              [32m+[0m[0m displayName = "[Deprecated] RDP access from the Internet should be blocked"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Network"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m supersededBy         = "Deny-MgmtPorts-From-Internet"
                  [32m+[0m[0m version              = "1.0.1-deprecated"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Network/networkSecurityGroups/securityRules"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "Allow"
                                      [32m+[0m[0m field  = "Microsoft.Network/networkSecurityGroups/securityRules/access"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "Inbound"
                                      [32m+[0m[0m field  = "Microsoft.Network/networkSecurityGroups/securityRules/direction"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m anyOf = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m equals = "*"
                                              [32m+[0m[0m field  = "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange"
                                            },
                                          [32m+[0m[0m {
                                              [32m+[0m[0m equals = "3389"
                                              [32m+[0m[0m field  = "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange"
                                            },
                                          [32m+[0m[0m {
                                              [32m+[0m[0m equals = "true"
                                              [32m+[0m[0m value  = "[if(and(not(empty(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange'))), contains(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange'),'-')), and(lessOrEquals(int(first(split(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange'), '-'))),3389),greaterOrEquals(int(last(split(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange'), '-'))),3389)), 'false')]"
                                            },
                                          [32m+[0m[0m {
                                              [32m+[0m[0m count   = {
                                                  [32m+[0m[0m field = "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]"
                                                  [32m+[0m[0m where = {
                                                      [32m+[0m[0m equals = "true"
                                                      [32m+[0m[0m value  = "[if(and(not(empty(first(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]')))), contains(first(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]')),'-')), and(lessOrEquals(int(first(split(first(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]')), '-'))),3389),greaterOrEquals(int(last(split(first(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]')), '-'))),3389)) , 'false')]"
                                                    }
                                                }
                                              [32m+[0m[0m greater = 0
                                            },
                                          [32m+[0m[0m {
                                              [32m+[0m[0m not = {
                                                  [32m+[0m[0m field     = "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]"
                                                  [32m+[0m[0m notEquals = "*"
                                                }
                                            },
                                          [32m+[0m[0m {
                                              [32m+[0m[0m not = {
                                                  [32m+[0m[0m field     = "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]"
                                                  [32m+[0m[0m notEquals = "3389"
                                                }
                                            },
                                        ]
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m anyOf = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m equals = "*"
                                              [32m+[0m[0m field  = "Microsoft.Network/networkSecurityGroups/securityRules/sourceAddressPrefix"
                                            },
                                          [32m+[0m[0m {
                                              [32m+[0m[0m equals = "Internet"
                                              [32m+[0m[0m field  = "Microsoft.Network/networkSecurityGroups/securityRules/sourceAddressPrefix"
                                            },
                                          [32m+[0m[0m {
                                              [32m+[0m[0m not = {
                                                  [32m+[0m[0m field     = "Microsoft.Network/networkSecurityGroups/securityRules/sourceAddressPrefixes[*]"
                                                  [32m+[0m[0m notEquals = "*"
                                                }
                                            },
                                          [32m+[0m[0m {
                                              [32m+[0m[0m not = {
                                                  [32m+[0m[0m field     = "Microsoft.Network/networkSecurityGroups/securityRules/sourceAddressPrefixes[*]"
                                                  [32m+[0m[0m notEquals = "Internet"
                                                }
                                            },
                                        ]
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-RDP-From-Internet"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-Redis-http"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Audit enabling of only connections via SSL to Azure Cache for Redis. Validate both minimum TLS version and enableNonSslPort is disabled. Use of secure connections ensures authentication between the server and the service and protects data in transit from network layer attacks such as man-in-the-middle, eavesdropping, and session-hijacking"
              [32m+[0m[0m displayName = "Azure Cache for Redis only secure connections should be enabled"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Cache"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect            = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "The effect determines what happens when the policy rule is evaluated to match"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m minimumTlsVersion = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "1.2",
                          [32m+[0m[0m "1.1",
                          [32m+[0m[0m "1.0",
                        ]
                      [32m+[0m[0m defaultValue  = "1.2"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Select minimum TLS version for Azure Cache for Redis."
                          [32m+[0m[0m displayName = "Select minimum TLS version for Azure Cache for Redis."
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Cache/redis"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m anyOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Cache/Redis/enableNonSslPort"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field = "Microsoft.Cache/Redis/minimumTlsVersion"
                                      [32m+[0m[0m less  = "[parameters('minimumTlsVersion')]"
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-Redis-http"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-Service-Endpoints"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "This Policy will deny/audit Service Endpoints on subnets. Service Endpoints allows the network traffic to bypass Network appliances, such as the Azure Firewall."
              [32m+[0m[0m displayName = "Deny or Audit service endpoints on subnets"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Network"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Network/virtualNetworks/subnets"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m count   = {
                                  [32m+[0m[0m field = "Microsoft.Network/virtualNetworks/subnets/serviceEndpoints[*]"
                                  [32m+[0m[0m where = {
                                      [32m+[0m[0m exists = true
                                      [32m+[0m[0m field  = "Microsoft.Network/virtualNetworks/subnets/serviceEndpoints[*].service"
                                    }
                                }
                              [32m+[0m[0m greater = 0
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-Service-Endpoints"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-Sql-minTLS"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Setting minimal TLS version to 1.2 improves security by ensuring your Azure SQL Database can only be accessed from clients using TLS 1.2. Using versions of TLS less than 1.2 is not reccomended since they have well documented security vunerabilities."
              [32m+[0m[0m displayName = "Azure SQL Database should have the minimal TLS version set to the highest version"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "SQL"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect            = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Disabled",
                          [32m+[0m[0m "Deny",
                        ]
                      [32m+[0m[0m defaultValue  = "Audit"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m minimalTlsVersion = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "1.2",
                          [32m+[0m[0m "1.1",
                          [32m+[0m[0m "1.0",
                        ]
                      [32m+[0m[0m defaultValue  = "1.2"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Select version minimum TLS version SQL servers to enforce"
                          [32m+[0m[0m displayName = "Select version for SQL server"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Sql/servers"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m anyOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m exists = "false"
                                      [32m+[0m[0m field  = "Microsoft.Sql/servers/minimalTlsVersion"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field = "Microsoft.Sql/servers/minimalTlsVersion"
                                      [32m+[0m[0m less  = "[parameters('minimalTlsVersion')]"
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-Sql-minTLS"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-SqlMi-minTLS"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Setting minimal TLS version to 1.2 improves security by ensuring your SQL Managed Instance can only be accessed from clients using TLS 1.2. Using versions of TLS less than 1.2 is not recommended since they have well documented security vulnerabilities."
              [32m+[0m[0m displayName = "SQL Managed Instance should have the minimal TLS version set to the highest version"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "SQL"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect            = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Disabled",
                          [32m+[0m[0m "Deny",
                        ]
                      [32m+[0m[0m defaultValue  = "Audit"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m minimalTlsVersion = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "1.2",
                          [32m+[0m[0m "1.1",
                          [32m+[0m[0m "1.0",
                        ]
                      [32m+[0m[0m defaultValue  = "1.2"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Select version minimum TLS version SQL servers to enforce"
                          [32m+[0m[0m displayName = "Select version for SQL server"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Sql/managedInstances"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m anyOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m exists = "false"
                                      [32m+[0m[0m field  = "Microsoft.Sql/managedInstances/minimalTlsVersion"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field = "Microsoft.Sql/managedInstances/minimalTlsVersion"
                                      [32m+[0m[0m less  = "[parameters('minimalTlsVersion')]"
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-SqlMi-minTLS"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-Storage-ContainerDeleteRetentionPolicy"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Enforce container delete retention policies larger than seven days for storage account. Enable this for increased data loss protection."
              [32m+[0m[0m displayName = "Storage Accounts should use a container delete retention policy"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Storage"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect                            = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m minContainerDeleteRetentionInDays = {
                      [32m+[0m[0m defaultValue = 7
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "Specifies the minimum number of days for the container delete retention policy"
                          [32m+[0m[0m displayName = "Minimum Container Delete Retention in Days"
                        }
                      [32m+[0m[0m type         = "Integer"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Storage/storageAccounts/blobServices"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m anyOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m exists = false
                                      [32m+[0m[0m field  = "Microsoft.Storage/storageAccounts/blobServices/containerDeleteRetentionPolicy.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field     = "Microsoft.Storage/storageAccounts/blobServices/containerDeleteRetentionPolicy.enabled"
                                      [32m+[0m[0m notEquals = true
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field = "Microsoft.Storage/storageAccounts/blobServices/containerDeleteRetentionPolicy.days"
                                      [32m+[0m[0m less  = "[parameters('minContainerDeleteRetentionInDays')]"
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-Storage-ContainerDeleteRetentionPolicy"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-Storage-CopyScope"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Azure Storage accounts should restrict the allowed copy scope. Enforce this for increased data exfiltration protection."
              [32m+[0m[0m displayName = "Allowed Copy scope should be restricted for Storage Accounts"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Storage"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m allowedCopyScope = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "AAD",
                          [32m+[0m[0m "PrivateLink",
                        ]
                      [32m+[0m[0m defaultValue  = "AAD"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Specify the allowed copy scope."
                          [32m+[0m[0m displayName = "Allowed Copy Scope"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Storage/storageAccounts"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m anyOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m exists = "false"
                                      [32m+[0m[0m field  = "Microsoft.Storage/storageAccounts/allowedCopyScope"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field     = "Microsoft.Storage/storageAccounts/allowedCopyScope"
                                      [32m+[0m[0m notEquals = "[parameters('allowedCopyScope')]"
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-Storage-CopyScope"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-Storage-CorsRules"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deny CORS rules for storage account for increased data exfiltration protection and endpoint protection."
              [32m+[0m[0m displayName = "Storage Accounts should restrict CORS rules"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Storage"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m anyOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "Microsoft.Storage/storageAccounts/blobServices"
                                      [32m+[0m[0m field  = "type"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m count   = {
                                          [32m+[0m[0m field = "Microsoft.Storage/storageAccounts/blobServices/cors.corsRules[*]"
                                        }
                                      [32m+[0m[0m greater = 0
                                    },
                                ]
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "Microsoft.Storage/storageAccounts/fileServices"
                                      [32m+[0m[0m field  = "type"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m count   = {
                                          [32m+[0m[0m field = "Microsoft.Storage/storageAccounts/fileServices/cors.corsRules[*]"
                                        }
                                      [32m+[0m[0m greater = 0
                                    },
                                ]
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "Microsoft.Storage/storageAccounts/tableServices"
                                      [32m+[0m[0m field  = "type"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m count   = {
                                          [32m+[0m[0m field = "Microsoft.Storage/storageAccounts/tableServices/cors.corsRules[*]"
                                        }
                                      [32m+[0m[0m greater = 0
                                    },
                                ]
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "Microsoft.Storage/storageAccounts/queueServices"
                                      [32m+[0m[0m field  = "type"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m count   = {
                                          [32m+[0m[0m field = "Microsoft.Storage/storageAccounts/queueServices/cors.corsRules[*]"
                                        }
                                      [32m+[0m[0m greater = 0
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-Storage-CorsRules"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-Storage-LocalUser"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Azure Storage accounts should disable local users for features like SFTP. Enforce this for increased data exfiltration protection."
              [32m+[0m[0m displayName = "Local users should be restricted for Storage Accounts"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Storage"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Storage/storageAccounts"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m anyOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m exists = "false"
                                      [32m+[0m[0m field  = "Microsoft.Storage/storageAccounts/isLocalUserEnabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field     = "Microsoft.Storage/storageAccounts/isLocalUserEnabled"
                                      [32m+[0m[0m notEquals = false
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-Storage-LocalUser"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-Storage-NetworkAclsBypass"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Azure Storage accounts should restrict the bypass option for service-level network ACLs. Enforce this for increased data exfiltration protection."
              [32m+[0m[0m displayName = "Network ACL bypass option should be restricted for Storage Accounts"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Storage"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m allowedBypassOptions = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "None",
                          [32m+[0m[0m "Logging",
                          [32m+[0m[0m "Metrics",
                          [32m+[0m[0m "AzureServices",
                          [32m+[0m[0m "Logging, Metrics",
                          [32m+[0m[0m "Logging, AzureServices",
                          [32m+[0m[0m "Metrics, AzureServices",
                          [32m+[0m[0m "Logging, Metrics, AzureServices",
                          [32m+[0m[0m "Logging, Metrics, AzureServices",
                        ]
                      [32m+[0m[0m defaultValue  = [
                          [32m+[0m[0m "Logging",
                          [32m+[0m[0m "Metrics",
                          [32m+[0m[0m "AzureServices",
                          [32m+[0m[0m "Logging, Metrics",
                          [32m+[0m[0m "Logging, AzureServices",
                          [32m+[0m[0m "Metrics, AzureServices",
                          [32m+[0m[0m "Logging, Metrics, AzureServices",
                          [32m+[0m[0m "Logging, Metrics, AzureServices",
                        ]
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Specifies which options are allowed to bypass the vnet configuration"
                          [32m+[0m[0m displayName = "Allowed Bypass Options"
                        }
                      [32m+[0m[0m type          = "Array"
                    }
                  [32m+[0m[0m effect               = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Storage/storageAccounts"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m anyOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m exists = "false"
                                      [32m+[0m[0m field  = "Microsoft.Storage/storageAccounts/networkAcls.bypass"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field = "Microsoft.Storage/storageAccounts/networkAcls.bypass"
                                      [32m+[0m[0m notIn = "[parameters('allowedBypassOptions')]"
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-Storage-NetworkAclsBypass"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-Storage-NetworkAclsVirtualNetworkRules"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Azure Storage accounts should restrict the virtual network service-level network ACLs. Enforce this for increased data exfiltration protection."
              [32m+[0m[0m displayName = "Virtual network rules should be restricted for Storage Accounts"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Storage"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Storage/storageAccounts"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m count   = {
                                  [32m+[0m[0m field = "Microsoft.Storage/storageAccounts/networkAcls.virtualNetworkRules[*]"
                                }
                              [32m+[0m[0m greater = 0
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-Storage-NetworkAclsVirtualNetworkRules"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-Storage-ResourceAccessRulesResourceId"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Azure Storage accounts should restrict the resource access rule for service-level network ACLs to services from a specific Azure subscription. Enforce this for increased data exfiltration protection."
              [32m+[0m[0m displayName = "Resource Access Rules resource IDs should be restricted for Storage Accounts"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Storage"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Storage/storageAccounts"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m count   = {
                                  [32m+[0m[0m field = "Microsoft.Storage/storageAccounts/networkAcls.resourceAccessRules[*]"
                                }
                              [32m+[0m[0m greater = 0
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m count   = {
                                  [32m+[0m[0m field = "Microsoft.Storage/storageAccounts/networkAcls.resourceAccessRules[*]"
                                  [32m+[0m[0m where = {
                                      [32m+[0m[0m equals = "*"
                                      [32m+[0m[0m value  = "[split(current('Microsoft.Storage/storageAccounts/networkAcls.resourceAccessRules[*].resourceId'), '/')[2]]"
                                    }
                                }
                              [32m+[0m[0m greater = 0
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-Storage-ResourceAccessRulesResourceId"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-Storage-ResourceAccessRulesTenantId"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Azure Storage accounts should restrict the resource access rule for service-level network ACLs to service from the same AAD tenant. Enforce this for increased data exfiltration protection."
              [32m+[0m[0m displayName = "Resource Access Rules Tenants should be restricted for Storage Accounts"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Storage"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Storage/storageAccounts"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m count   = {
                                  [32m+[0m[0m field = "Microsoft.Storage/storageAccounts/networkAcls.resourceAccessRules[*]"
                                }
                              [32m+[0m[0m greater = 0
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m field     = "Microsoft.Storage/storageAccounts/networkAcls.resourceAccessRules[*].tenantId"
                              [32m+[0m[0m notEquals = "[subscription().tenantId]"
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-Storage-ResourceAccessRulesTenantId"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-Storage-SFTP"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "This policy denies the creation of Storage Accounts with SFTP enabled for Blob Storage."
              [32m+[0m[0m displayName = "Storage Accounts with SFTP enabled should be denied"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Storage"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "The effect determines what happens when the policy rule is evaluated to match"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Storage/storageAccounts"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "true"
                              [32m+[0m[0m field  = "Microsoft.Storage/storageAccounts/isSftpEnabled"
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-Storage-SFTP"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-Storage-ServicesEncryption"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Azure Storage accounts should enforce encryption for all storage services. Enforce this for increased encryption scope."
              [32m+[0m[0m displayName = "Encryption for storage services should be enforced for Storage Accounts"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Storage"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Storage/storageAccounts"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m anyOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m anyOf = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m exists = "false"
                                              [32m+[0m[0m field  = "Microsoft.Storage/storageAccounts/encryption.services.blob.enabled"
                                            },
                                          [32m+[0m[0m {
                                              [32m+[0m[0m field     = "Microsoft.Storage/storageAccounts/encryption.services.blob.enabled"
                                              [32m+[0m[0m notEquals = true
                                            },
                                        ]
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m anyOf = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m exists = "false"
                                              [32m+[0m[0m field  = "Microsoft.Storage/storageAccounts/encryption.services.file.enabled"
                                            },
                                          [32m+[0m[0m {
                                              [32m+[0m[0m field     = "Microsoft.Storage/storageAccounts/encryption.services.file.enabled"
                                              [32m+[0m[0m notEquals = true
                                            },
                                        ]
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m anyOf = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m exists = "false"
                                              [32m+[0m[0m field  = "Microsoft.Storage/storageAccounts/encryption.services.queue.keyType"
                                            },
                                          [32m+[0m[0m {
                                              [32m+[0m[0m field     = "Microsoft.Storage/storageAccounts/encryption.services.queue.keyType"
                                              [32m+[0m[0m notEquals = "Account"
                                            },
                                        ]
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m anyOf = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m exists = "false"
                                              [32m+[0m[0m field  = "Microsoft.Storage/storageAccounts/encryption.services.table.keyType"
                                            },
                                          [32m+[0m[0m {
                                              [32m+[0m[0m field     = "Microsoft.Storage/storageAccounts/encryption.services.table.keyType"
                                              [32m+[0m[0m notEquals = "Account"
                                            },
                                        ]
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-Storage-ServicesEncryption"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-Storage-minTLS"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Audit requirement of Secure transfer in your storage account. This policy is superseded by https://www.azadvertizer.net/azpolicyadvertizer/fe83a0eb-a853-422d-aac2-1bffd182c5d0.html and https://www.azadvertizer.net/azpolicyadvertizer/404c3081-a854-4457-ae30-26a93ef643f9.html"
              [32m+[0m[0m displayName = "[Deprecated] Storage Account set to minimum TLS and Secure transfer should be enabled"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Storage"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m supersededBy         = "fe83a0eb-a853-422d-aac2-1bffd182c5d0,404c3081-a854-4457-ae30-26a93ef643f9"
                  [32m+[0m[0m version              = "1.0.0-deprecated"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect            = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "The effect determines what happens when the policy rule is evaluated to match"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m minimumTlsVersion = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "TLS1_2",
                          [32m+[0m[0m "TLS1_1",
                          [32m+[0m[0m "TLS1_0",
                        ]
                      [32m+[0m[0m defaultValue  = "TLS1_2"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Select version  minimum TLS version on Azure Storage Account to enforce"
                          [32m+[0m[0m displayName = "Storage Account select minimum TLS version"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Storage/storageAccounts"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m anyOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m allOf = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m less  = "2019-04-01"
                                              [32m+[0m[0m value = "[requestContext().apiVersion]"
                                            },
                                          [32m+[0m[0m {
                                              [32m+[0m[0m exists = "false"
                                              [32m+[0m[0m field  = "Microsoft.Storage/storageAccounts/supportsHttpsTrafficOnly"
                                            },
                                        ]
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "false"
                                      [32m+[0m[0m field  = "Microsoft.Storage/storageAccounts/supportsHttpsTrafficOnly"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field     = "Microsoft.Storage/storageAccounts/minimumTlsVersion"
                                      [32m+[0m[0m notequals = "[parameters('minimumTlsVersion')]"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m exists = "false"
                                      [32m+[0m[0m field  = "Microsoft.Storage/storageAccounts/minimumTlsVersion"
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-Storage-minTLS"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-StorageAccount-CustomDomain"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "This policy denies the creation of Storage Accounts with custom domains assigned as communication cannot be encrypted, and always uses HTTP."
              [32m+[0m[0m displayName = "Storage Accounts with custom domains assigned should be denied"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Storage"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "The effect determines what happens when the policy rule is evaluated to match"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Storage/storageAccounts"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m anyOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m exists = "true"
                                      [32m+[0m[0m field  = "Microsoft.Storage/storageAccounts/customDomain"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Storage/storageAccounts/customDomain.useSubDomainName"
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-StorageAccount-CustomDomain"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-Subnet-Without-Nsg"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "This policy denies the creation of a subnet without a Network Security Group. NSG help to protect traffic across subnet-level."
              [32m+[0m[0m displayName = "Subnets should have a Network Security Group"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Network"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "2.0.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect          = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m excludedSubnets = {
                      [32m+[0m[0m defaultValue = [
                          [32m+[0m[0m "GatewaySubnet",
                          [32m+[0m[0m "AzureFirewallSubnet",
                          [32m+[0m[0m "AzureFirewallManagementSubnet",
                        ]
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "Array of subnet names that are excluded from this policy"
                          [32m+[0m[0m displayName = "Excluded Subnets"
                        }
                      [32m+[0m[0m type         = "Array"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m anyOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "Microsoft.Network/virtualNetworks"
                                      [32m+[0m[0m field  = "type"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m count     = {
                                          [32m+[0m[0m field = "Microsoft.Network/virtualNetworks/subnets[*]"
                                          [32m+[0m[0m where = {
                                              [32m+[0m[0m allOf = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m exists = "false"
                                                      [32m+[0m[0m field  = "Microsoft.Network/virtualNetworks/subnets[*].networkSecurityGroup.id"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m field = "Microsoft.Network/virtualNetworks/subnets[*].name"
                                                      [32m+[0m[0m notIn = "[parameters('excludedSubnets')]"
                                                    },
                                                ]
                                            }
                                        }
                                      [32m+[0m[0m notEquals = 0
                                    },
                                ]
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "Microsoft.Network/virtualNetworks/subnets"
                                      [32m+[0m[0m field  = "type"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field = "name"
                                      [32m+[0m[0m notIn = "[parameters('excludedSubnets')]"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m exists = "false"
                                      [32m+[0m[0m field  = "Microsoft.Network/virtualNetworks/subnets/networkSecurityGroup.id"
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-Subnet-Without-Nsg"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-Subnet-Without-Penp"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "This policy denies the creation of a subnet without Private Endpoint Netwotk Policies enabled. This policy is intended for 'workload' subnets, not 'central infrastructure' (aka, 'hub') subnets."
              [32m+[0m[0m displayName = "Subnets without Private Endpoint Network Policies enabled should be denied"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Network"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect          = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "The effect determines what happens when the policy rule is evaluated to match"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m excludedSubnets = {
                      [32m+[0m[0m defaultValue = [
                          [32m+[0m[0m "GatewaySubnet",
                          [32m+[0m[0m "AzureFirewallSubnet",
                          [32m+[0m[0m "AzureFirewallManagementSubnet",
                          [32m+[0m[0m "AzureBastionSubnet",
                        ]
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "Array of subnet names that are excluded from this policy"
                          [32m+[0m[0m displayName = "Excluded Subnets"
                        }
                      [32m+[0m[0m type         = "Array"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m anyOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "Microsoft.Network/virtualNetworks"
                                      [32m+[0m[0m field  = "type"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m count     = {
                                          [32m+[0m[0m field = "Microsoft.Network/virtualNetworks/subnets[*]"
                                          [32m+[0m[0m where = {
                                              [32m+[0m[0m allOf = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m field     = "Microsoft.Network/virtualNetworks/subnets[*].privateEndpointNetworkPolicies"
                                                      [32m+[0m[0m notEquals = "Enabled"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m field = "Microsoft.Network/virtualNetworks/subnets[*].name"
                                                      [32m+[0m[0m notIn = "[parameters('excludedSubnets')]"
                                                    },
                                                ]
                                            }
                                        }
                                      [32m+[0m[0m notEquals = 0
                                    },
                                ]
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "Microsoft.Network/virtualNetworks/subnets"
                                      [32m+[0m[0m field  = "type"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field = "name"
                                      [32m+[0m[0m notIn = "[parameters('excludedSubnets')]"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field     = "Microsoft.Network/virtualNetworks/subnets/privateEndpointNetworkPolicies"
                                      [32m+[0m[0m notEquals = "Enabled"
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-Subnet-Without-Penp"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-Subnet-Without-Udr"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "This policy denies the creation of a subnet without a User Defined Route (UDR)."
              [32m+[0m[0m displayName = "Subnets should have a User Defined Route"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Network"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "2.0.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect          = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m excludedSubnets = {
                      [32m+[0m[0m defaultValue = [
                          [32m+[0m[0m "AzureBastionSubnet",
                        ]
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "Array of subnet names that are excluded from this policy"
                          [32m+[0m[0m displayName = "Excluded Subnets"
                        }
                      [32m+[0m[0m type         = "Array"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m anyOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "Microsoft.Network/virtualNetworks"
                                      [32m+[0m[0m field  = "type"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m count     = {
                                          [32m+[0m[0m field = "Microsoft.Network/virtualNetworks/subnets[*]"
                                          [32m+[0m[0m where = {
                                              [32m+[0m[0m allOf = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m exists = "false"
                                                      [32m+[0m[0m field  = "Microsoft.Network/virtualNetworks/subnets[*].routeTable.id"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m field = "Microsoft.Network/virtualNetworks/subnets[*].name"
                                                      [32m+[0m[0m notIn = "[parameters('excludedSubnets')]"
                                                    },
                                                ]
                                            }
                                        }
                                      [32m+[0m[0m notEquals = 0
                                    },
                                ]
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "Microsoft.Network/virtualNetworks/subnets"
                                      [32m+[0m[0m field  = "type"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field = "name"
                                      [32m+[0m[0m notIn = "[parameters('excludedSubnets')]"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m exists = "false"
                                      [32m+[0m[0m field  = "Microsoft.Network/virtualNetworks/subnets/routeTable.id"
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-Subnet-Without-Udr"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-UDR-With-Specific-NextHop"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "This policy denies the creation of a User Defined Route with 'Next Hop Type' set to 'Internet' or 'VirtualNetworkGateway'."
              [32m+[0m[0m displayName = "User Defined Routes with 'Next Hop Type' set to 'Internet' or 'VirtualNetworkGateway' should be denied"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Network"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect               = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "The effect determines what happens when the policy rule is evaluated to match"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m excludedDestinations = {
                      [32m+[0m[0m defaultValue = [
                          [32m+[0m[0m "Internet",
                          [32m+[0m[0m "VirtualNetworkGateway",
                        ]
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "Array of route destinations that are to be denied"
                          [32m+[0m[0m displayName = "Excluded Destinations"
                        }
                      [32m+[0m[0m type         = "Array"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m anyOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "Microsoft.Network/routeTables"
                                      [32m+[0m[0m field  = "type"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m count     = {
                                          [32m+[0m[0m field = "Microsoft.Network/routeTables/routes[*]"
                                          [32m+[0m[0m where = {
                                              [32m+[0m[0m field = "Microsoft.Network/routeTables/routes[*].nextHopType"
                                              [32m+[0m[0m in    = "[parameters('excludedDestinations')]"
                                            }
                                        }
                                      [32m+[0m[0m notEquals = 0
                                    },
                                ]
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "Microsoft.Network/routeTables/routes"
                                      [32m+[0m[0m field  = "type"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field = "Microsoft.Network/routeTables/routes/nextHopType"
                                      [32m+[0m[0m in    = "[parameters('excludedDestinations')]"
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-UDR-With-Specific-NextHop"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-VNET-Peer-Cross-Sub"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "This policy denies the creation of vNet Peerings outside of the same subscriptions under the assigned scope."
              [32m+[0m[0m displayName = "Deny vNet peering cross subscription."
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Network"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m allowedVnets = {
                      [32m+[0m[0m defaultValue = []
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "Array of allowed vNets that can be peered with. Must be entered using their resource ID. Example: /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}"
                          [32m+[0m[0m displayName = "Allowed vNets to peer with"
                        }
                      [32m+[0m[0m type         = "Array"
                    }
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Network/virtualNetworks/virtualNetworkPeerings"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field = "Microsoft.Network/virtualNetworks/virtualNetworkPeerings/remoteVirtualNetwork.id"
                                      [32m+[0m[0m notIn = "[parameters('allowedVnets')]"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field   = "Microsoft.Network/virtualNetworks/virtualNetworkPeerings/remoteVirtualNetwork.id"
                                      [32m+[0m[0m notLike = "[concat(subscription().id, '/*')]"
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-VNET-Peer-Cross-Sub"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-VNET-Peering-To-Non-Approved-VNETs"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "This policy denies the creation of vNet Peerings to non-approved vNets under the assigned scope."
              [32m+[0m[0m displayName = "Deny vNet peering to non-approved vNets"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Network"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m allowedVnets = {
                      [32m+[0m[0m defaultValue = []
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "Array of allowed vNets that can be peered with. Must be entered using their resource ID. Example: /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}"
                          [32m+[0m[0m displayName = "Allowed vNets to peer with"
                        }
                      [32m+[0m[0m type         = "Array"
                    }
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m anyOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "Microsoft.Network/virtualNetworks/virtualNetworkPeerings"
                                      [32m+[0m[0m field  = "type"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m not = {
                                          [32m+[0m[0m field = "Microsoft.Network/virtualNetworks/virtualNetworkPeerings/remoteVirtualNetwork.id"
                                          [32m+[0m[0m in    = "[parameters('allowedVnets')]"
                                        }
                                    },
                                ]
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "Microsoft.Network/virtualNetworks"
                                      [32m+[0m[0m field  = "type"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m not = {
                                          [32m+[0m[0m field = "Microsoft.Network/virtualNetworks/virtualNetworkPeerings[*].remoteVirtualNetwork.id"
                                          [32m+[0m[0m in    = "[parameters('allowedVnets')]"
                                        }
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m not = {
                                          [32m+[0m[0m exists = false
                                          [32m+[0m[0m field  = "Microsoft.Network/virtualNetworks/virtualNetworkPeerings[*].remoteVirtualNetwork.id"
                                        }
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-VNET-Peering-To-Non-Approved-VNETs"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deny-VNet-Peering"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "This policy denies the creation of vNet Peerings under the assigned scope."
              [32m+[0m[0m displayName = "Deny vNet peering "
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Network"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.1"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Audit",
                          [32m+[0m[0m "Deny",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.Network/virtualNetworks/virtualNetworkPeerings"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m effect = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deny-VNet-Peering"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/DenyAction-ActivityLogs"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "This is a DenyAction implementation policy on Activity Logs."
              [32m+[0m[0m displayName = "DenyAction implementation on Activity Logs"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = false
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {}
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.Resources/subscriptions/providers/diagnosticSettings"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m actionNames = [
                              [32m+[0m[0m "delete",
                            ]
                        }
                      [32m+[0m[0m effect  = "denyAction"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "DenyAction-ActivityLogs"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/DenyAction-DeleteResources"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "This policy enables you to specify the resource and resource type that your organization can protect from accidentals deletion by blocking delete calls using the deny action effect."
              [32m+[0m[0m displayName = "Do not allow deletion of specified resource and resource type"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "General"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DenyAction",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DenyAction"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m resourceName = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Provide the name of the resource that you want to protect from accidental deletion."
                          [32m+[0m[0m displayName = "Resource Name"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m resourceType = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Provide the resource type that you want to protect from accidental deletion."
                          [32m+[0m[0m displayName = "Resource Type"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "[parameters('resourceType')]"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m field = "name"
                              [32m+[0m[0m like  = "[parameters('resourceName')]"
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m actionNames = [
                              [32m+[0m[0m "delete",
                            ]
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "DenyAction-DeleteResources"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/DenyAction-DiagnosticLogs"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "DenyAction implementation on Diagnostic Logs."
              [32m+[0m[0m displayName = "DenyAction implementation on Diagnostic Logs."
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = false
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {}
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.Insights/diagnosticSettings"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m actionNames = [
                              [32m+[0m[0m "delete",
                            ]
                        }
                      [32m+[0m[0m effect  = "denyAction"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "DenyAction-DiagnosticLogs"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-ASC-SecurityContacts"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploy Microsoft Defender for Cloud Security Contacts"
              [32m+[0m[0m displayName = "Deploy Microsoft Defender for Cloud Security Contacts"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Security Center"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "2.0.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect               = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m emailSecurityContact = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Provide email addresses (semi-colon separated) for Defender for Cloud contact details"
                          [32m+[0m[0m displayName = "Security contacts email address"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m minimalSeverity      = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "High",
                          [32m+[0m[0m "Medium",
                          [32m+[0m[0m "Low",
                        ]
                      [32m+[0m[0m defaultValue  = "High"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Defines the minimal alert severity which will be sent as email notifications"
                          [32m+[0m[0m displayName = "Minimal severity"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Resources/subscriptions"
                              [32m+[0m[0m field  = "type"
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m location   = "northeurope"
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m emailSecurityContact = {
                                          [32m+[0m[0m value = "[parameters('emailSecurityContact')]"
                                        }
                                      [32m+[0m[0m minimalSeverity      = {
                                          [32m+[0m[0m value = "[parameters('minimalSeverity')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m emailSecurityContact = {
                                              [32m+[0m[0m metadata = {
                                                  [32m+[0m[0m description = "Security contacts email address"
                                                }
                                              [32m+[0m[0m type     = "string"
                                            }
                                          [32m+[0m[0m minimalSeverity      = {
                                              [32m+[0m[0m metadata = {
                                                  [32m+[0m[0m description = "Minimal severity level reported"
                                                }
                                              [32m+[0m[0m type     = "string"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2023-12-01-preview"
                                              [32m+[0m[0m name       = "default"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m emails               = "[parameters('emailSecurityContact')]"
                                                  [32m+[0m[0m isEnabled            = true
                                                  [32m+[0m[0m notificationsByRole  = {
                                                      [32m+[0m[0m roles = [
                                                          [32m+[0m[0m "Owner",
                                                        ]
                                                      [32m+[0m[0m state = "On"
                                                    }
                                                  [32m+[0m[0m notificationsSources = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m minimalSeverity = "[parameters('minimalSeverity')]"
                                                          [32m+[0m[0m sourceType      = "Alert"
                                                        },
                                                    ]
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Security/securityContacts"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m deploymentScope    = "subscription"
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m contains = "[parameters('emailSecurityContact')]"
                                      [32m+[0m[0m field    = "Microsoft.Security/securityContacts/email"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = true
                                      [32m+[0m[0m field  = "Microsoft.Security/securityContacts/isEnabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m contains = "[parameters('minimalSeverity')]"
                                      [32m+[0m[0m field    = "Microsoft.Security/securityContacts/notificationsSources[*].Alert.minimalSeverity"
                                    },
                                ]
                            }
                          [32m+[0m[0m existenceScope     = "subscription"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/fb1c8493-542b-48eb-b624-b4c8fea62acd",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Security/securityContacts"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-ASC-SecurityContacts"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Budget"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploy a default budget on all subscriptions under the assigned scope"
              [32m+[0m[0m displayName = "Deploy a default budget on all subscriptions under the assigned scope"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Budget"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m amount          = {
                      [32m+[0m[0m defaultValue = "1000"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The total amount of cost or usage to track with the budget"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                  [32m+[0m[0m budgetName      = {
                      [32m+[0m[0m defaultValue = "budget-set-by-policy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The name for the budget to be created"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                  [32m+[0m[0m contactEmails   = {
                      [32m+[0m[0m defaultValue = []
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The list of email addresses, in an array, to send the budget notification to when the threshold is exceeded."
                        }
                      [32m+[0m[0m type         = "Array"
                    }
                  [32m+[0m[0m contactGroups   = {
                      [32m+[0m[0m defaultValue = []
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The list of action groups, in an array, to send the budget notification to when the threshold is exceeded. It accepts array of strings."
                        }
                      [32m+[0m[0m type         = "Array"
                    }
                  [32m+[0m[0m contactRoles    = {
                      [32m+[0m[0m defaultValue = [
                          [32m+[0m[0m "Owner",
                          [32m+[0m[0m "Contributor",
                        ]
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The list of contact RBAC roles, in an array, to send the budget notification to when the threshold is exceeded."
                        }
                      [32m+[0m[0m type         = "Array"
                    }
                  [32m+[0m[0m effect          = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "AuditIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m firstThreshold  = {
                      [32m+[0m[0m defaultValue = "90"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000."
                        }
                      [32m+[0m[0m type         = "String"
                    }
                  [32m+[0m[0m secondThreshold = {
                      [32m+[0m[0m defaultValue = "100"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000."
                        }
                      [32m+[0m[0m type         = "String"
                    }
                  [32m+[0m[0m timeGrain       = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Monthly",
                          [32m+[0m[0m "Quarterly",
                          [32m+[0m[0m "Annually",
                          [32m+[0m[0m "BillingMonth",
                          [32m+[0m[0m "BillingQuarter",
                          [32m+[0m[0m "BillingAnnual",
                        ]
                      [32m+[0m[0m defaultValue  = "Monthly"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "The time covered by a budget. Tracking of the amount will be reset based on the time grain."
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Resources/subscriptions"
                              [32m+[0m[0m field  = "type"
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m location   = "northeurope"
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m amount          = {
                                          [32m+[0m[0m value = "[parameters('amount')]"
                                        }
                                      [32m+[0m[0m budgetName      = {
                                          [32m+[0m[0m value = "[parameters('budgetName')]"
                                        }
                                      [32m+[0m[0m contactEmails   = {
                                          [32m+[0m[0m value = "[parameters('contactEmails')]"
                                        }
                                      [32m+[0m[0m contactGroups   = {
                                          [32m+[0m[0m value = "[parameters('contactGroups')]"
                                        }
                                      [32m+[0m[0m contactRoles    = {
                                          [32m+[0m[0m value = "[parameters('contactRoles')]"
                                        }
                                      [32m+[0m[0m firstThreshold  = {
                                          [32m+[0m[0m value = "[parameters('firstThreshold')]"
                                        }
                                      [32m+[0m[0m secondThreshold = {
                                          [32m+[0m[0m value = "[parameters('secondThreshold')]"
                                        }
                                      [32m+[0m[0m timeGrain       = {
                                          [32m+[0m[0m value = "[parameters('timeGrain')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m amount          = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m budgetName      = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m contactEmails   = {
                                              [32m+[0m[0m type = "Array"
                                            }
                                          [32m+[0m[0m contactGroups   = {
                                              [32m+[0m[0m type = "Array"
                                            }
                                          [32m+[0m[0m contactRoles    = {
                                              [32m+[0m[0m type = "Array"
                                            }
                                          [32m+[0m[0m firstThreshold  = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m secondThreshold = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m startDate       = {
                                              [32m+[0m[0m defaultValue = "[concat(utcNow('MM'), '/01/', utcNow('yyyy'))]"
                                              [32m+[0m[0m type         = "String"
                                            }
                                          [32m+[0m[0m timeGrain       = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2019-10-01"
                                              [32m+[0m[0m name       = "[parameters('budgetName')]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m amount        = "[parameters('amount')]"
                                                  [32m+[0m[0m category      = "Cost"
                                                  [32m+[0m[0m notifications = {
                                                      [32m+[0m[0m NotificationForExceededBudget1 = {
                                                          [32m+[0m[0m contactEmails = "[parameters('contactEmails')]"
                                                          [32m+[0m[0m contactGroups = "[parameters('contactGroups')]"
                                                          [32m+[0m[0m contactRoles  = "[parameters('contactRoles')]"
                                                          [32m+[0m[0m enabled       = true
                                                          [32m+[0m[0m operator      = "GreaterThan"
                                                          [32m+[0m[0m threshold     = "[parameters('firstThreshold')]"
                                                        }
                                                      [32m+[0m[0m NotificationForExceededBudget2 = {
                                                          [32m+[0m[0m contactEmails = "[parameters('contactEmails')]"
                                                          [32m+[0m[0m contactGroups = "[parameters('contactGroups')]"
                                                          [32m+[0m[0m contactRoles  = "[parameters('contactRoles')]"
                                                          [32m+[0m[0m enabled       = true
                                                          [32m+[0m[0m operator      = "GreaterThan"
                                                          [32m+[0m[0m threshold     = "[parameters('secondThreshold')]"
                                                        }
                                                    }
                                                  [32m+[0m[0m timeGrain     = "[parameters('timeGrain')]"
                                                  [32m+[0m[0m timePeriod    = {
                                                      [32m+[0m[0m startDate = "[parameters('startDate')]"
                                                    }
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Consumption/budgets"
                                            },
                                        ]
                                    }
                                }
                            }
                          [32m+[0m[0m deploymentScope    = "subscription"
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('amount')]"
                                      [32m+[0m[0m field  = "Microsoft.Consumption/budgets/amount"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('timeGrain')]"
                                      [32m+[0m[0m field  = "Microsoft.Consumption/budgets/timeGrain"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "Cost"
                                      [32m+[0m[0m field  = "Microsoft.Consumption/budgets/category"
                                    },
                                ]
                            }
                          [32m+[0m[0m existenceScope     = "subscription"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Consumption/budgets"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Budget"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Custom-Route-Table"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys a route table with specific user defined routes when one does not exist. The route table deployed by the policy must be manually associated to subnet(s)"
              [32m+[0m[0m displayName = "Deploy a route table with specific user defined routes"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Network"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m disableBgpPropagation = {
                      [32m+[0m[0m defaultValue = false
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "Disable BGP Propagation"
                          [32m+[0m[0m displayName = "DisableBgpPropagation"
                        }
                      [32m+[0m[0m type         = "Boolean"
                    }
                  [32m+[0m[0m effect                = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m requiredRoutes        = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Routes that must exist in compliant route tables deployed by this policy"
                          [32m+[0m[0m displayName = "requiredRoutes"
                        }
                      [32m+[0m[0m type     = "Array"
                    }
                  [32m+[0m[0m routeTableName        = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Name of the route table automatically deployed by this policy"
                          [32m+[0m[0m displayName = "routeTableName"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m vnetRegion            = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Only VNets in this region will be evaluated against this policy"
                          [32m+[0m[0m displayName = "vnetRegion"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Network/virtualNetworks"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "[parameters('vnetRegion')]"
                              [32m+[0m[0m field  = "location"
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m disableBgpPropagation = {
                                          [32m+[0m[0m value = "[parameters('disableBgpPropagation')]"
                                        }
                                      [32m+[0m[0m requiredRoutes        = {
                                          [32m+[0m[0m value = "[parameters('requiredRoutes')]"
                                        }
                                      [32m+[0m[0m routeTableName        = {
                                          [32m+[0m[0m value = "[parameters('routeTableName')]"
                                        }
                                      [32m+[0m[0m vnetRegion            = {
                                          [32m+[0m[0m value = "[parameters('vnetRegion')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m disableBgpPropagation = {
                                              [32m+[0m[0m type = "bool"
                                            }
                                          [32m+[0m[0m requiredRoutes        = {
                                              [32m+[0m[0m type = "array"
                                            }
                                          [32m+[0m[0m routeTableName        = {
                                              [32m+[0m[0m type = "string"
                                            }
                                          [32m+[0m[0m vnetRegion            = {
                                              [32m+[0m[0m type = "string"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2021-04-01"
                                              [32m+[0m[0m name       = "routeTableDepl"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m mode       = "Incremental"
                                                  [32m+[0m[0m parameters = {
                                                      [32m+[0m[0m disableBgpPropagation = {
                                                          [32m+[0m[0m value = "[parameters('disableBgpPropagation')]"
                                                        }
                                                      [32m+[0m[0m requiredRoutes        = {
                                                          [32m+[0m[0m value = "[parameters('requiredRoutes')]"
                                                        }
                                                      [32m+[0m[0m routeTableName        = {
                                                          [32m+[0m[0m value = "[parameters('routeTableName')]"
                                                        }
                                                      [32m+[0m[0m vnetRegion            = {
                                                          [32m+[0m[0m value = "[parameters('vnetRegion')]"
                                                        }
                                                    }
                                                  [32m+[0m[0m template   = {
                                                      [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                                      [32m+[0m[0m parameters     = {
                                                          [32m+[0m[0m disableBgpPropagation = {
                                                              [32m+[0m[0m type = "bool"
                                                            }
                                                          [32m+[0m[0m requiredRoutes        = {
                                                              [32m+[0m[0m type = "array"
                                                            }
                                                          [32m+[0m[0m routeTableName        = {
                                                              [32m+[0m[0m type = "string"
                                                            }
                                                          [32m+[0m[0m vnetRegion            = {
                                                              [32m+[0m[0m type = "string"
                                                            }
                                                        }
                                                      [32m+[0m[0m resources      = [
                                                          [32m+[0m[0m {
                                                              [32m+[0m[0m apiVersion = "2021-02-01"
                                                              [32m+[0m[0m location   = "[[parameters('vnetRegion')]"
                                                              [32m+[0m[0m name       = "[[parameters('routeTableName')]"
                                                              [32m+[0m[0m properties = {
                                                                  [32m+[0m[0m copy                       = "[variables('copyLoop')]"
                                                                  [32m+[0m[0m disableBgpRoutePropagation = "[[parameters('disableBgpPropagation')]"
                                                                }
                                                              [32m+[0m[0m type       = "Microsoft.Network/routeTables"
                                                            },
                                                        ]
                                                    }
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Resources/deployments"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {
                                          [32m+[0m[0m copyLoop = [
                                              [32m+[0m[0m {
                                                  [32m+[0m[0m count = "[[length(parameters('requiredRoutes'))]"
                                                  [32m+[0m[0m input = {
                                                      [32m+[0m[0m name       = "[[concat('route-',copyIndex('routes'))]"
                                                      [32m+[0m[0m properties = {
                                                          [32m+[0m[0m addressPrefix    = "[[split(parameters('requiredRoutes')[copyIndex('routes')], ';')[0]]"
                                                          [32m+[0m[0m nextHopIpAddress = "[[if(equals(toLower(split(parameters('requiredRoutes')[copyIndex('routes')], ';')[1]),'virtualappliance'),split(parameters('requiredRoutes')[copyIndex('routes')], ';')[2], null())]"
                                                          [32m+[0m[0m nextHopType      = "[[split(parameters('requiredRoutes')[copyIndex('routes')], ';')[1]]"
                                                        }
                                                    }
                                                  [32m+[0m[0m name  = "routes"
                                                },
                                            ]
                                        }
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('routeTableName')]"
                                      [32m+[0m[0m field  = "name"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m count  = {
                                          [32m+[0m[0m field = "Microsoft.Network/routeTables/routes[*]"
                                          [32m+[0m[0m where = {
                                              [32m+[0m[0m in    = "[parameters('requiredRoutes')]"
                                              [32m+[0m[0m value = "[concat(current('Microsoft.Network/routeTables/routes[*].addressPrefix'), ';', current('Microsoft.Network/routeTables/routes[*].nextHopType'), if(equals(toLower(current('Microsoft.Network/routeTables/routes[*].nextHopType')),'virtualappliance'), concat(';', current('Microsoft.Network/routeTables/routes[*].nextHopIpAddress')), ''))]"
                                            }
                                        }
                                      [32m+[0m[0m equals = "[length(parameters('requiredRoutes'))]"
                                    },
                                ]
                            }
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/subscriptions/e867a45d-e513-44ac-931e-4741cef80b24/providers/Microsoft.Authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Network/routeTables"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Custom-Route-Table"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-DDoSProtection"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys an Azure DDoS Network Protection"
              [32m+[0m[0m displayName = "Deploy an Azure DDoS Network Protection"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Network"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.1"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m ddosName   = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "DDoSVnet"
                          [32m+[0m[0m displayName = "ddosName"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m ddosRegion = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "DDoSVnet location"
                          [32m+[0m[0m displayName = "ddosRegion"
                          [32m+[0m[0m strongType  = "location"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m effect     = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m rgName     = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Provide name for resource group."
                          [32m+[0m[0m displayName = "rgName"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Resources/subscriptions"
                              [32m+[0m[0m field  = "type"
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment        = {
                              [32m+[0m[0m location   = "northeurope"
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m ddosname   = {
                                          [32m+[0m[0m value = "[parameters('ddosname')]"
                                        }
                                      [32m+[0m[0m ddosregion = {
                                          [32m+[0m[0m value = "[parameters('ddosRegion')]"
                                        }
                                      [32m+[0m[0m rgName     = {
                                          [32m+[0m[0m value = "[parameters('rgName')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m ddosRegion = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m ddosname   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m rgName     = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2018-05-01"
                                              [32m+[0m[0m location   = "[deployment().location]"
                                              [32m+[0m[0m name       = "[parameters('rgName')]"
                                              [32m+[0m[0m properties = {}
                                              [32m+[0m[0m type       = "Microsoft.Resources/resourceGroups"
                                            },
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion    = "2018-05-01"
                                              [32m+[0m[0m dependsOn     = [
                                                  [32m+[0m[0m "[resourceId('Microsoft.Resources/resourceGroups/', parameters('rgName'))]",
                                                ]
                                              [32m+[0m[0m name          = "ddosprotection"
                                              [32m+[0m[0m properties    = {
                                                  [32m+[0m[0m mode     = "Incremental"
                                                  [32m+[0m[0m template = {
                                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json"
                                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                                      [32m+[0m[0m outputs        = {}
                                                      [32m+[0m[0m parameters     = {}
                                                      [32m+[0m[0m resources      = [
                                                          [32m+[0m[0m {
                                                              [32m+[0m[0m apiVersion = "2019-12-01"
                                                              [32m+[0m[0m location   = "[parameters('ddosRegion')]"
                                                              [32m+[0m[0m name       = "[parameters('ddosName')]"
                                                              [32m+[0m[0m properties = {}
                                                              [32m+[0m[0m type       = "Microsoft.Network/ddosProtectionPlans"
                                                            },
                                                        ]
                                                    }
                                                }
                                              [32m+[0m[0m resourceGroup = "[parameters('rgName')]"
                                              [32m+[0m[0m type          = "Microsoft.Resources/deployments"
                                            },
                                        ]
                                    }
                                }
                            }
                          [32m+[0m[0m deploymentScope   = "subscription"
                          [32m+[0m[0m existenceScope    = "resourceGroup"
                          [32m+[0m[0m name              = "[parameters('ddosName')]"
                          [32m+[0m[0m resourceGroupName = "[parameters('rgName')]"
                          [32m+[0m[0m roleDefinitionIds = [
                              [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7",
                            ]
                          [32m+[0m[0m type              = "Microsoft.Network/ddosProtectionPlans"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-DDoSProtection"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-AA"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for Automation to stream to a Log Analytics workspace when any Automation which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for Automation to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics   = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m logsEnabled    = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable logs"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m metricsEnabled = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable metrics"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName    = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.Automation/automationAccounts"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location       = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logsEnabled    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m metricsEnabled = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "JobLogs"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "JobStreams"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "DscNodeStatus"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "AuditEvent"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                    ]
                                                  [32m+[0m[0m metrics     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "AllMetrics"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                          [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Automation/automationAccounts/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-AA"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-ACI"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for Container Instances to stream to a Log Analytics workspace when any ACR which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for Container Instances to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics   = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m metricsEnabled = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable metrics"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName    = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.ContainerInstance/containerGroups"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location       = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m metricsEnabled = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = []
                                                  [32m+[0m[0m metrics     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "AllMetrics"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                          [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.ContainerInstance/containerGroups/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-ACI"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-ACR"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for Container Registry to stream to a Log Analytics workspace when any ACR which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for Container Registry to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics   = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m logsEnabled    = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable logs"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m metricsEnabled = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable metrics"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName    = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.ContainerRegistry/registries"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location       = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logsEnabled    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m metricsEnabled = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "ContainerRegistryLoginEvents"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "ContainerRegistryRepositoryEvents"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                    ]
                                                  [32m+[0m[0m metrics     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "AllMetrics"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                          [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.ContainerRegistry/registries/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-ACR"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-APIMgmt"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for API Management to stream to a Log Analytics workspace when any API Management which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for API Management to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.2.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect                      = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics                = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m logAnalyticsDestinationType = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "AzureDiagnostics",
                          [32m+[0m[0m "Dedicated",
                        ]
                      [32m+[0m[0m defaultValue  = "AzureDiagnostics"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Select destination type for Log Analytics. Allowed values are 'Dedicated' (resource specific) and 'AzureDiagnostics'. Default is 'AzureDiagnostics'"
                          [32m+[0m[0m displayName = "Log Analytics destination type"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logsEnabled                 = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable logs"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m metricsEnabled              = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable metrics"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName                 = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.ApiManagement/service"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location                    = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics                = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m logAnalyticsDestinationType = {
                                          [32m+[0m[0m value = "[parameters('logAnalyticsDestinationType')]"
                                        }
                                      [32m+[0m[0m logsEnabled                 = {
                                          [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                        }
                                      [32m+[0m[0m metricsEnabled              = {
                                          [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName                 = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName                = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location                    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics                = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalyticsDestinationType = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logsEnabled                 = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m metricsEnabled              = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName                 = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName                = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logAnalyticsDestinationType = "[parameters('logAnalyticsDestinationType')]"
                                                  [32m+[0m[0m logs                        = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "GatewayLogs"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "WebSocketConnectionLogs"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                    ]
                                                  [32m+[0m[0m metrics                     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "AllMetrics"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                          [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId                 = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.ApiManagement/service/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-APIMgmt"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-AVDScalingPlans"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for AVD Scaling Plans to stream to a Log Analytics workspace when any Scaling Plan which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for AVD Scaling Plans to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m logsEnabled  = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable logs"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.DesktopVirtualization/scalingplans"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location     = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m logsEnabled  = {
                                          [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName  = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location     = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logsEnabled  = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName  = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "Autoscale"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.DesktopVirtualization/scalingplans/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-AVDScalingPlans"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-AnalysisService"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for Analysis Services to stream to a Log Analytics workspace when any Analysis Services which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for Analysis Services to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics   = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m logsEnabled    = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable logs"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m metricsEnabled = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable metrics"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName    = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.AnalysisServices/servers"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location       = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logsEnabled    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m metricsEnabled = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "Engine"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "Service"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                    ]
                                                  [32m+[0m[0m metrics     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "AllMetrics"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                          [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.AnalysisServices/servers/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-AnalysisService"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-ApiForFHIR"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for Azure API for FHIR to stream to a Log Analytics workspace when any Azure API for FHIR which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for Azure API for FHIR to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics   = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m logsEnabled    = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable logs"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m metricsEnabled = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable metrics"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName    = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.HealthcareApis/services"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location       = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logsEnabled    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m metricsEnabled = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "AuditLogs"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                    ]
                                                  [32m+[0m[0m metrics     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "AllMetrics"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                          [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.HealthcareApis/services/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-ApiForFHIR"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-ApplicationGateway"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for Application Gateway to stream to a Log Analytics workspace when any Application Gateway which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for Application Gateway to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics   = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m logsEnabled    = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable logs"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m metricsEnabled = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable metrics"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName    = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.Network/applicationGateways"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location       = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logsEnabled    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m metricsEnabled = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "ApplicationGatewayAccessLog"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "ApplicationGatewayPerformanceLog"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "ApplicationGatewayFirewallLog"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                    ]
                                                  [32m+[0m[0m metrics     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "AllMetrics"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                          [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Network/applicationGateways/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-ApplicationGateway"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-Bastion"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for Azure Bastion to stream to a Log Analytics workspace when any Azure Bastion which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for Azure Bastion to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics   = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m logsEnabled    = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable logs"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m metricsEnabled = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable metrics"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName    = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.Network/bastionHosts"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location       = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logsEnabled    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m metricsEnabled = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "BastionAuditLogs"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                    ]
                                                  [32m+[0m[0m metrics     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "AllMetrics"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                          [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Network/bastionHosts/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-Bastion"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-CDNEndpoints"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for CDN Endpoint to stream to a Log Analytics workspace when any CDN Endpoint which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for CDN Endpoint to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m logsEnabled  = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable logs"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.Cdn/profiles/endpoints"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location     = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m logsEnabled  = {
                                          [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName  = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName = {
                                          [32m+[0m[0m value = "[field('fullName')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location     = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logsEnabled  = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName  = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "CoreAnalytics"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                    ]
                                                  [32m+[0m[0m metrics     = []
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Cdn/profiles/endpoints/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-CDNEndpoints"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-CognitiveServices"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for Cognitive Services to stream to a Log Analytics workspace when any Cognitive Services which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for Cognitive Services to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics   = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m logsEnabled    = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable logs"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m metricsEnabled = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable metrics"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName    = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.CognitiveServices/accounts"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location       = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logsEnabled    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m metricsEnabled = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "Audit"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "RequestResponse"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "Trace"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                    ]
                                                  [32m+[0m[0m metrics     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "AllMetrics"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                          [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.CognitiveServices/accounts/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-CognitiveServices"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-CosmosDB"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for Cosmos DB to stream to a Log Analytics workspace when any Cosmos DB which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for Cosmos DB to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.2.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics   = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m logsEnabled    = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable logs"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m metricsEnabled = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable metrics"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName    = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.DocumentDB/databaseAccounts"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location       = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logsEnabled    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m metricsEnabled = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "DataPlaneRequests"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "MongoRequests"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "QueryRuntimeStatistics"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "PartitionKeyStatistics"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "PartitionKeyRUConsumption"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "ControlPlaneRequests"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "CassandraRequests"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "GremlinRequests"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "TableApiRequests"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                    ]
                                                  [32m+[0m[0m metrics     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "Requests"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                          [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.DocumentDB/databaseAccounts/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-CosmosDB"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-DLAnalytics"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for Data Lake Analytics to stream to a Log Analytics workspace when any Data Lake Analytics which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for Data Lake Analytics to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics   = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m logsEnabled    = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable logs"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m metricsEnabled = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable metrics"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName    = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.DataLakeAnalytics/accounts"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location       = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logsEnabled    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m metricsEnabled = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "Audit"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "Requests"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                    ]
                                                  [32m+[0m[0m metrics     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "AllMetrics"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                          [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.DataLakeAnalytics/accounts/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-DLAnalytics"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-DataExplorerCluster"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for Azure Data Explorer Cluster to stream to a Log Analytics workspace when any Azure Data Explorer Cluster which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for Azure Data Explorer Cluster to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics   = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m logsEnabled    = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable logs"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m metricsEnabled = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable metrics"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName    = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.Kusto/Clusters"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location       = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logsEnabled    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m metricsEnabled = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "SucceededIngestion"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "FailedIngestion"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "IngestionBatching"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "Command"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "Query"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "TableUsageStatistics"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "TableDetails"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                    ]
                                                  [32m+[0m[0m metrics     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "AllMetrics"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                          [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Kusto/Clusters/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-DataExplorerCluster"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-DataFactory"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for Data Factory to stream to a Log Analytics workspace when any Data Factory which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for Data Factory to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.2.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics   = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m logsEnabled    = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable logs"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m metricsEnabled = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable metrics"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName    = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.DataFactory/factories"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location       = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logsEnabled    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m metricsEnabled = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "ActivityRuns"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "PipelineRuns"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "TriggerRuns"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "SSISPackageEventMessages"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "SSISPackageExecutableStatistics"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "SSISPackageEventMessageContext"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "SSISPackageExecutionComponentPhases"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "SSISPackageExecutionDataStatistics"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "SSISIntegrationRuntimeLogs"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "SandboxPipelineRuns"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "SandboxActivityRuns"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                    ]
                                                  [32m+[0m[0m metrics     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "AllMetrics"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                          [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.DataFactory/factories/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-DataFactory"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-Databricks"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for Databricks to stream to a Log Analytics workspace when any Databricks which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for Databricks to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.3.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m logsEnabled  = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable logs"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.Databricks/workspaces"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location     = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m logsEnabled  = {
                                          [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName  = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location     = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logsEnabled  = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName  = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "dbfs"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "clusters"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "accounts"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "jobs"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "notebook"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "ssh"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "workspace"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "secrets"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "sqlPermissions"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "instancePools"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "sqlanalytics"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "genie"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "globalInitScripts"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "iamRole"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "mlflowExperiment"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "featureStore"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "RemoteHistoryService"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "mlflowAcledArtifact"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "databrickssql"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "deltaPipelines"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "modelRegistry"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "repos"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "unityCatalog"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "gitCredentials"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "webTerminal"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "serverlessRealTimeInference"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "clusterLibraries"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "partnerHub"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "clamAVScan"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "capsule8Dataplane"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Databricks/workspaces/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-Databricks"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-EventGridSub"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for Event Grid subscriptions to stream to a Log Analytics workspace when any Event Grid subscriptions which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for Event Grid subscriptions to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics   = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m metricsEnabled = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable metrics"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName    = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.EventGrid/eventSubscriptions"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location       = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m metricsEnabled = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = []
                                                  [32m+[0m[0m metrics     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "AllMetrics"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                          [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.EventGrid/eventSubscriptions/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-EventGridSub"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-EventGridSystemTopic"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for Event Grid System Topic to stream to a Log Analytics workspace when any Event Grid System Topic which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for Event Grid System Topic to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics   = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m logsEnabled    = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable logs"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m metricsEnabled = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable metrics"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName    = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.EventGrid/systemTopics"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location       = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logsEnabled    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m metricsEnabled = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "DeliveryFailures"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                    ]
                                                  [32m+[0m[0m metrics     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "AllMetrics"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                          [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.EventGrid/systemTopics/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-EventGridSystemTopic"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-EventGridTopic"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for Event Grid Topic to stream to a Log Analytics workspace when any Event Grid Topic which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for Event Grid Topic to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.2.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics   = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m logsEnabled    = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable logs"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m metricsEnabled = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable metrics"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName    = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.EventGrid/topics"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location       = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logsEnabled    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m metricsEnabled = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "DeliveryFailures"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "PublishFailures"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "DataPlaneRequests"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                    ]
                                                  [32m+[0m[0m metrics     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "AllMetrics"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                          [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.EventGrid/topics/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-EventGridTopic"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-ExpressRoute"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for ExpressRoute to stream to a Log Analytics workspace when any ExpressRoute which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for ExpressRoute to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics   = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m logsEnabled    = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable logs"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m metricsEnabled = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable metrics"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName    = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.Network/expressRouteCircuits"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location       = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logsEnabled    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m metricsEnabled = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "PeeringRouteLog"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                    ]
                                                  [32m+[0m[0m metrics     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "AllMetrics"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                          [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Network/expressRouteCircuits/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-ExpressRoute"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-Firewall"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for Firewall to stream to a Log Analytics workspace when any Firewall which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for Firewall to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.2.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect                      = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics                = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m logAnalyticsDestinationType = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "AzureDiagnostics",
                          [32m+[0m[0m "Dedicated",
                        ]
                      [32m+[0m[0m defaultValue  = "AzureDiagnostics"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Select destination type for Log Analytics. Allowed values are 'Dedicated' (resource specific) and 'AzureDiagnostics'. Default is 'AzureDiagnostics'"
                          [32m+[0m[0m displayName = "Log Analytics destination type"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logsEnabled                 = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable logs"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m metricsEnabled              = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable metrics"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName                 = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.Network/azureFirewalls"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location                    = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics                = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m logAnalyticsDestinationType = {
                                          [32m+[0m[0m value = "[parameters('logAnalyticsDestinationType')]"
                                        }
                                      [32m+[0m[0m logsEnabled                 = {
                                          [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                        }
                                      [32m+[0m[0m metricsEnabled              = {
                                          [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName                 = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName                = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location                    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics                = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalyticsDestinationType = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logsEnabled                 = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m metricsEnabled              = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName                 = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName                = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logAnalyticsDestinationType = "[parameters('logAnalyticsDestinationType')]"
                                                  [32m+[0m[0m logs                        = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "AzureFirewallApplicationRule"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "AzureFirewallNetworkRule"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "AzureFirewallDnsProxy"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "AZFWNetworkRule"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "AZFWApplicationRule"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "AZFWNatRule"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "AZFWThreatIntel"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "AZFWIdpsSignature"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "AZFWDnsQuery"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "AZFWFqdnResolveFailure"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "AZFWApplicationRuleAggregation"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "AZFWNetworkRuleAggregation"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "AZFWNatRuleAggregation"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "AZFWFatFlow"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "AZFWFlowTrace"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                    ]
                                                  [32m+[0m[0m metrics                     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "AllMetrics"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                          [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId                 = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Network/azureFirewalls/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-Firewall"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-FrontDoor"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for Front Door to stream to a Log Analytics workspace when any Front Door which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for Front Door to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics   = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m logsEnabled    = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable logs"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m metricsEnabled = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable metrics"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName    = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.Network/frontDoors"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location       = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logsEnabled    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m metricsEnabled = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "FrontdoorAccessLog"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "FrontdoorWebApplicationFirewallLog"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                    ]
                                                  [32m+[0m[0m metrics     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "AllMetrics"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                          [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Network/frontDoors/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-FrontDoor"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-Function"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for Azure Function App to stream to a Log Analytics workspace when any function app which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for Azure Function App to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics   = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m logsEnabled    = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable logs"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m metricsEnabled = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable metrics"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName    = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Web/sites"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m contains = "functionapp"
                              [32m+[0m[0m value    = "[field('kind')]"
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location       = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logsEnabled    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m metricsEnabled = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "FunctionAppLogs"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                    ]
                                                  [32m+[0m[0m metrics     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "AllMetrics"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                          [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Web/sites/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-Function"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-HDInsight"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for HDInsight to stream to a Log Analytics workspace when any HDInsight which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for HDInsight to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics   = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m metricsEnabled = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable metrics"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName    = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.HDInsight/clusters"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location       = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m metricsEnabled = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = []
                                                  [32m+[0m[0m metrics     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "AllMetrics"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                          [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.HDInsight/clusters/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-HDInsight"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-LoadBalancer"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for Load Balancer to stream to a Log Analytics workspace when any Load Balancer which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for Load Balancer to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics   = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m logsEnabled    = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable logs"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m metricsEnabled = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable metrics"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName    = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.Network/loadBalancers"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location       = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logsEnabled    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m metricsEnabled = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "LoadBalancerAlertEvent"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "LoadBalancerProbeHealthStatus"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                    ]
                                                  [32m+[0m[0m metrics     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "AllMetrics"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                          [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Network/loadBalancers/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-LoadBalancer"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-LogAnalytics"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for Log Analytics workspaces to stream to a Log Analytics workspace when any Log Analytics workspace which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for Log Analytics to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics   = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m logsEnabled    = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable logs"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m metricsEnabled = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable metrics"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName    = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "microsoft.operationalinsights/workspaces"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location       = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logsEnabled    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m metricsEnabled = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "Audit"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                    ]
                                                  [32m+[0m[0m metrics     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "AllMetrics"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                          [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "microsoft.operationalinsights/workspaces/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-LogAnalytics"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-LogicAppsISE"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for Logic Apps integration service environment to stream to a Log Analytics workspace when any Logic Apps integration service environment which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for Logic Apps integration service environment to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m logsEnabled  = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable logs"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.Logic/integrationAccounts"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location     = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m logsEnabled  = {
                                          [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName  = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location     = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logsEnabled  = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName  = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "IntegrationAccountTrackingEvents"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                    ]
                                                  [32m+[0m[0m metrics     = []
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Logic/integrationAccounts/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-LogicAppsISE"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-MariaDB"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for MariaDB to stream to a Log Analytics workspace when any MariaDB  which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled. Deprecating due to service retirement, https://learn.microsoft.com/en-us/azure/mariadb/whats-happening-to-mariadb"
              [32m+[0m[0m displayName = "[Deprecated] Diagnostic Settings for MariaDB to Log Analytics Workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics   = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m logsEnabled    = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable logs"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m metricsEnabled = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable metrics"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName    = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.DBforMariaDB/servers"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location       = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logsEnabled    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m metricsEnabled = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "MySqlSlowLogs"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "MySqlAuditLogs"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                    ]
                                                  [32m+[0m[0m metrics     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "AllMetrics"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                          [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.DBforMariaDB/servers/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-MariaDB"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-MediaService"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for Azure Media Service to stream to a Log Analytics workspace when any Azure Media Service which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for Azure Media Service to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics   = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m logsEnabled    = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable logs"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m metricsEnabled = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable metrics"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName    = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.Media/mediaServices"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location       = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logsEnabled    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m metricsEnabled = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "KeyDeliveryRequests"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                    ]
                                                  [32m+[0m[0m metrics     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "AllMetrics"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                          [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Media/mediaServices/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-MediaService"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-MlWorkspace"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for Machine Learning workspace to stream to a Log Analytics workspace when any Machine Learning workspace which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for Machine Learning workspace to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.2.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics   = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m logsEnabled    = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable logs"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m metricsEnabled = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable metrics"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName    = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.MachineLearningServices/workspaces"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location       = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logsEnabled    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m metricsEnabled = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "AmlComputeClusterEvent"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "AmlComputeClusterNodeEvent"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "AmlComputeJobEvent"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "AmlComputeCpuGpuUtilization"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "AmlRunStatusChangedEvent"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "ModelsChangeEvent"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "ModelsReadEvent"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "ModelsActionEvent"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "DeploymentReadEvent"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "DeploymentEventACI"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "DeploymentEventAKS"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "InferencingOperationAKS"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "InferencingOperationACI"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "DataLabelChangeEvent"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "DataLabelReadEvent"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "ComputeInstanceEvent"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "DataStoreChangeEvent"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "DataStoreReadEvent"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "DataSetChangeEvent"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "DataSetReadEvent"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "PipelineChangeEvent"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "PipelineReadEvent"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "RunEvent"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "RunReadEvent"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "EnvironmentChangeEvent"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "EnvironmentReadEvent"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                    ]
                                                  [32m+[0m[0m metrics     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "AllMetrics"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.MachineLearningServices/workspaces/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-MlWorkspace"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-MySQL"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for Database for MySQL to stream to a Log Analytics workspace when any Database for MySQL which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for Database for MySQL to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics   = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m logsEnabled    = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable logs"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m metricsEnabled = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable metrics"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName    = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.DBforMySQL/servers"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location       = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logsEnabled    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m metricsEnabled = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "MySqlSlowLogs"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "MySqlAuditLogs"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                    ]
                                                  [32m+[0m[0m metrics     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "AllMetrics"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                          [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.DBforMySQL/servers/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-MySQL"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-NIC"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for Network Interfaces to stream to a Log Analytics workspace when any Network Interfaces which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for Network Interfaces to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics   = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m metricsEnabled = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable metrics"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName    = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.Network/networkInterfaces"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location       = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m metricsEnabled = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m metrics     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "AllMetrics"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                          [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Network/networkInterfaces/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-NIC"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-NetworkSecurityGroups"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for Network Security Groups to stream to a Log Analytics workspace when any Network Security Groups which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for Network Security Groups to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m logsEnabled  = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable logs"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.Network/networkSecurityGroups"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location     = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m logsEnabled  = {
                                          [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName  = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location     = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logsEnabled  = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName  = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "NetworkSecurityGroupEvent"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "NetworkSecurityGroupRuleCounter"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                    ]
                                                  [32m+[0m[0m metrics     = []
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Network/networkSecurityGroups/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-NetworkSecurityGroups"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-PostgreSQL"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for Database for PostgreSQL to stream to a Log Analytics workspace when any Database for PostgreSQL which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for Database for PostgreSQL to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "2.0.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics   = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m logsEnabled    = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable logs"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m metricsEnabled = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable metrics"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName    = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m anyOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.DBforPostgreSQL/flexibleServers"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.DBforPostgreSQL/servers"
                              [32m+[0m[0m field  = "type"
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                      [32m+[0m[0m resourceType   = {
                                          [32m+[0m[0m value = "[field('type')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location       = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logsEnabled    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m metricsEnabled = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceType   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2021-05-01-preview"
                                              [32m+[0m[0m condition  = "[startsWith(parameters('resourceType'),'Microsoft.DBforPostgreSQL/flexibleServers')]"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "PostgreSQLLogs"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                    ]
                                                  [32m+[0m[0m metrics     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "AllMetrics"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                          [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.DBforPostgreSQL/flexibleServers/providers/diagnosticSettings"
                                            },
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2021-05-01-preview"
                                              [32m+[0m[0m condition  = "[startsWith(parameters('resourceType'),'Microsoft.DBforPostgreSQL/servers')]"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "PostgreSQLLogs"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "QueryStoreRuntimeStatistics"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "QueryStoreWaitStatistics"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                    ]
                                                  [32m+[0m[0m metrics     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "AllMetrics"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                          [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.DBforPostgreSQL/servers/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-PostgreSQL"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-PowerBIEmbedded"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for Power BI Embedded to stream to a Log Analytics workspace when any Power BI Embedded which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for Power BI Embedded to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics   = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m logsEnabled    = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable logs"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m metricsEnabled = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable metrics"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName    = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.PowerBIDedicated/capacities"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location       = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logsEnabled    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m metricsEnabled = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "Engine"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                    ]
                                                  [32m+[0m[0m metrics     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "AllMetrics"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                          [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.PowerBIDedicated/capacities/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-PowerBIEmbedded"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-RedisCache"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for Redis Cache to stream to a Log Analytics workspace when any Redis Cache which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for Redis Cache to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics   = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m metricsEnabled = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable metrics"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName    = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.Cache/redis"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location       = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m metricsEnabled = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = []
                                                  [32m+[0m[0m metrics     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "AllMetrics"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                          [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Cache/redis/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-RedisCache"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-Relay"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for Relay to stream to a Log Analytics workspace when any Relay which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for Relay to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics   = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m logsEnabled    = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable logs"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m metricsEnabled = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable metrics"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName    = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.Relay/namespaces"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location       = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logsEnabled    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m metricsEnabled = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "HybridConnectionsEvent"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                    ]
                                                  [32m+[0m[0m metrics     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "AllMetrics"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                          [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Relay/namespaces/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-Relay"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-SQLElasticPools"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for SQL Elastic Pools to stream to a Log Analytics workspace when any SQL Elastic Pools which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for SQL Elastic Pools to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics   = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m metricsEnabled = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable metrics"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName    = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.Sql/servers/elasticPools"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m value = "[field('fullName')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location       = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m metricsEnabled = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = []
                                                  [32m+[0m[0m metrics     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "AllMetrics"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                          [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Sql/servers/elasticPools/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-SQLElasticPools"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-SQLMI"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for SQL Managed Instances to stream to a Log Analytics workspace when any SQL Managed Instances which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for SQL Managed Instances to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m logsEnabled  = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable logs"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.Sql/managedInstances"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location     = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m logsEnabled  = {
                                          [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName  = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location     = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logsEnabled  = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName  = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "ResourceUsageStats"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "SQLSecurityAuditEvents"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "DevOpsOperationsAudit"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Sql/managedInstances/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-SQLMI"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-SignalR"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for SignalR to stream to a Log Analytics workspace when any SignalR which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for SignalR to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics   = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m logsEnabled    = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable logs"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m metricsEnabled = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable metrics"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName    = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.SignalRService/SignalR"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location       = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logsEnabled    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m metricsEnabled = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "AllLogs"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                    ]
                                                  [32m+[0m[0m metrics     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "AllMetrics"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                          [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.SignalRService/SignalR/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-SignalR"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-TimeSeriesInsights"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for Time Series Insights to stream to a Log Analytics workspace when any Time Series Insights which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for Time Series Insights to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics   = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m logsEnabled    = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable logs"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m metricsEnabled = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable metrics"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName    = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.TimeSeriesInsights/environments"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location       = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logsEnabled    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m metricsEnabled = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "Ingress"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "Management"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                    ]
                                                  [32m+[0m[0m metrics     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "AllMetrics"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                          [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.TimeSeriesInsights/environments/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-TimeSeriesInsights"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-TrafficManager"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for Traffic Manager to stream to a Log Analytics workspace when any Traffic Manager which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for Traffic Manager to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics   = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m logsEnabled    = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable logs"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m metricsEnabled = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable metrics"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName    = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.Network/trafficManagerProfiles"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location       = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logsEnabled    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m metricsEnabled = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "ProbeHealthStatusEvents"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                    ]
                                                  [32m+[0m[0m metrics     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "AllMetrics"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                          [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Network/trafficManagerProfiles/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-TrafficManager"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-VM"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for Virtual Machines to stream to a Log Analytics workspace when any Virtual Machines which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for Virtual Machines to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics   = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m metricsEnabled = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable metrics"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName    = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.Compute/virtualMachines"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location       = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m metricsEnabled = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = []
                                                  [32m+[0m[0m metrics     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "AllMetrics"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Compute/virtualMachines/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-VM"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-VMSS"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for Virtual Machine Scale Sets  to stream to a Log Analytics workspace when any Virtual Machine Scale Sets  which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for Virtual Machine Scale Sets to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics   = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m metricsEnabled = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable metrics"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName    = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.Compute/virtualMachineScaleSets"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location       = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m metricsEnabled = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = []
                                                  [32m+[0m[0m metrics     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "AllMetrics"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Compute/virtualMachineScaleSets/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-VMSS"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-VNetGW"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for VPN Gateway to stream to a Log Analytics workspace when any VPN Gateway which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for VPN Gateway to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.1-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics   = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m logsEnabled    = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable logs"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m metricsEnabled = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable metrics"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName    = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.Network/virtualNetworkGateways"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location       = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logsEnabled    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m metricsEnabled = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "GatewayDiagnosticLog"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "IKEDiagnosticLog"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "P2SDiagnosticLog"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "RouteDiagnosticLog"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "TunnelDiagnosticLog"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                    ]
                                                  [32m+[0m[0m metrics     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "AllMetrics"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                          [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Network/virtualNetworkGateways/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-VNetGW"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-VWanS2SVPNGW"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for VWAN S2S VPN Gateway to stream to a Log Analytics workspace when any VWAN S2S VPN Gateway which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for VWAN S2S VPN Gateway to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics   = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m logsEnabled    = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable logs"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m metricsEnabled = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable metrics"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName    = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.Network/vpnGateways"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location       = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logsEnabled    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m metricsEnabled = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "GatewayDiagnosticLog"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "IKEDiagnosticLog"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "RouteDiagnosticLog"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "TunnelDiagnosticLog"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                    ]
                                                  [32m+[0m[0m metrics     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "AllMetrics"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                          [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Network/vpnGateways/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-VWanS2SVPNGW"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-VirtualNetwork"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for Virtual Network to stream to a Log Analytics workspace when any Virtual Network which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for Virtual Network to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics   = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m logsEnabled    = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable logs"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m metricsEnabled = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable metrics"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName    = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.Network/virtualNetworks"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location       = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logsEnabled    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m metricsEnabled = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "VMProtectionAlerts"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                    ]
                                                  [32m+[0m[0m metrics     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "AllMetrics"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Network/virtualNetworks/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-VirtualNetwork"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-WVDAppGroup"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for AVD Application group to stream to a Log Analytics workspace when any application group which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for AVD Application group to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.1-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m logsEnabled  = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable logs"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.DesktopVirtualization/applicationGroups"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location     = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m logsEnabled  = {
                                          [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName  = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location     = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logsEnabled  = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName  = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "Checkpoint"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "Error"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "Management"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.DesktopVirtualization/applicationGroups/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-WVDAppGroup"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-WVDHostPools"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for AVD Host Pools to stream to a Log Analytics workspace when any Host Pools which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for AVD Host Pools to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.3.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m logsEnabled  = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable logs"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.DesktopVirtualization/hostpools"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location     = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m logsEnabled  = {
                                          [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName  = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location     = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logsEnabled  = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName  = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "Checkpoint"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "Error"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "Management"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "Connection"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "HostRegistration"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "AgentHealthStatus"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "NetworkData"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "SessionHostManagement"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "ConnectionGraphicsData"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.DesktopVirtualization/hostpools/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-WVDHostPools"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-WVDWorkspace"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for AVD Workspace to stream to a Log Analytics workspace when any Workspace which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for AVD Workspace to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.1-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect       = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m logsEnabled  = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable logs"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName  = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.DesktopVirtualization/workspaces"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location     = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m logsEnabled  = {
                                          [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName  = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location     = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logsEnabled  = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName  = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "Checkpoint"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "Error"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "Management"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "Feed"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.DesktopVirtualization/workspaces/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-WVDWorkspace"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-WebServerFarm"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for App Service Plan to stream to a Log Analytics workspace when any App Service Plan which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for App Service Plan to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics   = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m metricsEnabled = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable metrics"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName    = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.Web/serverfarms"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location       = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m metricsEnabled = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = []
                                                  [32m+[0m[0m metrics     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "AllMetrics"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                          [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Web/serverfarms/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-WebServerFarm"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-Website"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for Web App to stream to a Log Analytics workspace when any Web App which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for App Service to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.2.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics   = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m logsEnabled    = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable logs"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m metricsEnabled = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable metrics"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName    = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Web/sites"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m notContains = "functionapp"
                              [32m+[0m[0m value       = "[field('kind')]"
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                      [32m+[0m[0m serverFarmId   = {
                                          [32m+[0m[0m value = "[field('Microsoft.Web/sites/serverFarmId')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {
                                          [32m+[0m[0m policy = {
                                              [32m+[0m[0m type  = "string"
                                              [32m+[0m[0m value = "[concat(parameters('logAnalytics'), 'configured for diagnostic logs for ', ': ', parameters('resourceName'))]"
                                            }
                                        }
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location       = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logsEnabled    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m metricsEnabled = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m serverFarmId   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = "[if(startsWith(reference(parameters('serverFarmId'), '2021-03-01', 'Full').sku.tier, 'Premium'), variables('logs').premiumTierLogs, variables('logs').otherTierLogs)]"
                                                  [32m+[0m[0m metrics     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "AllMetrics"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                          [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Web/sites/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {
                                          [32m+[0m[0m logs = {
                                              [32m+[0m[0m otherTierLogs   = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "AppServiceHTTPLogs"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "AppServiceConsoleLogs"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "AppServiceAppLogs"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "AppServiceAuditLogs"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "AppServiceIPSecAuditLogs"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "AppServicePlatformLogs"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                              [32m+[0m[0m premiumTierLogs = [
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "AppServiceAntivirusScanAuditLogs"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "AppServiceHTTPLogs"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "AppServiceConsoleLogs"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "AppServiceAppLogs"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "AppServiceFileAuditLogs"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "AppServiceAuditLogs"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "AppServiceIPSecAuditLogs"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                  [32m+[0m[0m {
                                                      [32m+[0m[0m category = "AppServicePlatformLogs"
                                                      [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                    },
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logsEnabled')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('metricsEnabled')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-Website"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Diagnostics-iotHub"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys the diagnostic settings for IoT Hub to stream to a Log Analytics workspace when any IoT Hub which is missing this diagnostic settings is created or updated. This policy is superseded by built-in initiative https://www.azadvertizer.net/azpolicyinitiativesadvertizer/0884adba-2312-4468-abeb-5422caed1038.html."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy Diagnostic Settings for IoT Hub to Log Analytics workspace"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m logAnalytics   = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m logsEnabled    = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable logs stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable logs"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m metricsEnabled = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "True",
                          [32m+[0m[0m "False",
                        ]
                      [32m+[0m[0m defaultValue  = "True"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Whether to enable metrics stream to the Log Analytics workspace - True or False"
                          [32m+[0m[0m displayName = "Enable metrics"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m profileName    = {
                      [32m+[0m[0m defaultValue = "setbypolicy"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The diagnostic settings profile name"
                          [32m+[0m[0m displayName = "Profile name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.Devices/IotHubs"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location       = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics   = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m logsEnabled    = {
                                          [32m+[0m[0m value = "[parameters('logsEnabled')]"
                                        }
                                      [32m+[0m[0m metricsEnabled = {
                                          [32m+[0m[0m value = "[parameters('metricsEnabled')]"
                                        }
                                      [32m+[0m[0m profileName    = {
                                          [32m+[0m[0m value = "[parameters('profileName')]"
                                        }
                                      [32m+[0m[0m resourceName   = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location       = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logsEnabled    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m metricsEnabled = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m profileName    = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName   = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-05-01-preview"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m logs        = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "Connections"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "DeviceTelemetry"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "C2DCommands"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "DeviceIdentityOperations"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "FileUploadOperations"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "Routes"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "D2CTwinOperations"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "C2DTwinOperations"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "TwinQueries"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "JobsOperations"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "DirectMethods"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "DistributedTracing"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "Configurations"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category = "DeviceStreams"
                                                          [32m+[0m[0m enabled  = "[parameters('logsEnabled')]"
                                                        },
                                                    ]
                                                  [32m+[0m[0m metrics     = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m category        = "AllMetrics"
                                                          [32m+[0m[0m enabled         = "[parameters('metricsEnabled')]"
                                                          [32m+[0m[0m retentionPolicy = {
                                                              [32m+[0m[0m days    = 0
                                                              [32m+[0m[0m enabled = false
                                                            }
                                                          [32m+[0m[0m timeGrain       = [90mnull[0m[0m
                                                        },
                                                    ]
                                                  [32m+[0m[0m workspaceId = "[parameters('logAnalytics')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Devices/IotHubs/providers/diagnosticSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/logs.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/metrics.enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('logAnalytics')]"
                                      [32m+[0m[0m field  = "Microsoft.Insights/diagnosticSettings/workspaceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[parameters('profileName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/diagnosticSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Diagnostics-iotHub"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-FirewallPolicy"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys Azure Firewall Manager policy in subscription where the policy is assigned."
              [32m+[0m[0m displayName = "Deploy Azure Firewall Manager policy in the subscription"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Network"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m fwPolicyRegion = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Select Azure region for Azure Firewall Policy"
                          [32m+[0m[0m displayName = "fwPolicyRegion"
                          [32m+[0m[0m strongType  = "location"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m fwpolicy       = {
                      [32m+[0m[0m defaultValue = {}
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "Object describing Azure Firewall Policy"
                          [32m+[0m[0m displayName = "fwpolicy"
                        }
                      [32m+[0m[0m type         = "Object"
                    }
                  [32m+[0m[0m rgName         = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Provide name for resource group."
                          [32m+[0m[0m displayName = "rgName"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Resources/subscriptions"
                              [32m+[0m[0m field  = "type"
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment        = {
                              [32m+[0m[0m location   = "northeurope"
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m fwPolicy       = {
                                          [32m+[0m[0m value = "[parameters('fwPolicy')]"
                                        }
                                      [32m+[0m[0m fwPolicyRegion = {
                                          [32m+[0m[0m value = "[parameters('fwPolicyRegion')]"
                                        }
                                      [32m+[0m[0m rgName         = {
                                          [32m+[0m[0m value = "[parameters('rgName')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m fwPolicy       = {
                                              [32m+[0m[0m type = "object"
                                            }
                                          [32m+[0m[0m fwPolicyRegion = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m rgName         = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2018-05-01"
                                              [32m+[0m[0m location   = "[deployment().location]"
                                              [32m+[0m[0m name       = "[parameters('rgName')]"
                                              [32m+[0m[0m properties = {}
                                              [32m+[0m[0m type       = "Microsoft.Resources/resourceGroups"
                                            },
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion    = "2018-05-01"
                                              [32m+[0m[0m dependsOn     = [
                                                  [32m+[0m[0m "[resourceId('Microsoft.Resources/resourceGroups/', parameters('rgName'))]",
                                                ]
                                              [32m+[0m[0m name          = "fwpolicies"
                                              [32m+[0m[0m properties    = {
                                                  [32m+[0m[0m mode     = "Incremental"
                                                  [32m+[0m[0m template = {
                                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json"
                                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                                      [32m+[0m[0m outputs        = {}
                                                      [32m+[0m[0m parameters     = {}
                                                      [32m+[0m[0m resources      = [
                                                          [32m+[0m[0m {
                                                              [32m+[0m[0m apiVersion = "2019-09-01"
                                                              [32m+[0m[0m dependsOn  = []
                                                              [32m+[0m[0m location   = "[parameters('fwpolicy').location]"
                                                              [32m+[0m[0m name       = "[parameters('fwpolicy').firewallPolicyName]"
                                                              [32m+[0m[0m properties = {}
                                                              [32m+[0m[0m resources  = [
                                                                  [32m+[0m[0m {
                                                                      [32m+[0m[0m apiVersion = "2019-09-01"
                                                                      [32m+[0m[0m dependsOn  = [
                                                                          [32m+[0m[0m "[resourceId('Microsoft.Network/firewallPolicies',parameters('fwpolicy').firewallPolicyName)]",
                                                                        ]
                                                                      [32m+[0m[0m name       = "[parameters('fwpolicy').ruleGroups.name]"
                                                                      [32m+[0m[0m properties = {
                                                                          [32m+[0m[0m priority = "[parameters('fwpolicy').ruleGroups.properties.priority]"
                                                                          [32m+[0m[0m rules    = "[parameters('fwpolicy').ruleGroups.properties.rules]"
                                                                        }
                                                                      [32m+[0m[0m type       = "ruleGroups"
                                                                    },
                                                                ]
                                                              [32m+[0m[0m tags       = {}
                                                              [32m+[0m[0m type       = "Microsoft.Network/firewallPolicies"
                                                            },
                                                        ]
                                                      [32m+[0m[0m variables      = {}
                                                    }
                                                }
                                              [32m+[0m[0m resourceGroup = "[parameters('rgName')]"
                                              [32m+[0m[0m type          = "Microsoft.Resources/deployments"
                                            },
                                        ]
                                    }
                                }
                            }
                          [32m+[0m[0m deploymentScope   = "subscription"
                          [32m+[0m[0m existenceScope    = "resourceGroup"
                          [32m+[0m[0m resourceGroupName = "[parameters('rgName')]"
                          [32m+[0m[0m roleDefinitionIds = [
                              [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c",
                            ]
                          [32m+[0m[0m type              = "Microsoft.Network/firewallPolicies"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-FirewallPolicy"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-LogicApp-TLS"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Periodically, newer versions are released for TLS either due to security flaws, include additional functionality, and enhance speed. Upgrade to the latest TLS version for Function apps to take advantage of security fixes, if any, and/or new functionalities of the latest version."
              [32m+[0m[0m displayName = "Configure Logic apps to use the latest TLS version"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Logic Apps"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Web/sites"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m contains = "workflowapp"
                              [32m+[0m[0m field    = "kind"
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m siteName = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m siteName = {
                                              [32m+[0m[0m type = "string"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2021-02-01"
                                              [32m+[0m[0m name       = "[concat(parameters('siteName'), '/web')]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m minTlsVersion = "1.2"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Web/sites/config"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m equals = "1.2"
                              [32m+[0m[0m field  = "Microsoft.Web/sites/config/minTlsVersion"
                            }
                          [32m+[0m[0m name               = "web"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/de139f84-1756-47ae-9be6-808fbbe84772",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Web/sites/config"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-LogicApp-TLS"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-MDFC-Arc-SQL-DCR-Association"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Policy is deprecated as the built-in policy now supports bringing your own UAMI and DCR. Superseded by https://www.azadvertizer.net/azpolicyadvertizer/2227e1f1-23dd-4c3a-85a9-7024a401d8b2.html"
              [32m+[0m[0m displayName = "[Deprecated]: Configure Arc-enabled SQL Servers with DCR Association to Microsoft Defender for SQL user-defined DCR"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Security Center"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m supersededBy         = "2227e1f1-23dd-4c3a-85a9-7024a401d8b2"
                  [32m+[0m[0m version              = "1.0.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m dcrId            = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Id of the Data Collection Rule."
                          [32m+[0m[0m displayName = "Data Collection Rule Id"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m dcrName          = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Name of the Data Collection Rule."
                          [32m+[0m[0m displayName = "Data Collection Rule Name"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m dcrResourceGroup = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Resource Group of the Data Collection Rule."
                          [32m+[0m[0m displayName = "Data Collection Rule Resource Group"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m workspaceRegion  = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Region of the Log Analytics workspace destination for the Data Collection Rule."
                          [32m+[0m[0m displayName = "Workspace region"
                          [32m+[0m[0m strongType  = "location"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.HybridCompute/machines"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Windows"
                              [32m+[0m[0m field  = "Microsoft.HybridCompute/machines/osName"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "true"
                              [32m+[0m[0m field  = "Microsoft.HybridCompute/machines/mssqlDiscovered"
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment        = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m dcrId            = {
                                          [32m+[0m[0m value = "[parameters('dcrId')]"
                                        }
                                      [32m+[0m[0m dcrName          = {
                                          [32m+[0m[0m value = "[parameters('dcrName')]"
                                        }
                                      [32m+[0m[0m dcrResourceGroup = {
                                          [32m+[0m[0m value = "[parameters('dcrResourceGroup')]"
                                        }
                                      [32m+[0m[0m resourceGroup    = {
                                          [32m+[0m[0m value = "[parameters('dcrResourceGroup')]"
                                        }
                                      [32m+[0m[0m vmName           = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                      [32m+[0m[0m workspaceRegion  = {
                                          [32m+[0m[0m value = "[parameters('workspaceRegion')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m dcrId            = {
                                              [32m+[0m[0m type = "string"
                                            }
                                          [32m+[0m[0m dcrName          = {
                                              [32m+[0m[0m type = "string"
                                            }
                                          [32m+[0m[0m dcrResourceGroup = {
                                              [32m+[0m[0m type = "string"
                                            }
                                          [32m+[0m[0m resourceGroup    = {
                                              [32m+[0m[0m type = "string"
                                            }
                                          [32m+[0m[0m vmName           = {
                                              [32m+[0m[0m type = "string"
                                            }
                                          [32m+[0m[0m workspaceRegion  = {
                                              [32m+[0m[0m type = "string"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2021-04-01"
                                              [32m+[0m[0m name       = "[variables('dcraName')]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m dataCollectionRuleId = "[variables('dcrId')]"
                                                  [32m+[0m[0m description          = "Configure association between Arc-enabled SQL Server and the Microsoft Defender for SQL user-defined DCR. Deleting this association will break the detection of security vulnerabilities for this Arc-enabled SQL Server."
                                                }
                                              [32m+[0m[0m type       = "Microsoft.HybridCompute/machines/providers/dataCollectionRuleAssociations"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {
                                          [32m+[0m[0m dcrId                      = "[parameters('dcrId')]"
                                          [32m+[0m[0m dcrName                    = "[parameters('dcrName')]"
                                          [32m+[0m[0m dcraName                   = "[concat(parameters('vmName'),'/Microsoft.Insights/MicrosoftDefenderForSQL-RulesAssociation')]"
                                          [32m+[0m[0m defaultRGName              = "[parameters('resourceGroup')]"
                                          [32m+[0m[0m locationCode               = "[if(contains(variables('locationLongNameToShortMap'), parameters('workspaceRegion')), variables('locationLongNameToShortMap')[parameters('workspaceRegion')], parameters('workspaceRegion'))]"
                                          [32m+[0m[0m locationLongNameToShortMap = {
                                              [32m+[0m[0m australiacentral   = "CAU"
                                              [32m+[0m[0m australiaeast      = "EAU"
                                              [32m+[0m[0m australiasoutheast = "SEAU"
                                              [32m+[0m[0m brazilsouth        = "CQ"
                                              [32m+[0m[0m canadacentral      = "CCA"
                                              [32m+[0m[0m canadaeast         = "CCA"
                                              [32m+[0m[0m centralindia       = "CIN"
                                              [32m+[0m[0m centralus          = "CUS"
                                              [32m+[0m[0m eastasia           = "EA"
                                              [32m+[0m[0m eastus             = "EUS"
                                              [32m+[0m[0m eastus2            = "EUS2"
                                              [32m+[0m[0m eastus2euap        = "eus2p"
                                              [32m+[0m[0m francecentral      = "PAR"
                                              [32m+[0m[0m germanywestcentral = "DEWC"
                                              [32m+[0m[0m japaneast          = "EJP"
                                              [32m+[0m[0m jioindiawest       = "CIN"
                                              [32m+[0m[0m koreacentral       = "SE"
                                              [32m+[0m[0m koreasouth         = "SE"
                                              [32m+[0m[0m northcentralus     = "NCUS"
                                              [32m+[0m[0m northeurope        = "NEU"
                                              [32m+[0m[0m norwayeast         = "NOE"
                                              [32m+[0m[0m southafricanorth   = "JNB"
                                              [32m+[0m[0m southcentralus     = "SCUS"
                                              [32m+[0m[0m southeastasia      = "SEA"
                                              [32m+[0m[0m southindia         = "CIN"
                                              [32m+[0m[0m swedencentral      = "SEC"
                                              [32m+[0m[0m switzerlandnorth   = "CHN"
                                              [32m+[0m[0m switzerlandwest    = "CHW"
                                              [32m+[0m[0m uaenorth           = "DXB"
                                              [32m+[0m[0m uksouth            = "SUK"
                                              [32m+[0m[0m ukwest             = "WUK"
                                              [32m+[0m[0m westcentralus      = "WCUS"
                                              [32m+[0m[0m westeurope         = "WEU"
                                              [32m+[0m[0m westindia          = "CIN"
                                              [32m+[0m[0m westus             = "WUS"
                                              [32m+[0m[0m westus2            = "WUS2"
                                            }
                                          [32m+[0m[0m subscriptionId             = "[subscription().subscriptionId]"
                                        }
                                    }
                                }
                            }
                          [32m+[0m[0m name              = "MicrosoftDefenderForSQL-RulesAssociation"
                          [32m+[0m[0m roleDefinitionIds = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type              = "Microsoft.Insights/dataCollectionRuleAssociations"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-MDFC-Arc-SQL-DCR-Association"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-MDFC-Arc-Sql-DefenderSQL-DCR"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Policy is deprecated as the built-in policy now supports bringing your own UAMI and DCR. Superseded by https://www.azadvertizer.net/azpolicyadvertizer/63d03cbd-47fd-4ee1-8a1c-9ddf07303de0.html"
              [32m+[0m[0m displayName = "[Deprecated]: Configure Arc-enabled SQL Servers to auto install Microsoft Defender for SQL and DCR with a user-defined LAW"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Security Center"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m supersededBy         = "63d03cbd-47fd-4ee1-8a1c-9ddf07303de0"
                  [32m+[0m[0m version              = "1.0.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m dcrId                                           = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Id of the Data Collection Rule."
                          [32m+[0m[0m displayName = "Data Collection Rule Id"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m dcrName                                         = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Name of the Data Collection Rule."
                          [32m+[0m[0m displayName = "Data Collection Rule Name"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m dcrResourceGroup                                = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Resource Group of the Data Collection Rule."
                          [32m+[0m[0m displayName = "Data Collection Rule Resource Group"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m effect                                          = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m enableCollectionOfSqlQueriesForSecurityResearch = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m true,
                          [32m+[0m[0m false,
                        ]
                      [32m+[0m[0m defaultValue  = false
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the collection of SQL queries for security research."
                          [32m+[0m[0m displayName = "Enable collection of SQL queries for security research"
                        }
                      [32m+[0m[0m type          = "Boolean"
                    }
                  [32m+[0m[0m userWorkspaceResourceId                         = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Workspace resource Id of the Log Analytics workspace destination for the Data Collection Rule."
                          [32m+[0m[0m displayName = "Workspace Resource Id"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m workspaceRegion                                 = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Region of the Log Analytics workspace destination for the Data Collection Rule."
                          [32m+[0m[0m displayName = "Workspace region"
                          [32m+[0m[0m strongType  = "location"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.HybridCompute/machines"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Windows"
                              [32m+[0m[0m field  = "Microsoft.HybridCompute/machines/osName"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "true"
                              [32m+[0m[0m field  = "Microsoft.HybridCompute/machines/mssqlDiscovered"
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m location   = "eastus"
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m dcrId                                           = {
                                          [32m+[0m[0m value = "[parameters('dcrId')]"
                                        }
                                      [32m+[0m[0m dcrName                                         = {
                                          [32m+[0m[0m value = "[parameters('dcrName')]"
                                        }
                                      [32m+[0m[0m dcrResourceGroup                                = {
                                          [32m+[0m[0m value = "[parameters('dcrResourceGroup')]"
                                        }
                                      [32m+[0m[0m enableCollectionOfSqlQueriesForSecurityResearch = {
                                          [32m+[0m[0m value = "[parameters('enableCollectionOfSqlQueriesForSecurityResearch')]"
                                        }
                                      [32m+[0m[0m resourceGroup                                   = {
                                          [32m+[0m[0m value = "[parameters('dcrResourceGroup')]"
                                        }
                                      [32m+[0m[0m userWorkspaceResourceId                         = {
                                          [32m+[0m[0m value = "[parameters('userWorkspaceResourceId')]"
                                        }
                                      [32m+[0m[0m vmName                                          = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                      [32m+[0m[0m workspaceRegion                                 = {
                                          [32m+[0m[0m value = "[parameters('workspaceRegion')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m dcrId                                           = {
                                              [32m+[0m[0m type = "string"
                                            }
                                          [32m+[0m[0m dcrName                                         = {
                                              [32m+[0m[0m type = "string"
                                            }
                                          [32m+[0m[0m dcrResourceGroup                                = {
                                              [32m+[0m[0m type = "string"
                                            }
                                          [32m+[0m[0m enableCollectionOfSqlQueriesForSecurityResearch = {
                                              [32m+[0m[0m type = "bool"
                                            }
                                          [32m+[0m[0m resourceGroup                                   = {
                                              [32m+[0m[0m type = "string"
                                            }
                                          [32m+[0m[0m userWorkspaceResourceId                         = {
                                              [32m+[0m[0m type = "string"
                                            }
                                          [32m+[0m[0m vmName                                          = {
                                              [32m+[0m[0m type = "string"
                                            }
                                          [32m+[0m[0m workspaceRegion                                 = {
                                              [32m+[0m[0m type = "string"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2022-09-01"
                                              [32m+[0m[0m condition  = "[empty(parameters('dcrResourceGroup'))]"
                                              [32m+[0m[0m location   = "[variables('defaultRGLocation')]"
                                              [32m+[0m[0m name       = "[variables('defaultRGName')]"
                                              [32m+[0m[0m tags       = {
                                                  [32m+[0m[0m createdBy = "MicrosoftDefenderForSQL"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Resources/resourceGroups"
                                            },
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion    = "2022-09-01"
                                              [32m+[0m[0m condition     = "[empty(parameters('dcrId'))]"
                                              [32m+[0m[0m dependsOn     = [
                                                  [32m+[0m[0m "[variables('defaultRGName')]",
                                                ]
                                              [32m+[0m[0m name          = "[variables('deployDataCollectionRules')]"
                                              [32m+[0m[0m properties    = {
                                                  [32m+[0m[0m expressionEvaluationOptions = {
                                                      [32m+[0m[0m scope = "inner"
                                                    }
                                                  [32m+[0m[0m mode                        = "Incremental"
                                                  [32m+[0m[0m parameters                  = {
                                                      [32m+[0m[0m dcrId                                           = {
                                                          [32m+[0m[0m value = "[variables('dcrId')]"
                                                        }
                                                      [32m+[0m[0m dcrName                                         = {
                                                          [32m+[0m[0m value = "[variables('dcrName')]"
                                                        }
                                                      [32m+[0m[0m defaultRGLocation                               = {
                                                          [32m+[0m[0m value = "[variables('defaultRGLocation')]"
                                                        }
                                                      [32m+[0m[0m enableCollectionOfSqlQueriesForSecurityResearch = {
                                                          [32m+[0m[0m value = "[parameters('enableCollectionOfSqlQueriesForSecurityResearch')]"
                                                        }
                                                      [32m+[0m[0m workspaceResourceId                             = {
                                                          [32m+[0m[0m value = "[parameters('userWorkspaceResourceId')]"
                                                        }
                                                    }
                                                  [32m+[0m[0m template                    = {
                                                      [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                                      [32m+[0m[0m parameters     = {
                                                          [32m+[0m[0m dcrId                                           = {
                                                              [32m+[0m[0m type = "string"
                                                            }
                                                          [32m+[0m[0m dcrName                                         = {
                                                              [32m+[0m[0m type = "string"
                                                            }
                                                          [32m+[0m[0m defaultRGLocation                               = {
                                                              [32m+[0m[0m type = "string"
                                                            }
                                                          [32m+[0m[0m enableCollectionOfSqlQueriesForSecurityResearch = {
                                                              [32m+[0m[0m type = "bool"
                                                            }
                                                          [32m+[0m[0m workspaceResourceId                             = {
                                                              [32m+[0m[0m type = "string"
                                                            }
                                                        }
                                                      [32m+[0m[0m resources      = [
                                                          [32m+[0m[0m {
                                                              [32m+[0m[0m apiVersion = "2021-04-01"
                                                              [32m+[0m[0m location   = "[parameters('defaultRGLocation')]"
                                                              [32m+[0m[0m name       = "[parameters('dcrName')]"
                                                              [32m+[0m[0m properties = {
                                                                  [32m+[0m[0m dataFlows    = [
                                                                      [32m+[0m[0m {
                                                                          [32m+[0m[0m destinations = [
                                                                              [32m+[0m[0m "LogAnalyticsDest",
                                                                            ]
                                                                          [32m+[0m[0m streams      = [
                                                                              [32m+[0m[0m "Microsoft-DefenderForSqlAlerts",
                                                                              [32m+[0m[0m "Microsoft-DefenderForSqlLogins",
                                                                              [32m+[0m[0m "Microsoft-DefenderForSqlTelemetry",
                                                                              [32m+[0m[0m "Microsoft-DefenderForSqlScanEvents",
                                                                              [32m+[0m[0m "Microsoft-DefenderForSqlScanResults",
                                                                            ]
                                                                        },
                                                                    ]
                                                                  [32m+[0m[0m dataSources  = {
                                                                      [32m+[0m[0m extensions = [
                                                                          [32m+[0m[0m {
                                                                              [32m+[0m[0m extensionName     = "MicrosoftDefenderForSQL"
                                                                              [32m+[0m[0m extensionSettings = {
                                                                                  [32m+[0m[0m enableCollectionOfSqlQueriesForSecurityResearch = "[parameters('enableCollectionOfSqlQueriesForSecurityResearch')]"
                                                                                }
                                                                              [32m+[0m[0m name              = "MicrosoftDefenderForSQL"
                                                                              [32m+[0m[0m streams           = [
                                                                                  [32m+[0m[0m "Microsoft-DefenderForSqlAlerts",
                                                                                  [32m+[0m[0m "Microsoft-DefenderForSqlLogins",
                                                                                  [32m+[0m[0m "Microsoft-DefenderForSqlTelemetry",
                                                                                  [32m+[0m[0m "Microsoft-DefenderForSqlScanEvents",
                                                                                  [32m+[0m[0m "Microsoft-DefenderForSqlScanResults",
                                                                                ]
                                                                            },
                                                                        ]
                                                                    }
                                                                  [32m+[0m[0m description  = "Data collection rule for Microsoft Defender for SQL. Deleting this rule will break the detection of security vulnerabilities."
                                                                  [32m+[0m[0m destinations = {
                                                                      [32m+[0m[0m logAnalytics = [
                                                                          [32m+[0m[0m {
                                                                              [32m+[0m[0m name                = "LogAnalyticsDest"
                                                                              [32m+[0m[0m workspaceResourceId = "[parameters('workspaceResourceId')]"
                                                                            },
                                                                        ]
                                                                    }
                                                                }
                                                              [32m+[0m[0m tags       = {
                                                                  [32m+[0m[0m createdBy = "MicrosoftDefenderForSQL"
                                                                }
                                                              [32m+[0m[0m type       = "Microsoft.Insights/dataCollectionRules"
                                                            },
                                                        ]
                                                      [32m+[0m[0m variables      = {}
                                                    }
                                                }
                                              [32m+[0m[0m resourceGroup = "[variables('defaultRGName')]"
                                              [32m+[0m[0m type          = "Microsoft.Resources/deployments"
                                            },
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion    = "2022-09-01"
                                              [32m+[0m[0m dependsOn     = [
                                                  [32m+[0m[0m "[variables('deployDataCollectionRules')]",
                                                ]
                                              [32m+[0m[0m name          = "[variables('deployDataCollectionRulesAssociation')]"
                                              [32m+[0m[0m properties    = {
                                                  [32m+[0m[0m expressionEvaluationOptions = {
                                                      [32m+[0m[0m scope = "inner"
                                                    }
                                                  [32m+[0m[0m mode                        = "Incremental"
                                                  [32m+[0m[0m parameters                  = {
                                                      [32m+[0m[0m dcrId    = {
                                                          [32m+[0m[0m value = "[variables('dcrId')]"
                                                        }
                                                      [32m+[0m[0m dcraName = {
                                                          [32m+[0m[0m value = "[variables('dcraName')]"
                                                        }
                                                    }
                                                  [32m+[0m[0m template                    = {
                                                      [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                                      [32m+[0m[0m parameters     = {
                                                          [32m+[0m[0m dcrId    = {
                                                              [32m+[0m[0m type = "string"
                                                            }
                                                          [32m+[0m[0m dcraName = {
                                                              [32m+[0m[0m type = "string"
                                                            }
                                                        }
                                                      [32m+[0m[0m resources      = [
                                                          [32m+[0m[0m {
                                                              [32m+[0m[0m apiVersion = "2021-04-01"
                                                              [32m+[0m[0m name       = "[parameters('dcraName')]"
                                                              [32m+[0m[0m properties = {
                                                                  [32m+[0m[0m dataCollectionRuleId = "[parameters('dcrId')]"
                                                                  [32m+[0m[0m description          = "Configure association between Arc-enabled SQL Server and the Microsoft Defender for SQL user-defined DCR. Deleting this association will break the detection of security vulnerabilities for this Arc-enabled SQL Server."
                                                                }
                                                              [32m+[0m[0m type       = "Microsoft.HybridCompute/machines/providers/dataCollectionRuleAssociations"
                                                            },
                                                        ]
                                                    }
                                                }
                                              [32m+[0m[0m resourceGroup = "[parameters('resourceGroup')]"
                                              [32m+[0m[0m type          = "Microsoft.Resources/deployments"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {
                                          [32m+[0m[0m dcrId                                = "[parameters('dcrId')]"
                                          [32m+[0m[0m dcrName                              = "[parameters('dcrName')]"
                                          [32m+[0m[0m dcraName                             = "[concat(parameters('vmName'),'/Microsoft.Insights/MicrosoftDefenderForSQL-RulesAssociation')]"
                                          [32m+[0m[0m defaultRGLocation                    = "[parameters('workspaceRegion')]"
                                          [32m+[0m[0m defaultRGName                        = "[parameters('resourceGroup')]"
                                          [32m+[0m[0m deployDataCollectionRules            = "[concat('deployDataCollectionRules-', uniqueString(deployment().name))]"
                                          [32m+[0m[0m deployDataCollectionRulesAssociation = "[concat('deployDataCollectionRulesAssociation-', uniqueString(deployment().name))]"
                                          [32m+[0m[0m locationCode                         = "[if(contains(variables('locationLongNameToShortMap'), parameters('workspaceRegion')), variables('locationLongNameToShortMap')[parameters('workspaceRegion')], parameters('workspaceRegion'))]"
                                          [32m+[0m[0m locationLongNameToShortMap           = {
                                              [32m+[0m[0m australiacentral   = "CAU"
                                              [32m+[0m[0m australiaeast      = "EAU"
                                              [32m+[0m[0m australiasoutheast = "SEAU"
                                              [32m+[0m[0m brazilsouth        = "CQ"
                                              [32m+[0m[0m canadacentral      = "CCA"
                                              [32m+[0m[0m canadaeast         = "CCA"
                                              [32m+[0m[0m centralindia       = "CIN"
                                              [32m+[0m[0m centralus          = "CUS"
                                              [32m+[0m[0m eastasia           = "EA"
                                              [32m+[0m[0m eastus             = "EUS"
                                              [32m+[0m[0m eastus2            = "EUS2"
                                              [32m+[0m[0m eastus2euap        = "eus2p"
                                              [32m+[0m[0m francecentral      = "PAR"
                                              [32m+[0m[0m germanywestcentral = "DEWC"
                                              [32m+[0m[0m japaneast          = "EJP"
                                              [32m+[0m[0m jioindiawest       = "CIN"
                                              [32m+[0m[0m koreacentral       = "SE"
                                              [32m+[0m[0m koreasouth         = "SE"
                                              [32m+[0m[0m northcentralus     = "NCUS"
                                              [32m+[0m[0m northeurope        = "NEU"
                                              [32m+[0m[0m norwayeast         = "NOE"
                                              [32m+[0m[0m southafricanorth   = "JNB"
                                              [32m+[0m[0m southcentralus     = "SCUS"
                                              [32m+[0m[0m southeastasia      = "SEA"
                                              [32m+[0m[0m southindia         = "CIN"
                                              [32m+[0m[0m swedencentral      = "SEC"
                                              [32m+[0m[0m switzerlandnorth   = "CHN"
                                              [32m+[0m[0m switzerlandwest    = "CHW"
                                              [32m+[0m[0m uaenorth           = "DXB"
                                              [32m+[0m[0m uksouth            = "SUK"
                                              [32m+[0m[0m ukwest             = "WUK"
                                              [32m+[0m[0m westcentralus      = "WCUS"
                                              [32m+[0m[0m westeurope         = "WEU"
                                              [32m+[0m[0m westindia          = "CIN"
                                              [32m+[0m[0m westus             = "WUS"
                                              [32m+[0m[0m westus2            = "WUS2"
                                            }
                                          [32m+[0m[0m subscriptionId                       = "[subscription().subscriptionId]"
                                        }
                                    }
                                }
                            }
                          [32m+[0m[0m deploymentScope    = "subscription"
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('workspaceRegion')]"
                                      [32m+[0m[0m field  = "location"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('dcrName')]"
                                      [32m+[0m[0m field  = "name"
                                    },
                                ]
                            }
                          [32m+[0m[0m existenceScope     = "subscription"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/dataCollectionRules"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-MDFC-Arc-Sql-DefenderSQL-DCR"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-MDFC-SQL-AMA"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Policy is deprecated as the built-in policy now supports bringing your own UAMI and DCR. Superseded by https://www.azadvertizer.net/azpolicyadvertizer/f91991d1-5383-4c95-8ee5-5ac423dd8bb1.html"
              [32m+[0m[0m displayName = "[Deprecated]: Configure SQL Virtual Machines to automatically install Azure Monitor Agent"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Security Center"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m supersededBy         = "f91991d1-5383-4c95-8ee5-5ac423dd8bb1"
                  [32m+[0m[0m version              = "1.0.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect                   = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m identityResourceGroup    = {
                      [32m+[0m[0m defaultValue = ""
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The name of the resource group created by the policy."
                          [32m+[0m[0m displayName = "Identity Resource Group"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                  [32m+[0m[0m userAssignedIdentityName = {
                      [32m+[0m[0m defaultValue = ""
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The name of the user assigned managed identity."
                          [32m+[0m[0m displayName = "User Assigned Managed Identity Name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Compute/virtualMachines"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m field = "Microsoft.Compute/virtualMachines/storageProfile.osDisk.osType"
                              [32m+[0m[0m like  = "Windows*"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "microsoftsqlserver"
                              [32m+[0m[0m field  = "Microsoft.Compute/imagePublisher"
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m identityResourceGroup       = {
                                          [32m+[0m[0m value = "[parameters('identityResourceGroup')]"
                                        }
                                      [32m+[0m[0m location                    = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m userAssignedIdentityName    = {
                                          [32m+[0m[0m value = "[parameters('userAssignedIdentityName')]"
                                        }
                                      [32m+[0m[0m userAssignedManagedIdentity = {
                                          [32m+[0m[0m value = "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', trim(parameters('identityResourceGroup')), '/providers/Microsoft.ManagedIdentity/userAssignedIdentities/', trim(parameters('userAssignedIdentityName')))]"
                                        }
                                      [32m+[0m[0m vmName                      = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m identityResourceGroup       = {
                                              [32m+[0m[0m type = "string"
                                            }
                                          [32m+[0m[0m location                    = {
                                              [32m+[0m[0m type = "string"
                                            }
                                          [32m+[0m[0m userAssignedIdentityName    = {
                                              [32m+[0m[0m type = "string"
                                            }
                                          [32m+[0m[0m userAssignedManagedIdentity = {
                                              [32m+[0m[0m type = "string"
                                            }
                                          [32m+[0m[0m vmName                      = {
                                              [32m+[0m[0m type = "string"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2023-03-01"
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('vmName'), '/', variables('extensionName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m autoUpgradeMinorVersion = true
                                                  [32m+[0m[0m enableAutomaticUpgrade  = true
                                                  [32m+[0m[0m publisher               = "[variables('extensionPublisher')]"
                                                  [32m+[0m[0m settings                = {
                                                      [32m+[0m[0m authentication = {
                                                          [32m+[0m[0m managedIdentity = {
                                                              [32m+[0m[0m identifier-name  = "mi_res_id"
                                                              [32m+[0m[0m identifier-value = "[parameters('userAssignedManagedIdentity')]"
                                                            }
                                                        }
                                                    }
                                                  [32m+[0m[0m type                    = "[variables('extensionType')]"
                                                  [32m+[0m[0m typeHandlerVersion      = "[variables('extensionTypeHandlerVersion')]"
                                                }
                                              [32m+[0m[0m tags       = {
                                                  [32m+[0m[0m createdBy = "MicrosoftDefenderForSQL"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Compute/virtualMachines/extensions"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {
                                          [32m+[0m[0m extensionName               = "AzureMonitorWindowsAgent"
                                          [32m+[0m[0m extensionPublisher          = "Microsoft.Azure.Monitor"
                                          [32m+[0m[0m extensionType               = "AzureMonitorWindowsAgent"
                                          [32m+[0m[0m extensionTypeHandlerVersion = "1.2"
                                        }
                                    }
                                }
                            }
                          [32m+[0m[0m evaluationDelay    = "AfterProvisioning"
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "AzureMonitorWindowsAgent"
                                      [32m+[0m[0m field  = "Microsoft.Compute/virtualMachines/extensions/type"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "Microsoft.Azure.Monitor"
                                      [32m+[0m[0m field  = "Microsoft.Compute/virtualMachines/extensions/publisher"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field = "Microsoft.Compute/virtualMachines/extensions/provisioningState"
                                      [32m+[0m[0m in    = [
                                          [32m+[0m[0m "Succeeded",
                                          [32m+[0m[0m "Provisioning succeeded",
                                        ]
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[concat(field('fullName'), '/AzureMonitorWindowsAgent')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/9980e02c-c2be-4d73-94e8-173b1dc7cf3c",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Compute/virtualMachines/extensions"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-MDFC-SQL-AMA"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-MDFC-SQL-DefenderSQL"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Policy is deprecated as the built-in policy now supports bringing your own UAMI and DCR. Superseded by https://www.azadvertizer.net/azpolicyadvertizer/ddca0ddc-4e9d-4bbb-92a1-f7c4dd7ef7ce.html"
              [32m+[0m[0m displayName = "[Deprecated]: Configure SQL Virtual Machines to automatically install Microsoft Defender for SQL"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Security Center"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m supersededBy         = "ddca0ddc-4e9d-4bbb-92a1-f7c4dd7ef7ce"
                  [32m+[0m[0m version              = "1.0.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m dcrId            = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Id of the Data Collection Rule."
                          [32m+[0m[0m displayName = "Data Collection Rule Id"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m dcrName          = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Name of the Data Collection Rule."
                          [32m+[0m[0m displayName = "Data Collection Rule Name"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m dcrResourceGroup = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Resource Group of the Data Collection Rule."
                          [32m+[0m[0m displayName = "Data Collection Rule Resource Group"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m workspaceRegion  = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Region of the Log Analytics workspace destination for the Data Collection Rule."
                          [32m+[0m[0m displayName = "Workspace region"
                          [32m+[0m[0m strongType  = "location"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Compute/virtualMachines"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m field = "Microsoft.Compute/virtualMachines/storageProfile.osDisk.osType"
                              [32m+[0m[0m like  = "Windows*"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "microsoftsqlserver"
                              [32m+[0m[0m field  = "Microsoft.Compute/imagePublisher"
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m dcrId            = {
                                          [32m+[0m[0m value = "[parameters('dcrId')]"
                                        }
                                      [32m+[0m[0m dcrName          = {
                                          [32m+[0m[0m value = "[parameters('dcrName')]"
                                        }
                                      [32m+[0m[0m dcrResourceGroup = {
                                          [32m+[0m[0m value = "[parameters('dcrResourceGroup')]"
                                        }
                                      [32m+[0m[0m location         = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m vmName           = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                      [32m+[0m[0m workspaceRegion  = {
                                          [32m+[0m[0m value = "[parameters('workspaceRegion')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m dcrId            = {
                                              [32m+[0m[0m type = "string"
                                            }
                                          [32m+[0m[0m dcrName          = {
                                              [32m+[0m[0m type = "string"
                                            }
                                          [32m+[0m[0m dcrResourceGroup = {
                                              [32m+[0m[0m type = "string"
                                            }
                                          [32m+[0m[0m location         = {
                                              [32m+[0m[0m type = "string"
                                            }
                                          [32m+[0m[0m vmName           = {
                                              [32m+[0m[0m type = "string"
                                            }
                                          [32m+[0m[0m workspaceRegion  = {
                                              [32m+[0m[0m type = "string"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2023-03-01"
                                              [32m+[0m[0m dependsOn  = [
                                                  [32m+[0m[0m "[extensionResourceId(concat('/subscriptions/', variables('subscriptionId'), '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Compute/virtualMachines/', parameters('vmName')), 'Microsoft.Insights/dataCollectionRuleAssociations','MicrosoftDefenderForSQL-RulesAssociation')]",
                                                ]
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('vmName'), '/', 'MicrosoftDefenderForSQL')]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m autoUpgradeMinorVersion = true
                                                  [32m+[0m[0m enableAutomaticUpgrade  = true
                                                  [32m+[0m[0m publisher               = "Microsoft.Azure.AzureDefenderForSQL"
                                                  [32m+[0m[0m type                    = "AdvancedThreatProtection.Windows"
                                                  [32m+[0m[0m typeHandlerVersion      = "2.0"
                                                }
                                              [32m+[0m[0m tags       = {
                                                  [32m+[0m[0m createdBy = "MicrosoftDefenderForSQL"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Compute/virtualMachines/extensions"
                                            },
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2021-04-01"
                                              [32m+[0m[0m name       = "[variables('dcraName')]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m dataCollectionRuleId = "[variables('dcrId')]"
                                                  [32m+[0m[0m description          = "Configure association between SQL Virtual Machine and the Microsoft Defender for SQL DCR. Deleting this association will break the detection of security vulnerabilities for this SQL Virtual Machine."
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Compute/virtualMachines/providers/dataCollectionRuleAssociations"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {
                                          [32m+[0m[0m actualLocation             = "[if(empty(parameters('workspaceRegion')), parameters('location'), parameters('workspaceRegion'))]"
                                          [32m+[0m[0m dcrId                      = "[parameters('dcrId')]"
                                          [32m+[0m[0m dcrName                    = "[parameters('dcrName')]"
                                          [32m+[0m[0m dcraName                   = "[concat(parameters('vmName'),'/Microsoft.Insights/MicrosoftDefenderForSQL-RulesAssociation')]"
                                          [32m+[0m[0m defaultRGName              = "[parameters('dcrResourceGroup')]"
                                          [32m+[0m[0m locationCode               = "[if(contains(variables('locationLongNameToShortMap'), variables('actualLocation')), variables('locationLongNameToShortMap')[variables('actualLocation')], variables('actualLocation'))]"
                                          [32m+[0m[0m locationLongNameToShortMap = {
                                              [32m+[0m[0m australiacentral   = "CAU"
                                              [32m+[0m[0m australiaeast      = "EAU"
                                              [32m+[0m[0m australiasoutheast = "SEAU"
                                              [32m+[0m[0m brazilsouth        = "CQ"
                                              [32m+[0m[0m canadacentral      = "CCA"
                                              [32m+[0m[0m canadaeast         = "CCA"
                                              [32m+[0m[0m centralindia       = "CIN"
                                              [32m+[0m[0m centralus          = "CUS"
                                              [32m+[0m[0m eastasia           = "EA"
                                              [32m+[0m[0m eastus             = "EUS"
                                              [32m+[0m[0m eastus2            = "EUS2"
                                              [32m+[0m[0m eastus2euap        = "eus2p"
                                              [32m+[0m[0m francecentral      = "PAR"
                                              [32m+[0m[0m germanywestcentral = "DEWC"
                                              [32m+[0m[0m japaneast          = "EJP"
                                              [32m+[0m[0m jioindiawest       = "CIN"
                                              [32m+[0m[0m koreacentral       = "SE"
                                              [32m+[0m[0m koreasouth         = "SE"
                                              [32m+[0m[0m northcentralus     = "NCUS"
                                              [32m+[0m[0m northeurope        = "NEU"
                                              [32m+[0m[0m norwayeast         = "NOE"
                                              [32m+[0m[0m southafricanorth   = "JNB"
                                              [32m+[0m[0m southcentralus     = "SCUS"
                                              [32m+[0m[0m southeastasia      = "SEA"
                                              [32m+[0m[0m southindia         = "CIN"
                                              [32m+[0m[0m swedencentral      = "SEC"
                                              [32m+[0m[0m switzerlandnorth   = "CHN"
                                              [32m+[0m[0m switzerlandwest    = "CHW"
                                              [32m+[0m[0m uaenorth           = "DXB"
                                              [32m+[0m[0m uksouth            = "SUK"
                                              [32m+[0m[0m ukwest             = "WUK"
                                              [32m+[0m[0m westcentralus      = "WCUS"
                                              [32m+[0m[0m westeurope         = "WEU"
                                              [32m+[0m[0m westindia          = "CIN"
                                              [32m+[0m[0m westus             = "WUS"
                                              [32m+[0m[0m westus2            = "WUS2"
                                            }
                                          [32m+[0m[0m subscriptionId             = "[subscription().subscriptionId]"
                                        }
                                    }
                                }
                            }
                          [32m+[0m[0m evaluationDelay    = "AfterProvisioning"
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "AdvancedThreatProtection.Windows"
                                      [32m+[0m[0m field  = "Microsoft.Compute/virtualMachines/extensions/type"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "Microsoft.Azure.AzureDefenderForSQL"
                                      [32m+[0m[0m field  = "Microsoft.Compute/virtualMachines/extensions/publisher"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field = "Microsoft.Compute/virtualMachines/extensions/provisioningState"
                                      [32m+[0m[0m in    = [
                                          [32m+[0m[0m "Succeeded",
                                          [32m+[0m[0m "Provisioning succeeded",
                                        ]
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[concat(field('fullName'), '/MicrosoftDefenderForSQL')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Compute/virtualMachines/extensions"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-MDFC-SQL-DefenderSQL"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-MDFC-SQL-DefenderSQL-DCR"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Policy is deprecated as the built-in policy now supports bringing your own UAMI and DCR. Superseded by https://www.azadvertizer.net/azpolicyadvertizer/04754ef9-9ae3-4477-bf17-86ef50026304.html"
              [32m+[0m[0m displayName = "[Deprecated]: Configure SQL Virtual Machines to auto install Microsoft Defender for SQL and DCR with a user-defined LAW"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Security Center"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m supersededBy         = "04754ef9-9ae3-4477-bf17-86ef50026304"
                  [32m+[0m[0m version              = "1.0.1-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m dcrId                                           = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Id of the Data Collection Rule."
                          [32m+[0m[0m displayName = "Data Collection Rule Id"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m dcrName                                         = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Name of the Data Collection Rule."
                          [32m+[0m[0m displayName = "Data Collection Rule Name"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m dcrResourceGroup                                = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Resource Group of the Data Collection Rule."
                          [32m+[0m[0m displayName = "Data Collection Rule Resource Group"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m effect                                          = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m enableCollectionOfSqlQueriesForSecurityResearch = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m true,
                          [32m+[0m[0m false,
                        ]
                      [32m+[0m[0m defaultValue  = false
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the collection of SQL queries for security research."
                          [32m+[0m[0m displayName = "Enable collection of SQL queries for security research"
                        }
                      [32m+[0m[0m type          = "Boolean"
                    }
                  [32m+[0m[0m userWorkspaceResourceId                         = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Workspace resource Id of the Log Analytics workspace destination for the Data Collection Rule."
                          [32m+[0m[0m displayName = "Workspace Resource Id"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m workspaceRegion                                 = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Region of the Log Analytics workspace destination for the Data Collection Rule."
                          [32m+[0m[0m displayName = "Workspace region"
                          [32m+[0m[0m strongType  = "location"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Compute/virtualMachines"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m field = "Microsoft.Compute/virtualMachines/storageProfile.osDisk.osType"
                              [32m+[0m[0m like  = "Windows*"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "microsoftsqlserver"
                              [32m+[0m[0m field  = "Microsoft.Compute/imagePublisher"
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m location   = "eastus"
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m dcrId                                           = {
                                          [32m+[0m[0m value = "[parameters('dcrId')]"
                                        }
                                      [32m+[0m[0m dcrName                                         = {
                                          [32m+[0m[0m value = "[parameters('dcrName')]"
                                        }
                                      [32m+[0m[0m dcrResourceGroup                                = {
                                          [32m+[0m[0m value = "[parameters('dcrResourceGroup')]"
                                        }
                                      [32m+[0m[0m enableCollectionOfSqlQueriesForSecurityResearch = {
                                          [32m+[0m[0m value = "[parameters('enableCollectionOfSqlQueriesForSecurityResearch')]"
                                        }
                                      [32m+[0m[0m location                                        = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m resourceGroup                                   = {
                                          [32m+[0m[0m value = "[resourceGroup().name]"
                                        }
                                      [32m+[0m[0m userWorkspaceResourceId                         = {
                                          [32m+[0m[0m value = "[parameters('userWorkspaceResourceId')]"
                                        }
                                      [32m+[0m[0m vmName                                          = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                      [32m+[0m[0m workspaceRegion                                 = {
                                          [32m+[0m[0m value = "[parameters('workspaceRegion')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m dcrId                                           = {
                                              [32m+[0m[0m type = "string"
                                            }
                                          [32m+[0m[0m dcrName                                         = {
                                              [32m+[0m[0m type = "string"
                                            }
                                          [32m+[0m[0m dcrResourceGroup                                = {
                                              [32m+[0m[0m type = "string"
                                            }
                                          [32m+[0m[0m enableCollectionOfSqlQueriesForSecurityResearch = {
                                              [32m+[0m[0m type = "bool"
                                            }
                                          [32m+[0m[0m location                                        = {
                                              [32m+[0m[0m type = "string"
                                            }
                                          [32m+[0m[0m resourceGroup                                   = {
                                              [32m+[0m[0m type = "string"
                                            }
                                          [32m+[0m[0m userWorkspaceResourceId                         = {
                                              [32m+[0m[0m type = "string"
                                            }
                                          [32m+[0m[0m vmName                                          = {
                                              [32m+[0m[0m type = "string"
                                            }
                                          [32m+[0m[0m workspaceRegion                                 = {
                                              [32m+[0m[0m type = "string"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2022-09-01"
                                              [32m+[0m[0m condition  = "[empty(parameters('dcrResourceGroup'))]"
                                              [32m+[0m[0m location   = "[variables('defaultRGLocation')]"
                                              [32m+[0m[0m name       = "[variables('defaultRGName')]"
                                              [32m+[0m[0m tags       = {
                                                  [32m+[0m[0m createdBy = "MicrosoftDefenderForSQL"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Resources/resourceGroups"
                                            },
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion    = "2022-09-01"
                                              [32m+[0m[0m name          = "[variables('deployDefenderForSQL')]"
                                              [32m+[0m[0m properties    = {
                                                  [32m+[0m[0m expressionEvaluationOptions = {
                                                      [32m+[0m[0m scope = "inner"
                                                    }
                                                  [32m+[0m[0m mode                        = "Incremental"
                                                  [32m+[0m[0m parameters                  = {
                                                      [32m+[0m[0m location = {
                                                          [32m+[0m[0m value = "[parameters('location')]"
                                                        }
                                                      [32m+[0m[0m vmName   = {
                                                          [32m+[0m[0m value = "[parameters('vmName')]"
                                                        }
                                                    }
                                                  [32m+[0m[0m template                    = {
                                                      [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                                      [32m+[0m[0m parameters     = {
                                                          [32m+[0m[0m location = {
                                                              [32m+[0m[0m type = "string"
                                                            }
                                                          [32m+[0m[0m vmName   = {
                                                              [32m+[0m[0m type = "string"
                                                            }
                                                        }
                                                      [32m+[0m[0m resources      = [
                                                          [32m+[0m[0m {
                                                              [32m+[0m[0m apiVersion = "2023-03-01"
                                                              [32m+[0m[0m location   = "[parameters('location')]"
                                                              [32m+[0m[0m name       = "[concat(parameters('vmName'), '/', 'MicrosoftDefenderForSQL')]"
                                                              [32m+[0m[0m properties = {
                                                                  [32m+[0m[0m autoUpgradeMinorVersion = true
                                                                  [32m+[0m[0m enableAutomaticUpgrade  = true
                                                                  [32m+[0m[0m publisher               = "Microsoft.Azure.AzureDefenderForSQL"
                                                                  [32m+[0m[0m type                    = "AdvancedThreatProtection.Windows"
                                                                  [32m+[0m[0m typeHandlerVersion      = "2.0"
                                                                }
                                                              [32m+[0m[0m tags       = {
                                                                  [32m+[0m[0m createdBy = "MicrosoftDefenderForSQL"
                                                                }
                                                              [32m+[0m[0m type       = "Microsoft.Compute/virtualMachines/extensions"
                                                            },
                                                        ]
                                                      [32m+[0m[0m variables      = {}
                                                    }
                                                }
                                              [32m+[0m[0m resourceGroup = "[parameters('resourceGroup')]"
                                              [32m+[0m[0m type          = "Microsoft.Resources/deployments"
                                            },
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion    = "2022-09-01"
                                              [32m+[0m[0m condition     = "[empty(parameters('dcrId'))]"
                                              [32m+[0m[0m dependsOn     = [
                                                  [32m+[0m[0m "[variables('defaultRGName')]",
                                                ]
                                              [32m+[0m[0m name          = "[variables('deployDataCollectionRules')]"
                                              [32m+[0m[0m properties    = {
                                                  [32m+[0m[0m expressionEvaluationOptions = {
                                                      [32m+[0m[0m scope = "inner"
                                                    }
                                                  [32m+[0m[0m mode                        = "Incremental"
                                                  [32m+[0m[0m parameters                  = {
                                                      [32m+[0m[0m dcrId                                           = {
                                                          [32m+[0m[0m value = "[variables('dcrId')]"
                                                        }
                                                      [32m+[0m[0m dcrName                                         = {
                                                          [32m+[0m[0m value = "[variables('dcrName')]"
                                                        }
                                                      [32m+[0m[0m defaultRGLocation                               = {
                                                          [32m+[0m[0m value = "[variables('defaultRGLocation')]"
                                                        }
                                                      [32m+[0m[0m enableCollectionOfSqlQueriesForSecurityResearch = {
                                                          [32m+[0m[0m value = "[parameters('enableCollectionOfSqlQueriesForSecurityResearch')]"
                                                        }
                                                      [32m+[0m[0m workspaceResourceId                             = {
                                                          [32m+[0m[0m value = "[parameters('userWorkspaceResourceId')]"
                                                        }
                                                    }
                                                  [32m+[0m[0m template                    = {
                                                      [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                                      [32m+[0m[0m parameters     = {
                                                          [32m+[0m[0m dcrId                                           = {
                                                              [32m+[0m[0m type = "string"
                                                            }
                                                          [32m+[0m[0m dcrName                                         = {
                                                              [32m+[0m[0m type = "string"
                                                            }
                                                          [32m+[0m[0m defaultRGLocation                               = {
                                                              [32m+[0m[0m type = "string"
                                                            }
                                                          [32m+[0m[0m enableCollectionOfSqlQueriesForSecurityResearch = {
                                                              [32m+[0m[0m type = "bool"
                                                            }
                                                          [32m+[0m[0m workspaceResourceId                             = {
                                                              [32m+[0m[0m type = "string"
                                                            }
                                                        }
                                                      [32m+[0m[0m resources      = [
                                                          [32m+[0m[0m {
                                                              [32m+[0m[0m apiVersion = "2021-04-01"
                                                              [32m+[0m[0m location   = "[parameters('defaultRGLocation')]"
                                                              [32m+[0m[0m name       = "[parameters('dcrName')]"
                                                              [32m+[0m[0m properties = {
                                                                  [32m+[0m[0m dataFlows    = [
                                                                      [32m+[0m[0m {
                                                                          [32m+[0m[0m destinations = [
                                                                              [32m+[0m[0m "LogAnalyticsDest",
                                                                            ]
                                                                          [32m+[0m[0m streams      = [
                                                                              [32m+[0m[0m "Microsoft-DefenderForSqlAlerts",
                                                                              [32m+[0m[0m "Microsoft-DefenderForSqlLogins",
                                                                              [32m+[0m[0m "Microsoft-DefenderForSqlTelemetry",
                                                                              [32m+[0m[0m "Microsoft-DefenderForSqlScanEvents",
                                                                              [32m+[0m[0m "Microsoft-DefenderForSqlScanResults",
                                                                            ]
                                                                        },
                                                                    ]
                                                                  [32m+[0m[0m dataSources  = {
                                                                      [32m+[0m[0m extensions = [
                                                                          [32m+[0m[0m {
                                                                              [32m+[0m[0m extensionName     = "MicrosoftDefenderForSQL"
                                                                              [32m+[0m[0m extensionSettings = {
                                                                                  [32m+[0m[0m enableCollectionOfSqlQueriesForSecurityResearch = "[parameters('enableCollectionOfSqlQueriesForSecurityResearch')]"
                                                                                }
                                                                              [32m+[0m[0m name              = "MicrosoftDefenderForSQL"
                                                                              [32m+[0m[0m streams           = [
                                                                                  [32m+[0m[0m "Microsoft-DefenderForSqlAlerts",
                                                                                  [32m+[0m[0m "Microsoft-DefenderForSqlLogins",
                                                                                  [32m+[0m[0m "Microsoft-DefenderForSqlTelemetry",
                                                                                  [32m+[0m[0m "Microsoft-DefenderForSqlScanEvents",
                                                                                  [32m+[0m[0m "Microsoft-DefenderForSqlScanResults",
                                                                                ]
                                                                            },
                                                                        ]
                                                                    }
                                                                  [32m+[0m[0m description  = "Data collection rule for Microsoft Defender for SQL. Deleting this rule will break the detection of security vulnerabilities."
                                                                  [32m+[0m[0m destinations = {
                                                                      [32m+[0m[0m logAnalytics = [
                                                                          [32m+[0m[0m {
                                                                              [32m+[0m[0m name                = "LogAnalyticsDest"
                                                                              [32m+[0m[0m workspaceResourceId = "[parameters('workspaceResourceId')]"
                                                                            },
                                                                        ]
                                                                    }
                                                                }
                                                              [32m+[0m[0m tags       = {
                                                                  [32m+[0m[0m createdBy = "MicrosoftDefenderForSQL"
                                                                }
                                                              [32m+[0m[0m type       = "Microsoft.Insights/dataCollectionRules"
                                                            },
                                                        ]
                                                      [32m+[0m[0m variables      = {}
                                                    }
                                                }
                                              [32m+[0m[0m resourceGroup = "[variables('defaultRGName')]"
                                              [32m+[0m[0m type          = "Microsoft.Resources/deployments"
                                            },
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion    = "2022-09-01"
                                              [32m+[0m[0m dependsOn     = [
                                                  [32m+[0m[0m "[variables('deployDataCollectionRules')]",
                                                ]
                                              [32m+[0m[0m name          = "[variables('deployDataCollectionRulesAssociation')]"
                                              [32m+[0m[0m properties    = {
                                                  [32m+[0m[0m expressionEvaluationOptions = {
                                                      [32m+[0m[0m scope = "inner"
                                                    }
                                                  [32m+[0m[0m mode                        = "Incremental"
                                                  [32m+[0m[0m parameters                  = {
                                                      [32m+[0m[0m dcrId    = {
                                                          [32m+[0m[0m value = "[variables('dcrId')]"
                                                        }
                                                      [32m+[0m[0m dcraName = {
                                                          [32m+[0m[0m value = "[variables('dcraName')]"
                                                        }
                                                    }
                                                  [32m+[0m[0m template                    = {
                                                      [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                                      [32m+[0m[0m parameters     = {
                                                          [32m+[0m[0m dcrId    = {
                                                              [32m+[0m[0m type = "string"
                                                            }
                                                          [32m+[0m[0m dcraName = {
                                                              [32m+[0m[0m type = "string"
                                                            }
                                                        }
                                                      [32m+[0m[0m resources      = [
                                                          [32m+[0m[0m {
                                                              [32m+[0m[0m apiVersion = "2021-04-01"
                                                              [32m+[0m[0m name       = "[parameters('dcraName')]"
                                                              [32m+[0m[0m properties = {
                                                                  [32m+[0m[0m dataCollectionRuleId = "[parameters('dcrId')]"
                                                                  [32m+[0m[0m description          = "Configure association between SQL Virtual Machine and the Microsoft Defender for SQL user-defined DCR. Deleting this association will break the detection of security vulnerabilities for this SQL Virtual Machine."
                                                                }
                                                              [32m+[0m[0m type       = "Microsoft.Compute/virtualMachines/providers/dataCollectionRuleAssociations"
                                                            },
                                                        ]
                                                    }
                                                }
                                              [32m+[0m[0m resourceGroup = "[parameters('resourceGroup')]"
                                              [32m+[0m[0m type          = "Microsoft.Resources/deployments"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {
                                          [32m+[0m[0m dcrId                                = "[parameters('dcrId')]"
                                          [32m+[0m[0m dcrName                              = "[parameters('dcrName')]"
                                          [32m+[0m[0m dcraName                             = "[concat(parameters('vmName'),'/Microsoft.Insights/MicrosoftDefenderForSQL-RulesAssociation')]"
                                          [32m+[0m[0m defaultRGLocation                    = "[parameters('workspaceRegion')]"
                                          [32m+[0m[0m defaultRGName                        = "[parameters('dcrResourceGroup')]"
                                          [32m+[0m[0m deployDataCollectionRules            = "[concat('deployDataCollectionRules-', uniqueString(deployment().name))]"
                                          [32m+[0m[0m deployDataCollectionRulesAssociation = "[concat('deployDataCollectionRulesAssociation-', uniqueString(deployment().name))]"
                                          [32m+[0m[0m deployDefenderForSQL                 = "[concat('deployDefenderForSQL-', uniqueString(deployment().name))]"
                                          [32m+[0m[0m locationCode                         = "[if(contains(variables('locationLongNameToShortMap'), parameters('workspaceRegion')), variables('locationLongNameToShortMap')[parameters('workspaceRegion')], parameters('workspaceRegion'))]"
                                          [32m+[0m[0m locationLongNameToShortMap           = {
                                              [32m+[0m[0m australiacentral   = "CAU"
                                              [32m+[0m[0m australiaeast      = "EAU"
                                              [32m+[0m[0m australiasoutheast = "SEAU"
                                              [32m+[0m[0m brazilsouth        = "CQ"
                                              [32m+[0m[0m canadacentral      = "CCA"
                                              [32m+[0m[0m canadaeast         = "CCA"
                                              [32m+[0m[0m centralindia       = "CIN"
                                              [32m+[0m[0m centralus          = "CUS"
                                              [32m+[0m[0m eastasia           = "EA"
                                              [32m+[0m[0m eastus             = "EUS"
                                              [32m+[0m[0m eastus2            = "EUS2"
                                              [32m+[0m[0m eastus2euap        = "eus2p"
                                              [32m+[0m[0m francecentral      = "PAR"
                                              [32m+[0m[0m germanywestcentral = "DEWC"
                                              [32m+[0m[0m japaneast          = "EJP"
                                              [32m+[0m[0m jioindiawest       = "CIN"
                                              [32m+[0m[0m koreacentral       = "SE"
                                              [32m+[0m[0m koreasouth         = "SE"
                                              [32m+[0m[0m northcentralus     = "NCUS"
                                              [32m+[0m[0m northeurope        = "NEU"
                                              [32m+[0m[0m norwayeast         = "NOE"
                                              [32m+[0m[0m southafricanorth   = "JNB"
                                              [32m+[0m[0m southcentralus     = "SCUS"
                                              [32m+[0m[0m southeastasia      = "SEA"
                                              [32m+[0m[0m southindia         = "CIN"
                                              [32m+[0m[0m swedencentral      = "SEC"
                                              [32m+[0m[0m switzerlandnorth   = "CHN"
                                              [32m+[0m[0m switzerlandwest    = "CHW"
                                              [32m+[0m[0m uaenorth           = "DXB"
                                              [32m+[0m[0m uksouth            = "SUK"
                                              [32m+[0m[0m ukwest             = "WUK"
                                              [32m+[0m[0m westcentralus      = "WCUS"
                                              [32m+[0m[0m westeurope         = "WEU"
                                              [32m+[0m[0m westindia          = "CIN"
                                              [32m+[0m[0m westus             = "WUS"
                                              [32m+[0m[0m westus2            = "WUS2"
                                            }
                                          [32m+[0m[0m subscriptionId                       = "[subscription().subscriptionId]"
                                        }
                                    }
                                }
                            }
                          [32m+[0m[0m deploymentScope    = "subscription"
                          [32m+[0m[0m evaluationDelay    = "AfterProvisioning"
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('workspaceRegion')]"
                                      [32m+[0m[0m field  = "location"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('dcrName')]"
                                      [32m+[0m[0m field  = "name"
                                    },
                                ]
                            }
                          [32m+[0m[0m existenceScope     = "subscription"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Insights/dataCollectionRules"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-MDFC-SQL-DefenderSQL-DCR"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-MySQL-sslEnforcement"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploy a specific min TLS version requirement and enforce SSL on Azure Database for MySQL server. Enforce the Server to client applications using minimum version of Tls to secure the connection between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server."
              [32m+[0m[0m displayName = "Azure Database for MySQL server deploy a specific min TLS version and enforce SSL."
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "SQL"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.2.0"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect            = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy minimum TLS version Azure Database for MySQL server"
                          [32m+[0m[0m displayName = "Effect minimum TLS version Azure Database for MySQL server"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m minimalTlsVersion = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "TLS1_2",
                          [32m+[0m[0m "TLS1_0",
                          [32m+[0m[0m "TLS1_1",
                          [32m+[0m[0m "TLSEnforcementDisabled",
                        ]
                      [32m+[0m[0m defaultValue  = "TLS1_2"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Select version  minimum TLS version Azure Database for MySQL server to enforce"
                          [32m+[0m[0m displayName = "Select version minimum TLS for MySQL server"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.DBforMySQL/servers"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m anyOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field     = "Microsoft.DBforMySQL/servers/sslEnforcement"
                                      [32m+[0m[0m notEquals = "Enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field = "Microsoft.DBforMySQL/servers/minimalTlsVersion"
                                      [32m+[0m[0m less  = "[parameters('minimalTlsVersion')]"
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location          = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m minimalTlsVersion = {
                                          [32m+[0m[0m value = "[parameters('minimalTlsVersion')]"
                                        }
                                      [32m+[0m[0m resourceName      = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location          = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m minimalTlsVersion = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName      = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-12-01"
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m minimalTlsVersion = "[parameters('minimalTlsVersion')]"
                                                  [32m+[0m[0m sslEnforcement    = "[if(equals(parameters('minimalTlsVersion'), 'TLSEnforcementDisabled'),'Disabled', 'Enabled')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.DBforMySQL/servers"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "Enabled"
                                      [32m+[0m[0m field  = "Microsoft.DBforMySQL/servers/sslEnforcement"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('minimalTlsVersion')]"
                                      [32m+[0m[0m field  = "Microsoft.DBforMySQL/servers/minimalTlsVersion"
                                    },
                                ]
                            }
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c",
                            ]
                          [32m+[0m[0m type               = "Microsoft.DBforMySQL/servers"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-MySQL-sslEnforcement"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Nsg-FlowLogs"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "[Deprecated] Deprecated by built-in policy. Deploys NSG flow logs and traffic analytics to a storageaccountid with a specified retention period. Superseded by https://www.azadvertizer.net/azpolicyadvertizer/e920df7f-9a64-4066-9b58-52684c02a091.html"
              [32m+[0m[0m displayName = "[Deprecated] Deploys NSG flow logs and traffic analytics"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m supersededBy         = "e920df7f-9a64-4066-9b58-52684c02a091"
                  [32m+[0m[0m version              = "1.0.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect                   = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m flowAnalyticsEnabled     = {
                      [32m+[0m[0m defaultValue = false
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m displayName = "Enable Traffic Analytics"
                        }
                      [32m+[0m[0m type         = "Boolean"
                    }
                  [32m+[0m[0m logAnalytics             = {
                      [32m+[0m[0m defaultValue = ""
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Resource ID of Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                  [32m+[0m[0m retention                = {
                      [32m+[0m[0m defaultValue = 5
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m displayName = "Retention"
                        }
                      [32m+[0m[0m type         = "Integer"
                    }
                  [32m+[0m[0m storageAccountResourceId = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m displayName = "Storage Account Resource Id"
                          [32m+[0m[0m strongType  = "Microsoft.Storage/storageAccounts"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m trafficAnalyticsInterval = {
                      [32m+[0m[0m defaultValue = 60
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m displayName = "Traffic Analytics processing interval mins (10/60)"
                        }
                      [32m+[0m[0m type         = "Integer"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.Network/networkSecurityGroups"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m flowAnalyticsEnabled     = {
                                          [32m+[0m[0m value = "[parameters('flowAnalyticsEnabled')]"
                                        }
                                      [32m+[0m[0m location                 = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m logAnalytics             = {
                                          [32m+[0m[0m value = "[parameters('logAnalytics')]"
                                        }
                                      [32m+[0m[0m networkSecurityGroupName = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                      [32m+[0m[0m resourceGroupName        = {
                                          [32m+[0m[0m value = "[resourceGroup().name]"
                                        }
                                      [32m+[0m[0m retention                = {
                                          [32m+[0m[0m value = "[parameters('retention')]"
                                        }
                                      [32m+[0m[0m storageAccountResourceId = {
                                          [32m+[0m[0m value = "[parameters('storageAccountResourceId')]"
                                        }
                                      [32m+[0m[0m trafficAnalyticsInterval = {
                                          [32m+[0m[0m value = "[parameters('trafficAnalyticsInterval')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m flowAnalyticsEnabled     = {
                                              [32m+[0m[0m type = "bool"
                                            }
                                          [32m+[0m[0m location                 = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m logAnalytics             = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m networkSecurityGroupName = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceGroupName        = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m retention                = {
                                              [32m+[0m[0m type = "int"
                                            }
                                          [32m+[0m[0m storageAccountResourceId = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m trafficAnalyticsInterval = {
                                              [32m+[0m[0m type = "int"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2020-05-01"
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[take(concat('NetworkWatcher_', toLower(parameters('location')),  '/', parameters('networkSecurityGroupName'), '-', parameters('resourceGroupName'), '-flowlog' ), 80)]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m enabled                    = true
                                                  [32m+[0m[0m flowAnalyticsConfiguration = {
                                                      [32m+[0m[0m networkWatcherFlowAnalyticsConfiguration = {
                                                          [32m+[0m[0m enabled                  = "[bool(parameters('flowAnalyticsEnabled'))]"
                                                          [32m+[0m[0m trafficAnalyticsInterval = "[parameters('trafficAnalyticsInterval')]"
                                                          [32m+[0m[0m workspaceId              = "[if(not(empty(parameters('logAnalytics'))), reference(parameters('logAnalytics'), '2020-03-01-preview', 'Full').properties.customerId, json('null')) ]"
                                                          [32m+[0m[0m workspaceRegion          = "[if(not(empty(parameters('logAnalytics'))), reference(parameters('logAnalytics'), '2020-03-01-preview', 'Full').location, json('null')) ]"
                                                          [32m+[0m[0m workspaceResourceId      = "[if(not(empty(parameters('logAnalytics'))), parameters('logAnalytics'), json('null'))]"
                                                        }
                                                    }
                                                  [32m+[0m[0m format                     = {
                                                      [32m+[0m[0m type    = "JSON"
                                                      [32m+[0m[0m version = 2
                                                    }
                                                  [32m+[0m[0m retentionPolicy            = {
                                                      [32m+[0m[0m days    = "[parameters('retention')]"
                                                      [32m+[0m[0m enabled = true
                                                    }
                                                  [32m+[0m[0m storageId                  = "[parameters('storageAccountResourceId')]"
                                                  [32m+[0m[0m targetResourceId           = "[resourceId(parameters('resourceGroupName'), 'Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Network/networkWatchers/flowLogs"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Network/networkWatchers/flowLogs/enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('flowAnalyticsEnabled')]"
                                      [32m+[0m[0m field  = "Microsoft.Network/networkWatchers/flowLogs/flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.enabled"
                                    },
                                ]
                            }
                          [32m+[0m[0m resourceGroupName  = "NetworkWatcherRG"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Network/networkWatchers/flowLogs"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Nsg-FlowLogs"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Nsg-FlowLogs-to-LA"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "[Deprecated] Deprecated by built-in policy. Deploys NSG flow logs and traffic analytics to Log Analytics with a specified retention period. Superseded by https://www.azadvertizer.net/azpolicyadvertizer/e920df7f-9a64-4066-9b58-52684c02a091.html"
              [32m+[0m[0m displayName = "[Deprecated] Deploys NSG flow logs and traffic analytics to Log Analytics"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Monitoring"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m supersededBy         = "e920df7f-9a64-4066-9b58-52684c02a091"
                  [32m+[0m[0m version              = "1.1.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect    = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m interval  = {
                      [32m+[0m[0m defaultValue = 60
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m displayName = "Traffic Analytics processing interval mins (10/60)"
                        }
                      [32m+[0m[0m type         = "Integer"
                    }
                  [32m+[0m[0m retention = {
                      [32m+[0m[0m defaultValue = 5
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m displayName = "Retention"
                        }
                      [32m+[0m[0m type         = "Integer"
                    }
                  [32m+[0m[0m workspace = {
                      [32m+[0m[0m defaultValue = "<workspace resource ID>"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID."
                          [32m+[0m[0m displayName = "Resource ID of Log Analytics workspace"
                          [32m+[0m[0m strongType  = "omsWorkspace"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Network/networkSecurityGroups"
                              [32m+[0m[0m field  = "type"
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m location   = "northeurope"
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m interval             = {
                                          [32m+[0m[0m value = "[parameters('interval')]"
                                        }
                                      [32m+[0m[0m location             = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m networkSecurityGroup = {
                                          [32m+[0m[0m value = "[field('id')]"
                                        }
                                      [32m+[0m[0m retention            = {
                                          [32m+[0m[0m value = "[parameters('retention')]"
                                        }
                                      [32m+[0m[0m workspace            = {
                                          [32m+[0m[0m value = "[parameters('workspace')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m interval             = {
                                              [32m+[0m[0m type = "int"
                                            }
                                          [32m+[0m[0m location             = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m networkSecurityGroup = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m retention            = {
                                              [32m+[0m[0m type = "int"
                                            }
                                          [32m+[0m[0m time                 = {
                                              [32m+[0m[0m defaultValue = "[utcNow()]"
                                              [32m+[0m[0m type         = "String"
                                            }
                                          [32m+[0m[0m workspace            = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion    = "2019-10-01"
                                              [32m+[0m[0m name          = "[concat(variables('resourceGroupName'), '.', variables('securityGroupName'))]"
                                              [32m+[0m[0m properties    = {
                                                  [32m+[0m[0m mode     = "Incremental"
                                                  [32m+[0m[0m template = {
                                                      [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                                      [32m+[0m[0m resources      = [
                                                          [32m+[0m[0m {
                                                              [32m+[0m[0m apiVersion = "2019-06-01"
                                                              [32m+[0m[0m kind       = "StorageV2"
                                                              [32m+[0m[0m location   = "[parameters('location')]"
                                                              [32m+[0m[0m name       = "[variables('storageAccountName')]"
                                                              [32m+[0m[0m properties = {}
                                                              [32m+[0m[0m sku        = {
                                                                  [32m+[0m[0m name = "Standard_LRS"
                                                                  [32m+[0m[0m tier = "Standard"
                                                                }
                                                              [32m+[0m[0m type       = "Microsoft.Storage/storageAccounts"
                                                            },
                                                        ]
                                                    }
                                                }
                                              [32m+[0m[0m resourceGroup = "[variables('resourceGroupName')]"
                                              [32m+[0m[0m type          = "Microsoft.Resources/deployments"
                                            },
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion    = "2019-10-01"
                                              [32m+[0m[0m dependsOn     = [
                                                  [32m+[0m[0m "[concat(variables('resourceGroupName'), '.', variables('securityGroupName'))]",
                                                ]
                                              [32m+[0m[0m name          = "[concat('NetworkWatcherRG', '.', variables('securityGroupName'))]"
                                              [32m+[0m[0m properties    = {
                                                  [32m+[0m[0m mode     = "Incremental"
                                                  [32m+[0m[0m template = {
                                                      [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                                      [32m+[0m[0m resources      = [
                                                          [32m+[0m[0m {
                                                              [32m+[0m[0m apiVersion = "2020-05-01"
                                                              [32m+[0m[0m location   = "[parameters('location')]"
                                                              [32m+[0m[0m name       = "[concat('NetworkWatcher_', toLower(parameters('location')))]"
                                                              [32m+[0m[0m properties = {}
                                                              [32m+[0m[0m resources  = [
                                                                  [32m+[0m[0m {
                                                                      [32m+[0m[0m apiVersion = "2019-11-01"
                                                                      [32m+[0m[0m dependsOn  = [
                                                                          [32m+[0m[0m "[concat('NetworkWatcher_', toLower(parameters('location')))]",
                                                                        ]
                                                                      [32m+[0m[0m location   = "[parameters('location')]"
                                                                      [32m+[0m[0m name       = "[concat(variables('securityGroupName'), '-Network-flowlog')]"
                                                                      [32m+[0m[0m properties = {
                                                                          [32m+[0m[0m enabled                    = true
                                                                          [32m+[0m[0m flowAnalyticsConfiguration = {
                                                                              [32m+[0m[0m networkWatcherFlowAnalyticsConfiguration = {
                                                                                  [32m+[0m[0m enabled                  = true
                                                                                  [32m+[0m[0m trafficAnalyticsInterval = "[parameters('interval')]"
                                                                                  [32m+[0m[0m workspaceResourceId      = "[parameters('workspace')]"
                                                                                }
                                                                            }
                                                                          [32m+[0m[0m format                     = {
                                                                              [32m+[0m[0m type    = "JSON"
                                                                              [32m+[0m[0m version = 2
                                                                            }
                                                                          [32m+[0m[0m retentionPolicy            = {
                                                                              [32m+[0m[0m days    = "[parameters('retention')]"
                                                                              [32m+[0m[0m enabled = true
                                                                            }
                                                                          [32m+[0m[0m storageId                  = "[concat(subscription().id, '/resourceGroups/', variables('resourceGroupName'), '/providers/Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]"
                                                                          [32m+[0m[0m targetResourceId           = "[parameters('networkSecurityGroup')]"
                                                                        }
                                                                      [32m+[0m[0m type       = "flowLogs"
                                                                    },
                                                                ]
                                                              [32m+[0m[0m type       = "Microsoft.Network/networkWatchers"
                                                            },
                                                        ]
                                                    }
                                                }
                                              [32m+[0m[0m resourceGroup = "NetworkWatcherRG"
                                              [32m+[0m[0m type          = "Microsoft.Resources/deployments"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {
                                          [32m+[0m[0m resourceGroupName  = "[split(parameters('networkSecurityGroup'), '/')[4]]"
                                          [32m+[0m[0m securityGroupName  = "[split(parameters('networkSecurityGroup'), '/')[8]]"
                                          [32m+[0m[0m storageAccountName = "[concat('es', uniqueString(variables('securityGroupName'), parameters('time')))]"
                                        }
                                    }
                                }
                            }
                          [32m+[0m[0m deploymentScope    = "subscription"
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Network/networkWatchers/flowLogs/enabled"
                                    },
                                ]
                            }
                          [32m+[0m[0m existenceScope     = "resourceGroup"
                          [32m+[0m[0m name               = "[if(empty(coalesce(field('Microsoft.Network/networkSecurityGroups/flowLogs[*].id'))), 'null/null', concat(split(first(field('Microsoft.Network/networkSecurityGroups/flowLogs[*].id')), '/')[8], '/', split(first(field('Microsoft.Network/networkSecurityGroups/flowLogs[*].id')), '/')[10]))]"
                          [32m+[0m[0m resourceGroupName  = "[if(empty(coalesce(field('Microsoft.Network/networkSecurityGroups/flowLogs'))), 'NetworkWatcherRG', split(first(field('Microsoft.Network/networkSecurityGroups/flowLogs[*].id')), '/')[4])]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7",
                              [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/81a9662b-bebf-436f-a333-f67b29880f12",
                              [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                              [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/17d1049b-9a84-46fb-8f53-869881c3d3ab",
                              [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Network/networkWatchers/flowlogs"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Nsg-FlowLogs-to-LA"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-PostgreSQL-sslEnforcement"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploy a specific min TLS version requirement and enforce SSL on Azure Database for PostgreSQL server. Enables secure server to client by enforce  minimal Tls Version to secure the connection between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server."
              [32m+[0m[0m displayName = "Azure Database for PostgreSQL server deploy a specific min TLS version requirement and enforce SSL "
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "SQL"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.2.0"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect            = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy minimum TLS version Azure Database for PostgreSQL server"
                          [32m+[0m[0m displayName = "Effect Azure Database for PostgreSQL server"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m minimalTlsVersion = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "TLS1_2",
                          [32m+[0m[0m "TLS1_0",
                          [32m+[0m[0m "TLS1_1",
                          [32m+[0m[0m "TLSEnforcementDisabled",
                        ]
                      [32m+[0m[0m defaultValue  = "TLS1_2"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Select version minimum TLS version Azure Database for PostgreSQL server to enforce"
                          [32m+[0m[0m displayName = "Select version for PostgreSQL server"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.DBforPostgreSQL/servers"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m anyOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field     = "Microsoft.DBforPostgreSQL/servers/sslEnforcement"
                                      [32m+[0m[0m notEquals = "Enabled"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field = "Microsoft.DBforPostgreSQL/servers/minimalTlsVersion"
                                      [32m+[0m[0m less  = "[parameters('minimalTlsVersion')]"
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location          = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m minimalTlsVersion = {
                                          [32m+[0m[0m value = "[parameters('minimalTlsVersion')]"
                                        }
                                      [32m+[0m[0m resourceName      = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location          = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m minimalTlsVersion = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName      = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-12-01"
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m minimalTlsVersion = "[parameters('minimalTlsVersion')]"
                                                  [32m+[0m[0m sslEnforcement    = "[if(equals(parameters('minimalTlsVersion'), 'TLSEnforcementDisabled'),'Disabled', 'Enabled')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.DBforPostgreSQL/servers"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "Enabled"
                                      [32m+[0m[0m field  = "Microsoft.DBforPostgreSQL/servers/sslEnforcement"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('minimalTlsVersion')]"
                                      [32m+[0m[0m field  = "Microsoft.DBforPostgreSQL/servers/minimalTlsVersion"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "current"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c",
                            ]
                          [32m+[0m[0m type               = "Microsoft.DBforPostgreSQL/servers"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-PostgreSQL-sslEnforcement"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Private-DNS-Generic"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Configure private DNS zone group to override the DNS resolution for PaaS services private endpoint. See https://aka.ms/pepdnszones for information on values to provide to parameters in this policy."
              [32m+[0m[0m displayName = "Deploy-Private-DNS-Generic"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Networking"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "2.0.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m evaluationDelay  = {
                      [32m+[0m[0m defaultValue = "PT10M"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The delay in evaluation of the policy. Review delay options at https://learn.microsoft.com/en-us/azure/governance/policy/concepts/effect-deploy-if-not-exists"
                          [32m+[0m[0m displayName = "Evaluation Delay"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                  [32m+[0m[0m groupId          = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "The group ID of the PaaS private endpoint. Also referred to as subresource."
                          [32m+[0m[0m displayName = "PaaS Private endpoint group ID (subresource)"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m location         = {
                      [32m+[0m[0m defaultValue = "northeurope"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "Specify the Private Endpoint location"
                          [32m+[0m[0m displayName = "Location (Specify the Private Endpoint location)"
                          [32m+[0m[0m strongType  = "location"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                  [32m+[0m[0m privateDnsZoneId = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m assignPermissions = true
                          [32m+[0m[0m description       = "The private DNS zone name required for specific PaaS Services to resolve a private DNS Zone."
                          [32m+[0m[0m displayName       = "Private DNS Zone ID for PaaS services"
                          [32m+[0m[0m strongType        = "Microsoft.Network/privateDnsZones"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m resourceType     = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "The PaaS endpoint resource type."
                          [32m+[0m[0m displayName = "PaaS private endpoint resource type"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "[parameters('location')]"
                              [32m+[0m[0m field  = "location"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Network/privateEndpoints"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m count           = {
                                  [32m+[0m[0m field = "Microsoft.Network/privateEndpoints/privateLinkServiceConnections[*]"
                                  [32m+[0m[0m where = {
                                      [32m+[0m[0m allOf = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m contains = "[parameters('resourceType')]"
                                              [32m+[0m[0m field    = "Microsoft.Network/privateEndpoints/privateLinkServiceConnections[*].privateLinkServiceId"
                                            },
                                          [32m+[0m[0m {
                                              [32m+[0m[0m equals = "[parameters('groupId')]"
                                              [32m+[0m[0m field  = "Microsoft.Network/privateEndpoints/privateLinkServiceConnections[*].groupIds[*]"
                                            },
                                        ]
                                    }
                                }
                              [32m+[0m[0m greaterOrEquals = 1
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment        = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location            = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m privateDnsZoneId    = {
                                          [32m+[0m[0m value = "[parameters('privateDnsZoneId')]"
                                        }
                                      [32m+[0m[0m privateEndpointName = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location            = {
                                              [32m+[0m[0m type = "string"
                                            }
                                          [32m+[0m[0m privateDnsZoneId    = {
                                              [32m+[0m[0m type = "string"
                                            }
                                          [32m+[0m[0m privateEndpointName = {
                                              [32m+[0m[0m type = "string"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2020-03-01"
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('privateEndpointName'), '/deployedByPolicy')]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m privateDnsZoneConfigs = [
                                                      [32m+[0m[0m {
                                                          [32m+[0m[0m name       = "PaaS-Service-Private-DNS-Zone-Config"
                                                          [32m+[0m[0m properties = {
                                                              [32m+[0m[0m privateDnsZoneId = "[parameters('privateDnsZoneId')]"
                                                            }
                                                        },
                                                    ]
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Network/privateEndpoints/privateDnsZoneGroups"
                                            },
                                        ]
                                    }
                                }
                            }
                          [32m+[0m[0m evaluationDelay   = "[parameters('evaluationDelay')]"
                          [32m+[0m[0m roleDefinitionIds = [
                              [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7",
                            ]
                          [32m+[0m[0m type              = "Microsoft.Network/privateEndpoints/privateDnsZoneGroups"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Private-DNS-Generic"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-SQL-minTLS"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys a specific min TLS version requirement and enforce SSL on SQL servers. Enables secure server to client by enforce  minimal Tls Version to secure the connection between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server."
              [32m+[0m[0m displayName = "SQL servers deploys a specific min TLS version requirement."
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "SQL"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.2.0"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect            = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy minimum TLS version SQL servers"
                          [32m+[0m[0m displayName = "Effect SQL servers"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m minimalTlsVersion = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "1.2",
                          [32m+[0m[0m "1.1",
                          [32m+[0m[0m "1.0",
                        ]
                      [32m+[0m[0m defaultValue  = "1.2"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Select version minimum TLS version SQL servers to enforce"
                          [32m+[0m[0m displayName = "Select version for SQL server"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Sql/servers"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m field = "Microsoft.Sql/servers/minimalTlsVersion"
                              [32m+[0m[0m less  = "[parameters('minimalTlsVersion')]"
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location          = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m minimalTlsVersion = {
                                          [32m+[0m[0m value = "[parameters('minimalTlsVersion')]"
                                        }
                                      [32m+[0m[0m resourceName      = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location          = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m minimalTlsVersion = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName      = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2019-06-01-preview"
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m minimalTlsVersion = "[parameters('minimalTlsVersion')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Sql/servers"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('minimalTlsVersion')]"
                                      [32m+[0m[0m field  = "Microsoft.Sql/servers/minimalTlsVersion"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "current"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/6d8ee4ec-f05a-4a1d-8b00-a9b17e38b437",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Sql/servers"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-SQL-minTLS"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Sql-AuditingSettings"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploy auditing settings to SQL Database when it not exist in the deployment"
              [32m+[0m[0m displayName = "Deploy SQL database auditing settings"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "SQL"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.Sql/servers/databases"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location              = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m sqlServerDataBaseName = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                      [32m+[0m[0m sqlServerName         = {
                                          [32m+[0m[0m value = "[first(split(field('fullname'),'/'))]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location              = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m sqlServerDataBaseName = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m sqlServerName         = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-03-01-preview"
                                              [32m+[0m[0m name       = "[concat( parameters('sqlServerName'),'/',parameters('sqlServerDataBaseName'),'/default')]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m auditActionsAndGroups       = [
                                                      [32m+[0m[0m "BATCH_COMPLETED_GROUP",
                                                      [32m+[0m[0m "DATABASE_OBJECT_CHANGE_GROUP",
                                                      [32m+[0m[0m "SCHEMA_OBJECT_CHANGE_GROUP",
                                                      [32m+[0m[0m "BACKUP_RESTORE_GROUP",
                                                      [32m+[0m[0m "APPLICATION_ROLE_CHANGE_PASSWORD_GROUP",
                                                      [32m+[0m[0m "DATABASE_PRINCIPAL_CHANGE_GROUP",
                                                      [32m+[0m[0m "DATABASE_PRINCIPAL_IMPERSONATION_GROUP",
                                                      [32m+[0m[0m "DATABASE_ROLE_MEMBER_CHANGE_GROUP",
                                                      [32m+[0m[0m "USER_CHANGE_PASSWORD_GROUP",
                                                      [32m+[0m[0m "DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP",
                                                      [32m+[0m[0m "DATABASE_OBJECT_PERMISSION_CHANGE_GROUP",
                                                      [32m+[0m[0m "DATABASE_PERMISSION_CHANGE_GROUP",
                                                      [32m+[0m[0m "SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP",
                                                      [32m+[0m[0m "SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP",
                                                      [32m+[0m[0m "FAILED_DATABASE_AUTHENTICATION_GROUP",
                                                    ]
                                                  [32m+[0m[0m isAzureMonitorTargetEnabled = true
                                                  [32m+[0m[0m state                       = "enabled"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Sql/servers/databases/auditingSettings"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "enabled"
                                      [32m+[0m[0m field  = "Microsoft.Sql/servers/databases/auditingSettings/state"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Sql/servers/databases/auditingSettings/isAzureMonitorTargetEnabled"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "default"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/056cd41c-7e88-42e1-933e-88ba6a50c9c3",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Sql/servers/databases/auditingSettings"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Sql-AuditingSettings"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Sql-SecurityAlertPolicies"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploy the security Alert Policies configuration with email admin accounts when it not exist in current configuration"
              [32m+[0m[0m displayName = "Deploy SQL Database security Alert Policies configuration with email admin accounts"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "SQL"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.1"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m emailAddresses = {
                      [32m+[0m[0m defaultValue = [
                          [32m+[0m[0m "admin@contoso.com",
                          [32m+[0m[0m "admin@fabrikam.com",
                        ]
                      [32m+[0m[0m type         = "Array"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.Sql/servers/databases"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m emailAddresses        = {
                                          [32m+[0m[0m value = "[parameters('emailAddresses')]"
                                        }
                                      [32m+[0m[0m location              = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m sqlServerDataBaseName = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                      [32m+[0m[0m sqlServerName         = {
                                          [32m+[0m[0m value = "[first(split(field('fullname'),'/'))]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m emailAddresses        = {
                                              [32m+[0m[0m type = "Array"
                                            }
                                          [32m+[0m[0m location              = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m sqlServerDataBaseName = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m sqlServerName         = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2018-06-01-preview"
                                              [32m+[0m[0m name       = "[concat(parameters('sqlServerName'),'/',parameters('sqlServerDataBaseName'),'/default')]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m disabledAlerts          = [
                                                      [32m+[0m[0m "",
                                                    ]
                                                  [32m+[0m[0m emailAccountAdmins      = true
                                                  [32m+[0m[0m emailAddresses          = "[parameters('emailAddresses')]"
                                                  [32m+[0m[0m retentionDays           = 0
                                                  [32m+[0m[0m state                   = "Enabled"
                                                  [32m+[0m[0m storageAccountAccessKey = ""
                                                  [32m+[0m[0m storageEndpoint         = [90mnull[0m[0m
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Sql/servers/databases/securityAlertPolicies"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "Enabled"
                                      [32m+[0m[0m field  = "Microsoft.Sql/servers/databases/securityAlertPolicies/state"
                                    },
                                ]
                            }
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/056cd41c-7e88-42e1-933e-88ba6a50c9c3",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Sql/servers/databases/securityAlertPolicies"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Sql-SecurityAlertPolicies"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Sql-Tde"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploy the Transparent Data Encryption when it is not enabled in the deployment. Please use this policy instead https://www.azadvertizer.net/azpolicyadvertizer/86a912f6-9a06-4e26-b447-11b16ba8659f.html"
              [32m+[0m[0m displayName = "[Deprecated] Deploy SQL Database Transparent Data Encryption"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "SQL"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m supersededBy         = "86a912f6-9a06-4e26-b447-11b16ba8659f"
                  [32m+[0m[0m version              = "1.1.1-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect            = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m excludedDatabases = {
                      [32m+[0m[0m defaultValue = [
                          [32m+[0m[0m "master",
                          [32m+[0m[0m "model",
                          [32m+[0m[0m "tempdb",
                          [32m+[0m[0m "msdb",
                          [32m+[0m[0m "resource",
                        ]
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "Array of databases that are excluded from this policy"
                          [32m+[0m[0m displayName = "Excluded Databases"
                        }
                      [32m+[0m[0m type         = "Array"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Sql/servers/databases"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m field = "name"
                              [32m+[0m[0m notIn = "[parameters('excludedDatabases')]"
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location              = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m sqlServerDataBaseName = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                      [32m+[0m[0m sqlServerName         = {
                                          [32m+[0m[0m value = "[first(split(field('fullname'),'/'))]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location              = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m sqlServerDataBaseName = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m sqlServerName         = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2014-04-01"
                                              [32m+[0m[0m name       = "[concat( parameters('sqlServerName'),'/',parameters('sqlServerDataBaseName'),'/current')]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m status = "Enabled"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Sql/servers/databases/transparentDataEncryption"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "Enabled"
                                      [32m+[0m[0m field  = "Microsoft.Sql/transparentDataEncryption.status"
                                    },
                                ]
                            }
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/056cd41c-7e88-42e1-933e-88ba6a50c9c3",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Sql/servers/databases/transparentDataEncryption"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Sql-Tde"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Sql-vulnerabilityAssessments"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploy SQL Database vulnerability Assessments when it not exist in the deployment. Superseded by https://www.azadvertizer.net/azpolicyadvertizer/Deploy-Sql-vulnerabilityAssessments_20230706.html"
              [32m+[0m[0m displayName = "[Deprecated]: Deploy SQL Database vulnerability Assessments"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "SQL"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m supersededBy         = "Deploy-Sql-vulnerabilityAssessments_20230706"
                  [32m+[0m[0m version              = "1.0.1-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect                            = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m vulnerabilityAssessmentsEmail     = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "The email address to send alerts. For multiple emails, format in the following 'email1@contoso.com;email2@contoso.com'"
                          [32m+[0m[0m displayName = "The email address to send alerts. For multiple emails, format in the following 'email1@contoso.com;email2@contoso.com'"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m vulnerabilityAssessmentsStorageID = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m assignPermissions = true
                          [32m+[0m[0m description       = "The storage account ID to store assessments"
                          [32m+[0m[0m displayName       = "The storage account ID to store assessments"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.Sql/servers/databases"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location                          = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m sqlServerDataBaseName             = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                      [32m+[0m[0m sqlServerName                     = {
                                          [32m+[0m[0m value = "[first(split(field('fullname'),'/'))]"
                                        }
                                      [32m+[0m[0m vulnerabilityAssessmentsEmail     = {
                                          [32m+[0m[0m value = "[parameters('vulnerabilityAssessmentsEmail')]"
                                        }
                                      [32m+[0m[0m vulnerabilityAssessmentsStorageID = {
                                          [32m+[0m[0m value = "[parameters('vulnerabilityAssessmentsStorageID')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location                          = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m sqlServerDataBaseName             = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m sqlServerName                     = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m vulnerabilityAssessmentsEmail     = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m vulnerabilityAssessmentsStorageID = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-03-01-preview"
                                              [32m+[0m[0m name       = "[concat(parameters('sqlServerName'),'/',parameters('sqlServerDataBaseName'),'/default')]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m recurringScans          = {
                                                      [32m+[0m[0m emailSubscriptionAdmins = false
                                                      [32m+[0m[0m emails                  = [
                                                          [32m+[0m[0m "[parameters('vulnerabilityAssessmentsEmail')]",
                                                        ]
                                                      [32m+[0m[0m isEnabled               = true
                                                    }
                                                  [32m+[0m[0m storageAccountAccessKey = "[listkeys(parameters('vulnerabilityAssessmentsStorageID'), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value]"
                                                  [32m+[0m[0m storageContainerPath    = "[concat('https://', last( split(parameters('vulnerabilityAssessmentsStorageID') ,  '/') ) , '.blob.core.windows.net/vulneraabilitylogs')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Sql/servers/databases/vulnerabilityAssessments"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('vulnerabilityAssessmentsEmail')]"
                                      [32m+[0m[0m field  = "Microsoft.Sql/servers/databases/vulnerabilityAssessments/recurringScans.emails"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = true
                                      [32m+[0m[0m field  = "Microsoft.Sql/servers/databases/vulnerabilityAssessments/recurringScans.isEnabled"
                                    },
                                ]
                            }
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/056cd41c-7e88-42e1-933e-88ba6a50c9c3",
                              [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/17d1049b-9a84-46fb-8f53-869881c3d3ab",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Sql/servers/databases/vulnerabilityAssessments"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Sql-vulnerabilityAssessments"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Sql-vulnerabilityAssessments_20230706"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploy SQL Database Vulnerability Assessments when it does not exist in the deployment, and save results to the storage account specified in the parameters."
              [32m+[0m[0m displayName = "Deploy SQL Database Vulnerability Assessments"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "SQL"
                  [32m+[0m[0m replacesPolicy       = "Deploy-Sql-vulnerabilityAssessments"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect                            = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m vulnerabilityAssessmentsEmail     = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "The email address(es) to send alerts."
                          [32m+[0m[0m displayName = "The email address(es) to send alerts."
                        }
                      [32m+[0m[0m type     = "Array"
                    }
                  [32m+[0m[0m vulnerabilityAssessmentsStorageID = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m assignPermissions = true
                          [32m+[0m[0m description       = "The storage account ID to store assessments"
                          [32m+[0m[0m displayName       = "The storage account ID to store assessments"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.Sql/servers/databases"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location                          = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m sqlServerDataBaseName             = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                      [32m+[0m[0m sqlServerName                     = {
                                          [32m+[0m[0m value = "[first(split(field('fullname'),'/'))]"
                                        }
                                      [32m+[0m[0m vulnerabilityAssessmentsEmail     = {
                                          [32m+[0m[0m value = "[parameters('vulnerabilityAssessmentsEmail')]"
                                        }
                                      [32m+[0m[0m vulnerabilityAssessmentsStorageID = {
                                          [32m+[0m[0m value = "[parameters('vulnerabilityAssessmentsStorageID')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location                          = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m sqlServerDataBaseName             = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m sqlServerName                     = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m vulnerabilityAssessmentsEmail     = {
                                              [32m+[0m[0m type = "Array"
                                            }
                                          [32m+[0m[0m vulnerabilityAssessmentsStorageID = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2017-03-01-preview"
                                              [32m+[0m[0m name       = "[concat(parameters('sqlServerName'),'/',parameters('sqlServerDataBaseName'),'/default')]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m recurringScans          = {
                                                      [32m+[0m[0m emailSubscriptionAdmins = false
                                                      [32m+[0m[0m emails                  = "[parameters('vulnerabilityAssessmentsEmail')]"
                                                      [32m+[0m[0m isEnabled               = true
                                                    }
                                                  [32m+[0m[0m storageAccountAccessKey = "[listkeys(parameters('vulnerabilityAssessmentsStorageID'), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value]"
                                                  [32m+[0m[0m storageContainerPath    = "[concat('https://', last( split(parameters('vulnerabilityAssessmentsStorageID') ,  '/') ) , '.blob.core.windows.net/vulneraabilitylogs')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Sql/servers/databases/vulnerabilityAssessments"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m count   = {
                                          [32m+[0m[0m field = "Microsoft.Sql/servers/databases/vulnerabilityAssessments/recurringScans.emails[*]"
                                          [32m+[0m[0m where = {
                                              [32m+[0m[0m notIn = "[parameters('vulnerabilityAssessmentsEmail')]"
                                              [32m+[0m[0m value = "current(Microsoft.Sql/servers/databases/vulnerabilityAssessments/recurringScans.emails[*])"
                                            }
                                        }
                                      [32m+[0m[0m greater = 0
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = true
                                      [32m+[0m[0m field  = "Microsoft.Sql/servers/databases/vulnerabilityAssessments/recurringScans.isEnabled"
                                    },
                                ]
                            }
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/056cd41c-7e88-42e1-933e-88ba6a50c9c3",
                              [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/17d1049b-9a84-46fb-8f53-869881c3d3ab",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Sql/servers/databases/vulnerabilityAssessments"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Sql-vulnerabilityAssessments_20230706"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-SqlMi-minTLS"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploy a specific min TLS version requirement and enforce SSL on SQL managed instances. Enables secure server to client by enforce  minimal Tls Version to secure the connection between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your database server."
              [32m+[0m[0m displayName = "SQL managed instances deploy a specific min TLS version requirement."
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "SQL"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.3.0"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect            = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy minimum TLS version SQL servers"
                          [32m+[0m[0m displayName = "Effect SQL servers"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m minimalTlsVersion = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "1.2",
                          [32m+[0m[0m "1.1",
                          [32m+[0m[0m "1.0",
                        ]
                      [32m+[0m[0m defaultValue  = "1.2"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Select version minimum TLS version SQL servers to enforce"
                          [32m+[0m[0m displayName = "Select version for SQL server"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Sql/managedInstances"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m field = "Microsoft.Sql/managedInstances/minimalTlsVersion"
                              [32m+[0m[0m less  = "[parameters('minimalTlsVersion')]"
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location          = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m minimalTlsVersion = {
                                          [32m+[0m[0m value = "[parameters('minimalTlsVersion')]"
                                        }
                                      [32m+[0m[0m resourceName      = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location          = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m minimalTlsVersion = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName      = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2020-02-02-preview"
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m minimalTlsVersion = "[parameters('minimalTlsVersion')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Sql/managedInstances"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m evaluationDelay    = "AfterProvisioningSuccess"
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('minimalTlsVersion')]"
                                      [32m+[0m[0m field  = "Microsoft.Sql/managedInstances/minimalTlsVersion"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "current"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/4939a1f6-9ae0-4e48-a1e0-f2cbe897382d",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Sql/managedInstances"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-SqlMi-minTLS"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Storage-sslEnforcement"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploy a specific min TLS version requirement and enforce SSL on Azure Storage. Enables secure server to client by enforce minimal Tls Version to secure the connection between your database server and your client applications helps protect against 'man in the middle' attacks by encrypting the data stream between the server and your application. This configuration enforces that SSL is always enabled for accessing your Azure Storage."
              [32m+[0m[0m displayName = "Azure Storage deploy a specific min TLS version requirement and enforce SSL/HTTPS "
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Storage"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.3.0"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect            = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy minimum TLS version Azure STorage"
                          [32m+[0m[0m displayName = "Effect Azure Storage"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m minimumTlsVersion = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "TLS1_2",
                          [32m+[0m[0m "TLS1_1",
                          [32m+[0m[0m "TLS1_0",
                        ]
                      [32m+[0m[0m defaultValue  = "TLS1_2"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Select version minimum TLS version Azure STorage to enforce"
                          [32m+[0m[0m displayName = "Select TLS version for Azure Storage server"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Storage/storageAccounts"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m anyOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field     = "Microsoft.Storage/storageAccounts/supportsHttpsTrafficOnly"
                                      [32m+[0m[0m notEquals = "true"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field = "Microsoft.Storage/storageAccounts/minimumTlsVersion"
                                      [32m+[0m[0m less  = "[parameters('minimumTlsVersion')]"
                                    },
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m location          = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m minimumTlsVersion = {
                                          [32m+[0m[0m value = "[parameters('minimumTlsVersion')]"
                                        }
                                      [32m+[0m[0m resourceName      = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m location          = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m minimumTlsVersion = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m resourceName      = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2019-06-01"
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat(parameters('resourceName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m minimumTlsVersion        = "[parameters('minimumTlsVersion')]"
                                                  [32m+[0m[0m supportsHttpsTrafficOnly = true
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Storage/storageAccounts"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "true"
                                      [32m+[0m[0m field  = "Microsoft.Storage/storageAccounts/supportsHttpsTrafficOnly"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('minimumTlsVersion')]"
                                      [32m+[0m[0m field  = "Microsoft.Storage/storageAccounts/minimumTlsVersion"
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "current"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/17d1049b-9a84-46fb-8f53-869881c3d3ab",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Storage/storageAccounts"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Storage-sslEnforcement"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-UserAssignedManagedIdentity-VMInsights"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Policy is deprecated as it's no longer required. User-Assigned Management Identity is now centralized and deployed by Azure Landing Zones to the Management Subscription."
              [32m+[0m[0m displayName = "[Deprecated]: Deploy User Assigned Managed Identity for VM Insights"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Managed Identity"
                  [32m+[0m[0m deprecated           = true
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0-deprecated"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m bringYourOwnUserAssignedManagedIdentity = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m true,
                          [32m+[0m[0m false,
                        ]
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable this to use your pre-created user-assigned managed identity. The pre-created identity MUST exist within the subscription otherwise the policy deployment will fail. If enabled, ensure that the User-Assigned Identity Name and Identity Resource Group Name parameters match the pre-created identity. If not enabled, the policy will create per subscription, per resource user-assigned managed identities in a new resource group named 'Built-In-Identity-RG'."
                          [32m+[0m[0m displayName = "Bring Your Own User-Assigned Identity"
                        }
                      [32m+[0m[0m type          = "Boolean"
                    }
                  [32m+[0m[0m builtInIdentityResourceGroupLocation    = {
                      [32m+[0m[0m defaultValue = "eastus"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The location of the resource group 'Built-In-Identity-RG' created by the policy. This parameter is only used when 'Bring Your Own User Assigned Identity' parameter is false."
                          [32m+[0m[0m displayName = "Built-In-Identity-RG Location"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                  [32m+[0m[0m effect                                  = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "AuditIfNotExists",
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "The effect determines what happens when the policy rule is evaluated to match."
                          [32m+[0m[0m displayName = "Policy Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m identityResourceGroup                   = {
                      [32m+[0m[0m defaultValue = ""
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The resource group in which the pre-created user-assigned managed identity resides."
                          [32m+[0m[0m displayName = "User-Assigned Managed Identity Resource Group Name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                  [32m+[0m[0m userAssignedIdentityName                = {
                      [32m+[0m[0m defaultValue = ""
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The name of the pre-created user-assigned managed identity."
                          [32m+[0m[0m displayName = "User-Assigned Managed Identity Name"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Compute/virtualMachines"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m greaterOrEquals = "2018-10-01"
                              [32m+[0m[0m value           = "[requestContext().apiVersion]"
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m location   = "eastus"
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m bringYourOwnUserAssignedManagedIdentity = {
                                          [32m+[0m[0m value = "[parameters('bringYourOwnUserAssignedManagedIdentity')]"
                                        }
                                      [32m+[0m[0m builtInIdentityResourceGroupLocation    = {
                                          [32m+[0m[0m value = "[parameters('builtInIdentityResourceGroupLocation')]"
                                        }
                                      [32m+[0m[0m identityResourceGroup                   = {
                                          [32m+[0m[0m value = "[if(parameters('bringYourOwnUserAssignedManagedIdentity'), parameters('identityResourceGroup'), 'Built-In-Identity-RG')]"
                                        }
                                      [32m+[0m[0m location                                = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m resourceId                              = {
                                          [32m+[0m[0m value = "[field('id')]"
                                        }
                                      [32m+[0m[0m uaName                                  = {
                                          [32m+[0m[0m value = "[if(parameters('bringYourOwnUserAssignedManagedIdentity'), parameters('userAssignedIdentityName'), 'Built-In-Identity')]"
                                        }
                                      [32m+[0m[0m vmName                                  = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                      [32m+[0m[0m vmResourceGroup                         = {
                                          [32m+[0m[0m value = "[resourceGroup().name]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.1"
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m bringYourOwnUserAssignedManagedIdentity = {
                                              [32m+[0m[0m type = "bool"
                                            }
                                          [32m+[0m[0m builtInIdentityResourceGroupLocation    = {
                                              [32m+[0m[0m type = "string"
                                            }
                                          [32m+[0m[0m identityResourceGroup                   = {
                                              [32m+[0m[0m type = "string"
                                            }
                                          [32m+[0m[0m location                                = {
                                              [32m+[0m[0m type = "string"
                                            }
                                          [32m+[0m[0m resourceId                              = {
                                              [32m+[0m[0m type = "string"
                                            }
                                          [32m+[0m[0m uaName                                  = {
                                              [32m+[0m[0m type = "string"
                                            }
                                          [32m+[0m[0m vmName                                  = {
                                              [32m+[0m[0m type = "string"
                                            }
                                          [32m+[0m[0m vmResourceGroup                         = {
                                              [32m+[0m[0m type = "string"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2020-06-01"
                                              [32m+[0m[0m location   = "[parameters('builtInIdentityResourceGroupLocation')]"
                                              [32m+[0m[0m name       = "[parameters('identityResourceGroup')]"
                                              [32m+[0m[0m type       = "Microsoft.Resources/resourceGroups"
                                            },
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion    = "2020-06-01"
                                              [32m+[0m[0m condition     = "[parameters('bringYourOwnUserAssignedManagedIdentity')]"
                                              [32m+[0m[0m dependsOn     = [
                                                  [32m+[0m[0m "[resourceId('Microsoft.Resources/resourceGroups', parameters('identityResourceGroup'))]",
                                                ]
                                              [32m+[0m[0m name          = "[variables('deployUALockName')]"
                                              [32m+[0m[0m properties    = {
                                                  [32m+[0m[0m expressionEvaluationOptions = {
                                                      [32m+[0m[0m scope = "inner"
                                                    }
                                                  [32m+[0m[0m mode                        = "Incremental"
                                                  [32m+[0m[0m parameters                  = {
                                                      [32m+[0m[0m location = {
                                                          [32m+[0m[0m value = "[parameters('location')]"
                                                        }
                                                      [32m+[0m[0m uaName   = {
                                                          [32m+[0m[0m value = "[parameters('uaName')]"
                                                        }
                                                    }
                                                  [32m+[0m[0m template                    = {
                                                      [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                                      [32m+[0m[0m parameters     = {
                                                          [32m+[0m[0m location = {
                                                              [32m+[0m[0m type = "string"
                                                            }
                                                          [32m+[0m[0m uaName   = {
                                                              [32m+[0m[0m type = "string"
                                                            }
                                                        }
                                                      [32m+[0m[0m resources      = [
                                                          [32m+[0m[0m {
                                                              [32m+[0m[0m apiVersion = "2018-11-30"
                                                              [32m+[0m[0m location   = "[parameters('location')]"
                                                              [32m+[0m[0m name       = "[parameters('uaName')]"
                                                              [32m+[0m[0m type       = "Microsoft.ManagedIdentity/userAssignedIdentities"
                                                            },
                                                        ]
                                                      [32m+[0m[0m variables      = {}
                                                    }
                                                }
                                              [32m+[0m[0m resourceGroup = "[parameters('identityResourceGroup')]"
                                              [32m+[0m[0m type          = "Microsoft.Resources/deployments"
                                            },
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion    = "2020-06-01"
                                              [32m+[0m[0m condition     = "[not(parameters('bringYourOwnUserAssignedManagedIdentity'))]"
                                              [32m+[0m[0m dependsOn     = [
                                                  [32m+[0m[0m "[resourceId('Microsoft.Resources/resourceGroups', parameters('identityResourceGroup'))]",
                                                ]
                                              [32m+[0m[0m name          = "[variables('deployUAName')]"
                                              [32m+[0m[0m properties    = {
                                                  [32m+[0m[0m expressionEvaluationOptions = {
                                                      [32m+[0m[0m scope = "inner"
                                                    }
                                                  [32m+[0m[0m mode                        = "Incremental"
                                                  [32m+[0m[0m parameters                  = {
                                                      [32m+[0m[0m location = {
                                                          [32m+[0m[0m value = "[parameters('location')]"
                                                        }
                                                      [32m+[0m[0m uaName   = {
                                                          [32m+[0m[0m value = "[variables('uaNameWithLocation')]"
                                                        }
                                                    }
                                                  [32m+[0m[0m template                    = {
                                                      [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                                      [32m+[0m[0m parameters     = {
                                                          [32m+[0m[0m location = {
                                                              [32m+[0m[0m type = "string"
                                                            }
                                                          [32m+[0m[0m uaName   = {
                                                              [32m+[0m[0m type = "string"
                                                            }
                                                        }
                                                      [32m+[0m[0m resources      = [
                                                          [32m+[0m[0m {
                                                              [32m+[0m[0m apiVersion = "2018-11-30"
                                                              [32m+[0m[0m location   = "[parameters('location')]"
                                                              [32m+[0m[0m name       = "[parameters('uaName')]"
                                                              [32m+[0m[0m type       = "Microsoft.ManagedIdentity/userAssignedIdentities"
                                                            },
                                                          [32m+[0m[0m {
                                                              [32m+[0m[0m apiVersion = "2016-09-01"
                                                              [32m+[0m[0m dependsOn  = [
                                                                  [32m+[0m[0m "[parameters('uaName')]",
                                                                ]
                                                              [32m+[0m[0m name       = "[concat(parameters('uaName'), '/Microsoft.Authorization/', 'CanNotDeleteLock-', parameters('uaName'))]"
                                                              [32m+[0m[0m properties = {
                                                                  [32m+[0m[0m level = "CanNotDelete"
                                                                  [32m+[0m[0m notes = "Please do not delete this User-Assigned Identity since extensions enabled by Azure Policy are relying on their existence."
                                                                }
                                                              [32m+[0m[0m type       = "Microsoft.ManagedIdentity/userAssignedIdentities/providers/locks"
                                                            },
                                                        ]
                                                      [32m+[0m[0m variables      = {}
                                                    }
                                                }
                                              [32m+[0m[0m resourceGroup = "[parameters('identityResourceGroup')]"
                                              [32m+[0m[0m type          = "Microsoft.Resources/deployments"
                                            },
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2020-06-01"
                                              [32m+[0m[0m dependsOn  = [
                                                  [32m+[0m[0m "[resourceId('Microsoft.Resources/resourceGroups', parameters('identityResourceGroup'))]",
                                                  [32m+[0m[0m "[variables('deployUAName')]",
                                                ]
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[variables('deployGetResourceProperties')]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m mode     = "Incremental"
                                                  [32m+[0m[0m template = {
                                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                                      [32m+[0m[0m outputs        = {
                                                          [32m+[0m[0m resource = {
                                                              [32m+[0m[0m type  = "object"
                                                              [32m+[0m[0m value = "[reference(parameters('resourceId'), '2019-07-01', 'Full')]"
                                                            }
                                                        }
                                                      [32m+[0m[0m resources      = []
                                                    }
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Resources/deployments"
                                            },
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion    = "2020-06-01"
                                              [32m+[0m[0m dependsOn     = [
                                                  [32m+[0m[0m "[resourceId('Microsoft.Resources/resourceGroups', parameters('identityResourceGroup'))]",
                                                  [32m+[0m[0m "[variables('deployUAName')]",
                                                  [32m+[0m[0m "[variables('deployGetResourceProperties')]",
                                                ]
                                              [32m+[0m[0m name          = "[concat(variables('deployAssignUAName'))]"
                                              [32m+[0m[0m properties    = {
                                                  [32m+[0m[0m expressionEvaluationOptions = {
                                                      [32m+[0m[0m scope = "inner"
                                                    }
                                                  [32m+[0m[0m mode                        = "Incremental"
                                                  [32m+[0m[0m parameters                  = {
                                                      [32m+[0m[0m identityType           = {
                                                          [32m+[0m[0m value = "[if(contains(reference(variables('deployGetResourceProperties')).outputs.resource.value, 'identity'), reference(variables('deployGetResourceProperties')).outputs.resource.value.identity.type, '')]"
                                                        }
                                                      [32m+[0m[0m location               = {
                                                          [32m+[0m[0m value = "[parameters('location')]"
                                                        }
                                                      [32m+[0m[0m uaId                   = {
                                                          [32m+[0m[0m value = "[if(parameters('bringYourOwnUserAssignedManagedIdentity'), variables('precreatedUaId'), variables('autocreatedUaId'))]"
                                                        }
                                                      [32m+[0m[0m userAssignedIdentities = {
                                                          [32m+[0m[0m value = "[if(and(contains(reference(variables('deployGetResourceProperties')).outputs.resource.value, 'identity'), contains(reference(variables('deployGetResourceProperties')).outputs.resource.value.identity, 'userAssignedIdentities')), reference(variables('deployGetResourceProperties')).outputs.resource.value.identity.userAssignedIdentities, createObject())]"
                                                        }
                                                      [32m+[0m[0m vmName                 = {
                                                          [32m+[0m[0m value = "[parameters('vmName')]"
                                                        }
                                                    }
                                                  [32m+[0m[0m template                    = {
                                                      [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                                      [32m+[0m[0m parameters     = {
                                                          [32m+[0m[0m identityType           = {
                                                              [32m+[0m[0m type = "string"
                                                            }
                                                          [32m+[0m[0m location               = {
                                                              [32m+[0m[0m type = "string"
                                                            }
                                                          [32m+[0m[0m uaId                   = {
                                                              [32m+[0m[0m type = "string"
                                                            }
                                                          [32m+[0m[0m userAssignedIdentities = {
                                                              [32m+[0m[0m type = "object"
                                                            }
                                                          [32m+[0m[0m vmName                 = {
                                                              [32m+[0m[0m type = "string"
                                                            }
                                                        }
                                                      [32m+[0m[0m resources      = [
                                                          [32m+[0m[0m {
                                                              [32m+[0m[0m apiVersion = "2019-07-01"
                                                              [32m+[0m[0m condition  = "[not(variables('resourceWithSingleUAI'))]"
                                                              [32m+[0m[0m identity   = {
                                                                  [32m+[0m[0m type                   = "[variables('identityTypeValue')]"
                                                                  [32m+[0m[0m userAssignedIdentities = "[variables('userAssignedIdentitiesValue')]"
                                                                }
                                                              [32m+[0m[0m location   = "[parameters('location')]"
                                                              [32m+[0m[0m name       = "[parameters('vmName')]"
                                                              [32m+[0m[0m type       = "Microsoft.Compute/virtualMachines"
                                                            },
                                                        ]
                                                      [32m+[0m[0m variables      = {
                                                          [32m+[0m[0m identityTypeValue           = "[if(contains(parameters('identityType'), 'SystemAssigned'), 'SystemAssigned,UserAssigned', 'UserAssigned')]"
                                                          [32m+[0m[0m resourceWithSingleUAI       = "[and(equals(parameters('identityType'), 'UserAssigned'), equals(string(length(parameters('userAssignedIdentities'))), '1'))]"
                                                          [32m+[0m[0m userAssignedIdentitiesValue = "[union(parameters('userAssignedIdentities'), createObject(parameters('uaId'), createObject()))]"
                                                        }
                                                    }
                                                }
                                              [32m+[0m[0m resourceGroup = "[parameters('vmResourceGroup')]"
                                              [32m+[0m[0m type          = "Microsoft.Resources/deployments"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {
                                          [32m+[0m[0m autocreatedUaId             = "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', trim(parameters('identityResourceGroup')), '/providers/Microsoft.ManagedIdentity/userAssignedIdentities/', trim(parameters('uaName')), '-', parameters('location'))]"
                                          [32m+[0m[0m deployAssignUAName          = "[concat('deployAssignUA-', uniqueString(deployment().name))]"
                                          [32m+[0m[0m deployGetResourceProperties = "[concat('deployGetResourceProperties-', uniqueString(deployment().name))]"
                                          [32m+[0m[0m deployUALockName            = "[concat('deployUALock-', uniqueString(deployment().name))]"
                                          [32m+[0m[0m deployUAName                = "[concat('deployUA-', uniqueString(deployment().name))]"
                                          [32m+[0m[0m precreatedUaId              = "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', trim(parameters('identityResourceGroup')), '/providers/Microsoft.ManagedIdentity/userAssignedIdentities/', trim(parameters('uaName')))]"
                                          [32m+[0m[0m uaNameWithLocation          = "[concat(parameters('uaName'),'-', parameters('location'))]"
                                        }
                                    }
                                }
                            }
                          [32m+[0m[0m deploymentScope    = "subscription"
                          [32m+[0m[0m evaluationDelay    = "AfterProvisioning"
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m anyOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m allOf = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m contains = "UserAssigned"
                                              [32m+[0m[0m field    = "identity.type"
                                            },
                                          [32m+[0m[0m {
                                              [32m+[0m[0m containsKey = "[if(parameters('bringYourOwnUserAssignedManagedIdentity'), concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', trim(parameters('identityResourceGroup')), '/providers/Microsoft.ManagedIdentity/userAssignedIdentities/', trim(parameters('userAssignedIdentityName'))), concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/Built-In-Identity-RG/providers/Microsoft.ManagedIdentity/userAssignedIdentities/Built-In-Identity-', field('location')))]"
                                              [32m+[0m[0m field       = "identity.userAssignedIdentities"
                                            },
                                        ]
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m allOf = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m equals = "UserAssigned"
                                              [32m+[0m[0m field  = "identity.type"
                                            },
                                          [32m+[0m[0m {
                                              [32m+[0m[0m equals = "1"
                                              [32m+[0m[0m value  = "[string(length(field('identity.userAssignedIdentities')))]"
                                            },
                                        ]
                                    },
                                ]
                            }
                          [32m+[0m[0m name               = "[field('name')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Compute/virtualMachines"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-UserAssignedManagedIdentity-VMInsights"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-VNET-HubSpoke"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "This policy deploys virtual network and peer to the hub"
              [32m+[0m[0m displayName = "Deploy Virtual Network with peering to the hub"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Network"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.1.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m dnsServers               = {
                      [32m+[0m[0m defaultValue = []
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "Default domain servers for the vNET."
                          [32m+[0m[0m displayName = "DNSServers"
                        }
                      [32m+[0m[0m type         = "Array"
                    }
                  [32m+[0m[0m hubResourceId            = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Resource ID for the HUB vNet"
                          [32m+[0m[0m displayName = "hubResourceId"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m vNetCidrRange            = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "CIDR Range for the vNet"
                          [32m+[0m[0m displayName = "vNetCidrRange"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m vNetLocation             = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Location for the vNet"
                          [32m+[0m[0m displayName = "vNetLocation"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m vNetName                 = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Name of the landing zone vNet"
                          [32m+[0m[0m displayName = "vNetName"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m vNetPeerUseRemoteGateway = {
                      [32m+[0m[0m defaultValue = false
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "Enable gateway transit for the LZ network"
                          [32m+[0m[0m displayName = "vNetPeerUseRemoteGateway"
                        }
                      [32m+[0m[0m type         = "Boolean"
                    }
                  [32m+[0m[0m vNetRgName               = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "Name of the landing zone vNet RG"
                          [32m+[0m[0m displayName = "vNetRgName"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Resources/subscriptions"
                              [32m+[0m[0m field  = "type"
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m ResourceGroupName  = "[parameters('vNetRgName')]"
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m location   = "northeurope"
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m dnsServers               = {
                                          [32m+[0m[0m value = "[parameters('dnsServers')]"
                                        }
                                      [32m+[0m[0m hubResourceId            = {
                                          [32m+[0m[0m value = "[parameters('hubResourceId')]"
                                        }
                                      [32m+[0m[0m vNetCidrRange            = {
                                          [32m+[0m[0m value = "[parameters('vNetCidrRange')]"
                                        }
                                      [32m+[0m[0m vNetLocation             = {
                                          [32m+[0m[0m value = "[parameters('vNetLocation')]"
                                        }
                                      [32m+[0m[0m vNetName                 = {
                                          [32m+[0m[0m value = "[parameters('vNetName')]"
                                        }
                                      [32m+[0m[0m vNetPeerUseRemoteGateway = {
                                          [32m+[0m[0m value = "[parameters('vNetPeerUseRemoteGateway')]"
                                        }
                                      [32m+[0m[0m vNetRgName               = {
                                          [32m+[0m[0m value = "[parameters('vNetRgName')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "http://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m dnsServers               = {
                                              [32m+[0m[0m defaultValue = []
                                              [32m+[0m[0m type         = "Array"
                                            }
                                          [32m+[0m[0m hubResourceId            = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m vNetCidrRange            = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m vNetLocation             = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m vNetName                 = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m vNetPeerUseRemoteGateway = {
                                              [32m+[0m[0m defaultValue = false
                                              [32m+[0m[0m type         = "bool"
                                            }
                                          [32m+[0m[0m vNetRgName               = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2021-04-01"
                                              [32m+[0m[0m dependsOn  = []
                                              [32m+[0m[0m location   = "[parameters('vNetLocation')]"
                                              [32m+[0m[0m name       = "[concat('alz-vnet-rg-', parameters('vNetLocation'), '-', substring(uniqueString(subscription().id),0,6))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m mode     = "Incremental"
                                                  [32m+[0m[0m template = {
                                                      [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                                      [32m+[0m[0m outputs        = {}
                                                      [32m+[0m[0m parameters     = {}
                                                      [32m+[0m[0m resources      = [
                                                          [32m+[0m[0m {
                                                              [32m+[0m[0m apiVersion = "2021-04-01"
                                                              [32m+[0m[0m location   = "[parameters('vNetLocation')]"
                                                              [32m+[0m[0m name       = "[parameters('vNetRgName')]"
                                                              [32m+[0m[0m properties = {}
                                                              [32m+[0m[0m type       = "Microsoft.Resources/resourceGroups"
                                                            },
                                                        ]
                                                      [32m+[0m[0m variables      = {}
                                                    }
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Resources/deployments"
                                            },
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion    = "2021-04-01"
                                              [32m+[0m[0m dependsOn     = [
                                                  [32m+[0m[0m "[concat('alz-vnet-rg-', parameters('vNetLocation'), '-', substring(uniqueString(subscription().id),0,6))]",
                                                ]
                                              [32m+[0m[0m name          = "[concat('alz-vnet-', parameters('vNetLocation'), '-', substring(uniqueString(subscription().id),0,6))]"
                                              [32m+[0m[0m properties    = {
                                                  [32m+[0m[0m mode     = "Incremental"
                                                  [32m+[0m[0m template = {
                                                      [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                                      [32m+[0m[0m outputs        = {}
                                                      [32m+[0m[0m parameters     = {}
                                                      [32m+[0m[0m resources      = [
                                                          [32m+[0m[0m {
                                                              [32m+[0m[0m apiVersion = "2021-02-01"
                                                              [32m+[0m[0m dependsOn  = []
                                                              [32m+[0m[0m location   = "[parameters('vNetLocation')]"
                                                              [32m+[0m[0m name       = "[parameters('vNetName')]"
                                                              [32m+[0m[0m properties = {
                                                                  [32m+[0m[0m addressSpace = {
                                                                      [32m+[0m[0m addressPrefixes = [
                                                                          [32m+[0m[0m "[parameters('vNetCidrRange')]",
                                                                        ]
                                                                    }
                                                                  [32m+[0m[0m dhcpOptions  = {
                                                                      [32m+[0m[0m dnsServers = "[parameters('dnsServers')]"
                                                                    }
                                                                }
                                                              [32m+[0m[0m type       = "Microsoft.Network/virtualNetworks"
                                                            },
                                                          [32m+[0m[0m {
                                                              [32m+[0m[0m apiVersion = "2021-02-01"
                                                              [32m+[0m[0m dependsOn  = [
                                                                  [32m+[0m[0m "[parameters('vNetName')]",
                                                                ]
                                                              [32m+[0m[0m name       = "[concat(parameters('vNetName'), '/peerToHub')]"
                                                              [32m+[0m[0m properties = {
                                                                  [32m+[0m[0m allowForwardedTraffic     = true
                                                                  [32m+[0m[0m allowGatewayTransit       = false
                                                                  [32m+[0m[0m allowVirtualNetworkAccess = true
                                                                  [32m+[0m[0m remoteVirtualNetwork      = {
                                                                      [32m+[0m[0m id = "[parameters('hubResourceId')]"
                                                                    }
                                                                  [32m+[0m[0m useRemoteGateways         = "[parameters('vNetPeerUseRemoteGateway')]"
                                                                }
                                                              [32m+[0m[0m type       = "Microsoft.Network/virtualNetworks/virtualNetworkPeerings"
                                                            },
                                                          [32m+[0m[0m {
                                                              [32m+[0m[0m apiVersion     = "2021-04-01"
                                                              [32m+[0m[0m dependsOn      = [
                                                                  [32m+[0m[0m "[parameters('vNetName')]",
                                                                ]
                                                              [32m+[0m[0m name           = "[concat('alz-hub-peering-', parameters('vNetLocation'), '-', substring(uniqueString(subscription().id),0,6))]"
                                                              [32m+[0m[0m properties     = {
                                                                  [32m+[0m[0m expressionEvaluationOptions = {
                                                                      [32m+[0m[0m scope = "inner"
                                                                    }
                                                                  [32m+[0m[0m mode                        = "Incremental"
                                                                  [32m+[0m[0m parameters                  = {
                                                                      [32m+[0m[0m hubName              = {
                                                                          [32m+[0m[0m value = "[split(parameters('hubResourceId'),'/')[8]]"
                                                                        }
                                                                      [32m+[0m[0m remoteVirtualNetwork = {
                                                                          [32m+[0m[0m value = "[concat(subscription().id,'/resourceGroups/',parameters('vNetRgName'), '/providers/','Microsoft.Network/virtualNetworks/', parameters('vNetName'))]"
                                                                        }
                                                                    }
                                                                  [32m+[0m[0m template                    = {
                                                                      [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                                                      [32m+[0m[0m outputs        = {}
                                                                      [32m+[0m[0m parameters     = {
                                                                          [32m+[0m[0m hubName              = {
                                                                              [32m+[0m[0m defaultValue = false
                                                                              [32m+[0m[0m type         = "String"
                                                                            }
                                                                          [32m+[0m[0m remoteVirtualNetwork = {
                                                                              [32m+[0m[0m defaultValue = false
                                                                              [32m+[0m[0m type         = "String"
                                                                            }
                                                                        }
                                                                      [32m+[0m[0m resources      = [
                                                                          [32m+[0m[0m {
                                                                              [32m+[0m[0m apiVersion = "2021-02-01"
                                                                              [32m+[0m[0m name       = "[[concat(parameters('hubName'),'/',last(split(parameters('remoteVirtualNetwork'),'/')))]"
                                                                              [32m+[0m[0m properties = {
                                                                                  [32m+[0m[0m allowForwardedTraffic     = true
                                                                                  [32m+[0m[0m allowGatewayTransit       = true
                                                                                  [32m+[0m[0m allowVirtualNetworkAccess = true
                                                                                  [32m+[0m[0m remoteVirtualNetwork      = {
                                                                                      [32m+[0m[0m id = "[[parameters('remoteVirtualNetwork')]"
                                                                                    }
                                                                                  [32m+[0m[0m useRemoteGateways         = false
                                                                                }
                                                                              [32m+[0m[0m type       = "Microsoft.Network/virtualNetworks/virtualNetworkPeerings"
                                                                            },
                                                                        ]
                                                                      [32m+[0m[0m variables      = {}
                                                                    }
                                                                }
                                                              [32m+[0m[0m resourceGroup  = "[split(parameters('hubResourceId'),'/')[4]]"
                                                              [32m+[0m[0m subscriptionId = "[split(parameters('hubResourceId'),'/')[2]]"
                                                              [32m+[0m[0m type           = "Microsoft.Resources/deployments"
                                                            },
                                                        ]
                                                      [32m+[0m[0m variables      = {}
                                                    }
                                                }
                                              [32m+[0m[0m resourceGroup = "[parameters('vNetRgName')]"
                                              [32m+[0m[0m type          = "Microsoft.Resources/deployments"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m deploymentScope    = "subscription"
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m field = "name"
                                      [32m+[0m[0m like  = "[parameters('vNetName')]"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[parameters('vNetLocation')]"
                                      [32m+[0m[0m field  = "location"
                                    },
                                ]
                            }
                          [32m+[0m[0m existenceScope     = "resourceGroup"
                          [32m+[0m[0m name               = "[parameters('vNetName')]"
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Network/virtualNetworks"
                        }
                      [32m+[0m[0m effect  = "deployIfNotExists"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-VNET-HubSpoke"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Vm-autoShutdown"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploys an auto shutdown schedule to a virtual machine"
              [32m+[0m[0m displayName = "Deploy Virtual Machine Auto Shutdown Schedule"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Compute"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m EnableNotification         = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Disabled",
                          [32m+[0m[0m "Enabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Disabled"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "If notifications are enabled for this schedule (i.e. Enabled, Disabled)."
                          [32m+[0m[0m displayName = "Send Notification before auto-shutdown"
                        }
                      [32m+[0m[0m type          = "string"
                    }
                  [32m+[0m[0m NotificationEmailRecipient = {
                      [32m+[0m[0m defaultValue = ""
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "Email address to be used for notification"
                          [32m+[0m[0m displayName = "Email Address"
                        }
                      [32m+[0m[0m type         = "string"
                    }
                  [32m+[0m[0m NotificationWebhookUrl     = {
                      [32m+[0m[0m defaultValue = ""
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "A notification will be posted to the specified webhook endpoint when the auto-shutdown is about to happen."
                          [32m+[0m[0m displayName = "Webhook URL"
                        }
                      [32m+[0m[0m type         = "string"
                    }
                  [32m+[0m[0m time                       = {
                      [32m+[0m[0m defaultValue = "0000"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "Daily Scheduled shutdown time. i.e. 2300 = 11:00 PM"
                          [32m+[0m[0m displayName = "Scheduled Shutdown Time"
                        }
                      [32m+[0m[0m type         = "String"
                    }
                  [32m+[0m[0m timeZoneId                 = {
                      [32m+[0m[0m defaultValue = "UTC"
                      [32m+[0m[0m metadata     = {
                          [32m+[0m[0m description = "The time zone ID (e.g. Pacific Standard time)."
                          [32m+[0m[0m displayName = "Time zone"
                        }
                      [32m+[0m[0m type         = "string"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m equals = "Microsoft.Compute/virtualMachines"
                      [32m+[0m[0m field  = "type"
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m EnableNotification         = {
                                          [32m+[0m[0m value = "[parameters('EnableNotification')]"
                                        }
                                      [32m+[0m[0m NotificationEmailRecipient = {
                                          [32m+[0m[0m value = "[parameters('NotificationEmailRecipient')]"
                                        }
                                      [32m+[0m[0m NotificationWebhookUrl     = {
                                          [32m+[0m[0m value = "[parameters('NotificationWebhookUrl')]"
                                        }
                                      [32m+[0m[0m location                   = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m time                       = {
                                          [32m+[0m[0m value = "[parameters('time')]"
                                        }
                                      [32m+[0m[0m timeZoneId                 = {
                                          [32m+[0m[0m value = "[parameters('timeZoneId')]"
                                        }
                                      [32m+[0m[0m vmName                     = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m EnableNotification         = {
                                              [32m+[0m[0m defaultValue = ""
                                              [32m+[0m[0m metadata     = {
                                                  [32m+[0m[0m description = "If notifications are enabled for this schedule (i.e. Enabled, Disabled)."
                                                }
                                              [32m+[0m[0m type         = "string"
                                            }
                                          [32m+[0m[0m NotificationEmailRecipient = {
                                              [32m+[0m[0m defaultValue = ""
                                              [32m+[0m[0m metadata     = {
                                                  [32m+[0m[0m description = "Email address to be used for notification"
                                                }
                                              [32m+[0m[0m type         = "string"
                                            }
                                          [32m+[0m[0m NotificationWebhookUrl     = {
                                              [32m+[0m[0m defaultValue = ""
                                              [32m+[0m[0m metadata     = {
                                                  [32m+[0m[0m description = "A notification will be posted to the specified webhook endpoint when the auto-shutdown is about to happen."
                                                }
                                              [32m+[0m[0m type         = "string"
                                            }
                                          [32m+[0m[0m location                   = {
                                              [32m+[0m[0m type = "string"
                                            }
                                          [32m+[0m[0m time                       = {
                                              [32m+[0m[0m defaultValue = ""
                                              [32m+[0m[0m metadata     = {
                                                  [32m+[0m[0m description = "Daily Scheduled shutdown time. i.e. 2300 = 11:00 PM"
                                                }
                                              [32m+[0m[0m type         = "string"
                                            }
                                          [32m+[0m[0m timeZoneId                 = {
                                              [32m+[0m[0m defaultValue = ""
                                              [32m+[0m[0m metadata     = {
                                                  [32m+[0m[0m description = "The time zone ID (e.g. Pacific Standard time)."
                                                }
                                              [32m+[0m[0m type         = "string"
                                            }
                                          [32m+[0m[0m vmName                     = {
                                              [32m+[0m[0m type = "string"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2018-09-15"
                                              [32m+[0m[0m location   = "[parameters('location')]"
                                              [32m+[0m[0m name       = "[concat('shutdown-computevm-',parameters('vmName'))]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m dailyRecurrence      = {
                                                      [32m+[0m[0m time = "[parameters('time')]"
                                                    }
                                                  [32m+[0m[0m notificationSettings = {
                                                      [32m+[0m[0m emailRecipient     = "[parameters('NotificationEmailRecipient')]"
                                                      [32m+[0m[0m notificationLocale = "en"
                                                      [32m+[0m[0m status             = "[parameters('EnableNotification')]"
                                                      [32m+[0m[0m timeInMinutes      = 30
                                                      [32m+[0m[0m webhookUrl         = "[parameters('NotificationWebhookUrl')]"
                                                    }
                                                  [32m+[0m[0m status               = "Enabled"
                                                  [32m+[0m[0m targetResourceId     = "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
                                                  [32m+[0m[0m taskType             = "ComputeVmShutdownTask"
                                                  [32m+[0m[0m timeZoneId           = "[parameters('timeZoneId')]"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.DevTestLab/schedules"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {}
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "ComputeVmShutdownTask"
                                      [32m+[0m[0m field  = "Microsoft.DevTestLab/schedules/taskType"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "[concat(resourceGroup().id,'/providers/Microsoft.Compute/virtualMachines/',field('name'))]"
                                      [32m+[0m[0m field  = "Microsoft.DevTestLab/schedules/targetResourceId"
                                    },
                                ]
                            }
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/9980e02c-c2be-4d73-94e8-173b1dc7cf3c",
                            ]
                          [32m+[0m[0m type               = "Microsoft.DevTestLab/schedules"
                        }
                      [32m+[0m[0m effect  = "deployIfNotExists"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Vm-autoShutdown"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Deploy-Windows-DomainJoin"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "Deploy Windows Domain Join Extension with keyvault configuration when the extension does not exist on a given windows Virtual Machine"
              [32m+[0m[0m displayName = "Deploy Windows Domain Join Extension with keyvault configuration"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Guest Configuration"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "Indexed"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m domainFQDN         = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m displayName = "domainFQDN"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m domainOUPath       = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m displayName = "domainOUPath"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m domainPassword     = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m displayName = "domainPassword"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m domainUsername     = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m displayName = "domainUsername"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                  [32m+[0m[0m effect             = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "DeployIfNotExists",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "DeployIfNotExists"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m keyVaultResourceId = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m displayName = "keyVaultResourceId"
                        }
                      [32m+[0m[0m type     = "String"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Compute/virtualMachines"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "MicrosoftWindowsServer"
                              [32m+[0m[0m field  = "Microsoft.Compute/imagePublisher"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "WindowsServer"
                              [32m+[0m[0m field  = "Microsoft.Compute/imageOffer"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m field = "Microsoft.Compute/imageSKU"
                              [32m+[0m[0m in    = [
                                  [32m+[0m[0m "2008-R2-SP1",
                                  [32m+[0m[0m "2008-R2-SP1-smalldisk",
                                  [32m+[0m[0m "2008-R2-SP1-zhcn",
                                  [32m+[0m[0m "2012-Datacenter",
                                  [32m+[0m[0m "2012-datacenter-gensecond",
                                  [32m+[0m[0m "2012-Datacenter-smalldisk",
                                  [32m+[0m[0m "2012-datacenter-smalldisk-g2",
                                  [32m+[0m[0m "2012-Datacenter-zhcn",
                                  [32m+[0m[0m "2012-datacenter-zhcn-g2",
                                  [32m+[0m[0m "2012-R2-Datacenter",
                                  [32m+[0m[0m "2012-r2-datacenter-gensecond",
                                  [32m+[0m[0m "2012-R2-Datacenter-smalldisk",
                                  [32m+[0m[0m "2012-r2-datacenter-smalldisk-g2",
                                  [32m+[0m[0m "2012-R2-Datacenter-zhcn",
                                  [32m+[0m[0m "2012-r2-datacenter-zhcn-g2",
                                  [32m+[0m[0m "2016-Datacenter",
                                  [32m+[0m[0m "2016-datacenter-gensecond",
                                  [32m+[0m[0m "2016-datacenter-gs",
                                  [32m+[0m[0m "2016-Datacenter-Server-Core",
                                  [32m+[0m[0m "2016-datacenter-server-core-g2",
                                  [32m+[0m[0m "2016-Datacenter-Server-Core-smalldisk",
                                  [32m+[0m[0m "2016-datacenter-server-core-smalldisk-g2",
                                  [32m+[0m[0m "2016-Datacenter-smalldisk",
                                  [32m+[0m[0m "2016-datacenter-smalldisk-g2",
                                  [32m+[0m[0m "2016-Datacenter-with-Containers",
                                  [32m+[0m[0m "2016-datacenter-with-containers-g2",
                                  [32m+[0m[0m "2016-Datacenter-with-RDSH",
                                  [32m+[0m[0m "2016-Datacenter-zhcn",
                                  [32m+[0m[0m "2016-datacenter-zhcn-g2",
                                  [32m+[0m[0m "2019-Datacenter",
                                  [32m+[0m[0m "2019-Datacenter-Core",
                                  [32m+[0m[0m "2019-datacenter-core-g2",
                                  [32m+[0m[0m "2019-Datacenter-Core-smalldisk",
                                  [32m+[0m[0m "2019-datacenter-core-smalldisk-g2",
                                  [32m+[0m[0m "2019-Datacenter-Core-with-Containers",
                                  [32m+[0m[0m "2019-datacenter-core-with-containers-g2",
                                  [32m+[0m[0m "2019-Datacenter-Core-with-Containers-smalldisk",
                                  [32m+[0m[0m "2019-datacenter-core-with-containers-smalldisk-g2",
                                  [32m+[0m[0m "2019-datacenter-gensecond",
                                  [32m+[0m[0m "2019-datacenter-gs",
                                  [32m+[0m[0m "2019-Datacenter-smalldisk",
                                  [32m+[0m[0m "2019-datacenter-smalldisk-g2",
                                  [32m+[0m[0m "2019-Datacenter-with-Containers",
                                  [32m+[0m[0m "2019-datacenter-with-containers-g2",
                                  [32m+[0m[0m "2019-Datacenter-with-Containers-smalldisk",
                                  [32m+[0m[0m "2019-datacenter-with-containers-smalldisk-g2",
                                  [32m+[0m[0m "2019-Datacenter-zhcn",
                                  [32m+[0m[0m "2019-datacenter-zhcn-g2",
                                  [32m+[0m[0m "Datacenter-Core-1803-with-Containers-smalldisk",
                                  [32m+[0m[0m "datacenter-core-1803-with-containers-smalldisk-g2",
                                  [32m+[0m[0m "Datacenter-Core-1809-with-Containers-smalldisk",
                                  [32m+[0m[0m "datacenter-core-1809-with-containers-smalldisk-g2",
                                  [32m+[0m[0m "Datacenter-Core-1903-with-Containers-smalldisk",
                                  [32m+[0m[0m "datacenter-core-1903-with-containers-smalldisk-g2",
                                  [32m+[0m[0m "datacenter-core-1909-with-containers-smalldisk",
                                  [32m+[0m[0m "datacenter-core-1909-with-containers-smalldisk-g1",
                                  [32m+[0m[0m "datacenter-core-1909-with-containers-smalldisk-g2",
                                ]
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m deployment         = {
                              [32m+[0m[0m properties = {
                                  [32m+[0m[0m mode       = "Incremental"
                                  [32m+[0m[0m parameters = {
                                      [32m+[0m[0m domainFQDN         = {
                                          [32m+[0m[0m value = "[parameters('domainFQDN')]"
                                        }
                                      [32m+[0m[0m domainOUPath       = {
                                          [32m+[0m[0m value = "[parameters('domainOUPath')]"
                                        }
                                      [32m+[0m[0m domainPassword     = {
                                          [32m+[0m[0m reference = {
                                              [32m+[0m[0m keyVault   = {
                                                  [32m+[0m[0m id = "[parameters('keyVaultResourceId')]"
                                                }
                                              [32m+[0m[0m secretName = "[parameters('domainPassword')]"
                                            }
                                        }
                                      [32m+[0m[0m domainUsername     = {
                                          [32m+[0m[0m reference = {
                                              [32m+[0m[0m keyVault   = {
                                                  [32m+[0m[0m id = "[parameters('keyVaultResourceId')]"
                                                }
                                              [32m+[0m[0m secretName = "[parameters('domainUsername')]"
                                            }
                                        }
                                      [32m+[0m[0m keyVaultResourceId = {
                                          [32m+[0m[0m value = "[parameters('keyVaultResourceId')]"
                                        }
                                      [32m+[0m[0m location           = {
                                          [32m+[0m[0m value = "[field('location')]"
                                        }
                                      [32m+[0m[0m vmName             = {
                                          [32m+[0m[0m value = "[field('name')]"
                                        }
                                    }
                                  [32m+[0m[0m template   = {
                                      [32m+[0m[0m "$schema"      = "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
                                      [32m+[0m[0m contentVersion = "1.0.0.0"
                                      [32m+[0m[0m outputs        = {}
                                      [32m+[0m[0m parameters     = {
                                          [32m+[0m[0m domainFQDN         = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m domainOUPath       = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m domainPassword     = {
                                              [32m+[0m[0m type = "securestring"
                                            }
                                          [32m+[0m[0m domainUsername     = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m keyVaultResourceId = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m location           = {
                                              [32m+[0m[0m type = "String"
                                            }
                                          [32m+[0m[0m vmName             = {
                                              [32m+[0m[0m type = "String"
                                            }
                                        }
                                      [32m+[0m[0m resources      = [
                                          [32m+[0m[0m {
                                              [32m+[0m[0m apiVersion = "2015-06-15"
                                              [32m+[0m[0m location   = "[resourceGroup().location]"
                                              [32m+[0m[0m name       = "[concat(variables('vmName'),'/joindomain')]"
                                              [32m+[0m[0m properties = {
                                                  [32m+[0m[0m autoUpgradeMinorVersion = true
                                                  [32m+[0m[0m protectedSettings       = {
                                                      [32m+[0m[0m Password = "[parameters('domainPassword')]"
                                                    }
                                                  [32m+[0m[0m publisher               = "Microsoft.Compute"
                                                  [32m+[0m[0m settings                = {
                                                      [32m+[0m[0m Name    = "[parameters('domainFQDN')]"
                                                      [32m+[0m[0m OUPath  = "[parameters('domainOUPath')]"
                                                      [32m+[0m[0m Options = "[variables('domainJoinOptions')]"
                                                      [32m+[0m[0m Restart = "true"
                                                      [32m+[0m[0m User    = "[parameters('domainUserName')]"
                                                    }
                                                  [32m+[0m[0m type                    = "JsonADDomainExtension"
                                                  [32m+[0m[0m typeHandlerVersion      = "1.3"
                                                }
                                              [32m+[0m[0m type       = "Microsoft.Compute/virtualMachines/extensions"
                                            },
                                        ]
                                      [32m+[0m[0m variables      = {
                                          [32m+[0m[0m domainJoinOptions = 3
                                          [32m+[0m[0m vmName            = "[parameters('vmName')]"
                                        }
                                    }
                                }
                            }
                          [32m+[0m[0m existenceCondition = {
                              [32m+[0m[0m allOf = [
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "JsonADDomainExtension"
                                      [32m+[0m[0m field  = "Microsoft.Compute/virtualMachines/extensions/type"
                                    },
                                  [32m+[0m[0m {
                                      [32m+[0m[0m equals = "Microsoft.Compute"
                                      [32m+[0m[0m field  = "Microsoft.Compute/virtualMachines/extensions/publisher"
                                    },
                                ]
                            }
                          [32m+[0m[0m roleDefinitionIds  = [
                              [32m+[0m[0m "/providers/Microsoft.Authorization/roleDefinitions/9980e02c-c2be-4d73-94e8-173b1dc7cf3c",
                            ]
                          [32m+[0m[0m type               = "Microsoft.Compute/virtualMachines/extensions"
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Deploy-Windows-DomainJoin"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Modify-NSG"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "This policy enforces the configuration of Network Security Groups (NSG)."
              [32m+[0m[0m displayName = "Enforce specific configuration of Network Security Groups (NSG)"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Network"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m effect                          = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Modify",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Modify"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m nsgRuleAccess                   = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Allow",
                          [32m+[0m[0m "Deny",
                        ]
                      [32m+[0m[0m defaultValue  = "Deny"
                      [32m+[0m[0m type          = "string"
                    }
                  [32m+[0m[0m nsgRuleDescription              = {
                      [32m+[0m[0m defaultValue = "Deny any outbound traffic to the Internet"
                      [32m+[0m[0m type         = "string"
                    }
                  [32m+[0m[0m nsgRuleDestinationAddressPrefix = {
                      [32m+[0m[0m defaultValue = "Internet"
                      [32m+[0m[0m type         = "string"
                    }
                  [32m+[0m[0m nsgRuleDestinationPortRange     = {
                      [32m+[0m[0m defaultValue = "*"
                      [32m+[0m[0m type         = "string"
                    }
                  [32m+[0m[0m nsgRuleDirection                = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Inbound",
                          [32m+[0m[0m "Outbound",
                        ]
                      [32m+[0m[0m defaultValue  = "Outbound"
                      [32m+[0m[0m type          = "string"
                    }
                  [32m+[0m[0m nsgRuleName                     = {
                      [32m+[0m[0m defaultValue = "DenyAnyInternetOutbound"
                      [32m+[0m[0m type         = "string"
                    }
                  [32m+[0m[0m nsgRulePriority                 = {
                      [32m+[0m[0m defaultValue = 1000
                      [32m+[0m[0m type         = "integer"
                    }
                  [32m+[0m[0m nsgRuleProtocol                 = {
                      [32m+[0m[0m defaultValue = "*"
                      [32m+[0m[0m type         = "string"
                    }
                  [32m+[0m[0m nsgRuleSourceAddressPrefix      = {
                      [32m+[0m[0m defaultValue = "*"
                      [32m+[0m[0m type         = "string"
                    }
                  [32m+[0m[0m nsgRuleSourcePortRange          = {
                      [32m+[0m[0m defaultValue = "*"
                      [32m+[0m[0m type         = "string"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Network/networkSecurityGroups"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m count  = {
                                  [32m+[0m[0m field = "Microsoft.Network/networkSecurityGroups/securityRules[*]"
                                }
                              [32m+[0m[0m equals = 0
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m conflictEffect    = "audit"
                          [32m+[0m[0m operations        = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m field     = "Microsoft.Network/networkSecurityGroups/securityRules[*]"
                                  [32m+[0m[0m operation = "add"
                                  [32m+[0m[0m value     = {
                                      [32m+[0m[0m name       = "[parameters('nsgRuleName')]"
                                      [32m+[0m[0m properties = {
                                          [32m+[0m[0m access                   = "[parameters('nsgRuleAccess')]"
                                          [32m+[0m[0m description              = "[parameters('nsgRuleDescription')]"
                                          [32m+[0m[0m destinationAddressPrefix = "[parameters('nsgRuleDestinationAddressPrefix')]"
                                          [32m+[0m[0m destinationPortRange     = "[parameters('nsgRuleDestinationPortRange')]"
                                          [32m+[0m[0m direction                = "[parameters('nsgRuleDirection')]"
                                          [32m+[0m[0m priority                 = "[parameters('nsgRulePriority')]"
                                          [32m+[0m[0m protocol                 = "[parameters('nsgRuleProtocol')]"
                                          [32m+[0m[0m sourceAddressPrefix      = "[parameters('nsgRuleSourceAddressPrefix')]"
                                          [32m+[0m[0m sourcePortRange          = "[parameters('nsgRuleSourcePortRange')]"
                                        }
                                    }
                                },
                            ]
                          [32m+[0m[0m roleDefinitionIds = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7",
                            ]
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Modify-NSG"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.azapi_resource.policy_definitions["myroot2/Modify-UDR"][0m will be created
[0m  [32m+[0m[0m resource "azapi_resource" "policy_definitions" {
      [32m+[0m[0m body                      = {
          [32m+[0m[0m properties = {
              [32m+[0m[0m description = "This policy enforces the configuration of User-Defined Routes (UDR) within a subnet."
              [32m+[0m[0m displayName = "Enforce specific configuration of User-Defined Routes (UDR)"
              [32m+[0m[0m metadata    = {
                  [32m+[0m[0m alzCloudEnvironments = [
                      [32m+[0m[0m "AzureCloud",
                      [32m+[0m[0m "AzureChinaCloud",
                      [32m+[0m[0m "AzureUSGovernment",
                    ]
                  [32m+[0m[0m category             = "Network"
                  [32m+[0m[0m source               = "https://github.com/Azure/Enterprise-Scale/"
                  [32m+[0m[0m version              = "1.0.0"
                }
              [32m+[0m[0m mode        = "All"
              [32m+[0m[0m parameters  = {
                  [32m+[0m[0m addressPrefix    = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "The destination IP address range in CIDR notation that this Policy checks for within the UDR. Example: 0.0.0.0/0 to check for the presence of a default route."
                          [32m+[0m[0m displayName = "Address Prefix"
                        }
                      [32m+[0m[0m type     = "string"
                    }
                  [32m+[0m[0m effect           = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "Modify",
                          [32m+[0m[0m "Disabled",
                        ]
                      [32m+[0m[0m defaultValue  = "Modify"
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "Enable or disable the execution of the policy"
                          [32m+[0m[0m displayName = "Effect"
                        }
                      [32m+[0m[0m type          = "String"
                    }
                  [32m+[0m[0m nextHopIpAddress = {
                      [32m+[0m[0m metadata = {
                          [32m+[0m[0m description = "The IP address packets should be forwarded to."
                          [32m+[0m[0m displayName = "Next Hop IP Address"
                        }
                      [32m+[0m[0m type     = "string"
                    }
                  [32m+[0m[0m nextHopType      = {
                      [32m+[0m[0m allowedValues = [
                          [32m+[0m[0m "VnetLocal",
                          [32m+[0m[0m "VirtualNetworkGateway",
                          [32m+[0m[0m "Internet",
                          [32m+[0m[0m "VirtualAppliance",
                          [32m+[0m[0m "None",
                        ]
                      [32m+[0m[0m metadata      = {
                          [32m+[0m[0m description = "The next hope type that the policy checks for within the inspected route. The value can be Virtual Network, Virtual Network Gateway, Internet, Virtual Appliance, or None."
                          [32m+[0m[0m displayName = "Next Hop Type"
                        }
                      [32m+[0m[0m type          = "string"
                    }
                }
              [32m+[0m[0m policyRule  = {
                  [32m+[0m[0m if   = {
                      [32m+[0m[0m allOf = [
                          [32m+[0m[0m {
                              [32m+[0m[0m equals = "Microsoft.Network/routeTables"
                              [32m+[0m[0m field  = "type"
                            },
                          [32m+[0m[0m {
                              [32m+[0m[0m count  = {
                                  [32m+[0m[0m field = "Microsoft.Network/routeTables/routes[*]"
                                }
                              [32m+[0m[0m equals = 0
                            },
                        ]
                    }
                  [32m+[0m[0m then = {
                      [32m+[0m[0m details = {
                          [32m+[0m[0m conflictEffect    = "audit"
                          [32m+[0m[0m operations        = [
                              [32m+[0m[0m {
                                  [32m+[0m[0m field     = "Microsoft.Network/routeTables/routes[*]"
                                  [32m+[0m[0m operation = "add"
                                  [32m+[0m[0m value     = {
                                      [32m+[0m[0m name       = "default"
                                      [32m+[0m[0m properties = {
                                          [32m+[0m[0m addressPrefix    = "[parameters('addressPrefix')]"
                                          [32m+[0m[0m nextHopIpAddress = "[parameters('nextHopIpAddress')]"
                                          [32m+[0m[0m nextHopType      = "[parameters('nextHopType')]"
                                        }
                                    }
                                },
                            ]
                          [32m+[0m[0m roleDefinitionIds = [
                              [32m+[0m[0m "/providers/microsoft.authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7",
                            ]
                        }
                      [32m+[0m[0m effect  = "[parameters('effect')]"
                    }
                }
              [32m+[0m[0m policyType  = "Custom"
            }
        }
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m ignore_casing             = false
      [32m+[0m[0m ignore_missing_property   = true
      [32m+[0m[0m name                      = "Modify-UDR"
      [32m+[0m[0m output                    = (known after apply)
      [32m+[0m[0m parent_id                 = "/providers/Microsoft.Management/managementGroups/myroot2"
      [32m+[0m[0m retry                     = {
          [32m+[0m[0m error_message_regex  = [
              [32m+[0m[0m "AuthorizationFailed",
            ]
          [32m+[0m[0m interval_seconds     = 10
          [32m+[0m[0m max_interval_seconds = 180
          [32m+[0m[0m multiplier           = 1.5
          [32m+[0m[0m randomization_factor = 0.5
        }
      [32m+[0m[0m schema_validation_enabled = true
      [32m+[0m[0m type                      = "Microsoft.Authorization/policyDefinitions@2023-04-01"

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m delete = "5m"
          [32m+[0m[0m read   = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.alz.terraform_data.policy_assignments_dependencies[0m will be created
[0m  [32m+[0m[0m resource "terraform_data" "policy_assignments_dependencies" {
      [32m+[0m[0m id     = (known after apply)
      [32m+[0m[0m input  = "74234e98afe7498fb5daf1f36ac2d78acc339464f950703b8c019892f982b90b"
      [32m+[0m[0m output = (known after apply)
    }

[1mPlan:[0m 185 to add, 0 to change, 0 to destroy.
[0m[33m╷[0m[0m
[33m│[0m [0m[1m[33mWarning: [0m[0m[1marchitectureDataSource.Read() Warning modifying policy assignments[0m
[33m│[0m [0m
[33m│[0m [0m[0m  with module.alz.data.alz_architecture.this,
[33m│[0m [0m  on ../main.tf line 1, in data "alz_architecture" "this":
[33m│[0m [0m   1: data "alz_architecture" "this" [4m{[0m[0m
[33m│[0m [0m
[33m│[0m [0mManagement group `myroot` not found in hierarchy
[33m╵[0m[0m
[0m[1m
Do you want to perform these actions?[0m
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  [1mEnter a value:[0m [0m